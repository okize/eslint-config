[
  {
    "languageOptions": {
      "sourceType": "module",
      "ecmaVersion": 2024,
      "parser": {
        "meta": {
          "name": "@babel/eslint-parser",
          "version": "7.27.0"
        }
      },
      "parserOptions": {
        "requireConfigFile": false
      },
      "globals": {
        "AggregateError": false,
        "Array": false,
        "ArrayBuffer": false,
        "Atomics": false,
        "BigInt": false,
        "BigInt64Array": false,
        "BigUint64Array": false,
        "Boolean": false,
        "DataView": false,
        "Date": false,
        "decodeURI": false,
        "decodeURIComponent": false,
        "encodeURI": false,
        "encodeURIComponent": false,
        "Error": false,
        "escape": false,
        "eval": false,
        "EvalError": false,
        "FinalizationRegistry": false,
        "Float32Array": false,
        "Float64Array": false,
        "Function": false,
        "globalThis": false,
        "Infinity": false,
        "Int16Array": false,
        "Int32Array": false,
        "Int8Array": false,
        "Intl": false,
        "isFinite": false,
        "isNaN": false,
        "JSON": false,
        "Map": false,
        "Math": false,
        "NaN": false,
        "Number": false,
        "Object": false,
        "parseFloat": false,
        "parseInt": false,
        "Promise": false,
        "Proxy": false,
        "RangeError": false,
        "ReferenceError": false,
        "Reflect": false,
        "RegExp": false,
        "Set": false,
        "SharedArrayBuffer": false,
        "String": false,
        "Symbol": false,
        "SyntaxError": false,
        "TypeError": false,
        "Uint16Array": false,
        "Uint32Array": false,
        "Uint8Array": false,
        "Uint8ClampedArray": false,
        "undefined": false,
        "unescape": false,
        "URIError": false,
        "WeakMap": false,
        "WeakRef": false,
        "WeakSet": false
      }
    },
    "plugins": {
      "js": {
        "meta": {
          "name": "@eslint/js",
          "version": "9.23.0"
        },
        "configs": {
          "all": {
            "rules": {
              "accessor-pairs": "error",
              "array-callback-return": "error",
              "arrow-body-style": "error",
              "block-scoped-var": "error",
              "camelcase": "error",
              "capitalized-comments": "error",
              "class-methods-use-this": "error",
              "complexity": "error",
              "consistent-return": "error",
              "consistent-this": "error",
              "constructor-super": "error",
              "curly": "error",
              "default-case": "error",
              "default-case-last": "error",
              "default-param-last": "error",
              "dot-notation": "error",
              "eqeqeq": "error",
              "for-direction": "error",
              "func-name-matching": "error",
              "func-names": "error",
              "func-style": "error",
              "getter-return": "error",
              "grouped-accessor-pairs": "error",
              "guard-for-in": "error",
              "id-denylist": "error",
              "id-length": "error",
              "id-match": "error",
              "init-declarations": "error",
              "logical-assignment-operators": "error",
              "max-classes-per-file": "error",
              "max-depth": "error",
              "max-lines": "error",
              "max-lines-per-function": "error",
              "max-nested-callbacks": "error",
              "max-params": "error",
              "max-statements": "error",
              "new-cap": "error",
              "no-alert": "error",
              "no-array-constructor": "error",
              "no-async-promise-executor": "error",
              "no-await-in-loop": "error",
              "no-bitwise": "error",
              "no-caller": "error",
              "no-case-declarations": "error",
              "no-class-assign": "error",
              "no-compare-neg-zero": "error",
              "no-cond-assign": "error",
              "no-console": "error",
              "no-const-assign": "error",
              "no-constant-binary-expression": "error",
              "no-constant-condition": "error",
              "no-constructor-return": "error",
              "no-continue": "error",
              "no-control-regex": "error",
              "no-debugger": "error",
              "no-delete-var": "error",
              "no-div-regex": "error",
              "no-dupe-args": "error",
              "no-dupe-class-members": "error",
              "no-dupe-else-if": "error",
              "no-dupe-keys": "error",
              "no-duplicate-case": "error",
              "no-duplicate-imports": "error",
              "no-else-return": "error",
              "no-empty": "error",
              "no-empty-character-class": "error",
              "no-empty-function": "error",
              "no-empty-pattern": "error",
              "no-empty-static-block": "error",
              "no-eq-null": "error",
              "no-eval": "error",
              "no-ex-assign": "error",
              "no-extend-native": "error",
              "no-extra-bind": "error",
              "no-extra-boolean-cast": "error",
              "no-extra-label": "error",
              "no-fallthrough": "error",
              "no-func-assign": "error",
              "no-global-assign": "error",
              "no-implicit-coercion": "error",
              "no-implicit-globals": "error",
              "no-implied-eval": "error",
              "no-import-assign": "error",
              "no-inline-comments": "error",
              "no-inner-declarations": "error",
              "no-invalid-regexp": "error",
              "no-invalid-this": "error",
              "no-irregular-whitespace": "error",
              "no-iterator": "error",
              "no-label-var": "error",
              "no-labels": "error",
              "no-lone-blocks": "error",
              "no-lonely-if": "error",
              "no-loop-func": "error",
              "no-loss-of-precision": "error",
              "no-magic-numbers": "error",
              "no-misleading-character-class": "error",
              "no-multi-assign": "error",
              "no-multi-str": "error",
              "no-negated-condition": "error",
              "no-nested-ternary": "error",
              "no-new": "error",
              "no-new-func": "error",
              "no-new-native-nonconstructor": "error",
              "no-new-wrappers": "error",
              "no-nonoctal-decimal-escape": "error",
              "no-obj-calls": "error",
              "no-object-constructor": "error",
              "no-octal": "error",
              "no-octal-escape": "error",
              "no-param-reassign": "error",
              "no-plusplus": "error",
              "no-promise-executor-return": "error",
              "no-proto": "error",
              "no-prototype-builtins": "error",
              "no-redeclare": "error",
              "no-regex-spaces": "error",
              "no-restricted-exports": "error",
              "no-restricted-globals": "error",
              "no-restricted-imports": "error",
              "no-restricted-properties": "error",
              "no-restricted-syntax": "error",
              "no-return-assign": "error",
              "no-script-url": "error",
              "no-self-assign": "error",
              "no-self-compare": "error",
              "no-sequences": "error",
              "no-setter-return": "error",
              "no-shadow": "error",
              "no-shadow-restricted-names": "error",
              "no-sparse-arrays": "error",
              "no-template-curly-in-string": "error",
              "no-ternary": "error",
              "no-this-before-super": "error",
              "no-throw-literal": "error",
              "no-undef": "error",
              "no-undef-init": "error",
              "no-undefined": "error",
              "no-underscore-dangle": "error",
              "no-unexpected-multiline": "error",
              "no-unmodified-loop-condition": "error",
              "no-unneeded-ternary": "error",
              "no-unreachable": "error",
              "no-unreachable-loop": "error",
              "no-unsafe-finally": "error",
              "no-unsafe-negation": "error",
              "no-unsafe-optional-chaining": "error",
              "no-unused-expressions": "error",
              "no-unused-labels": "error",
              "no-unused-private-class-members": "error",
              "no-unused-vars": "error",
              "no-use-before-define": "error",
              "no-useless-assignment": "error",
              "no-useless-backreference": "error",
              "no-useless-call": "error",
              "no-useless-catch": "error",
              "no-useless-computed-key": "error",
              "no-useless-concat": "error",
              "no-useless-constructor": "error",
              "no-useless-escape": "error",
              "no-useless-rename": "error",
              "no-useless-return": "error",
              "no-var": "error",
              "no-void": "error",
              "no-warning-comments": "error",
              "no-with": "error",
              "object-shorthand": "error",
              "one-var": "error",
              "operator-assignment": "error",
              "prefer-arrow-callback": "error",
              "prefer-const": "error",
              "prefer-destructuring": "error",
              "prefer-exponentiation-operator": "error",
              "prefer-named-capture-group": "error",
              "prefer-numeric-literals": "error",
              "prefer-object-has-own": "error",
              "prefer-object-spread": "error",
              "prefer-promise-reject-errors": "error",
              "prefer-regex-literals": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
              "prefer-template": "error",
              "radix": "error",
              "require-atomic-updates": "error",
              "require-await": "error",
              "require-unicode-regexp": "error",
              "require-yield": "error",
              "sort-imports": "error",
              "sort-keys": "error",
              "sort-vars": "error",
              "strict": "error",
              "symbol-description": "error",
              "unicode-bom": "error",
              "use-isnan": "error",
              "valid-typeof": "error",
              "vars-on-top": "error",
              "yoda": "error"
            }
          },
          "recommended": {
            "rules": {
              "constructor-super": "error",
              "for-direction": "error",
              "getter-return": "error",
              "no-async-promise-executor": "error",
              "no-case-declarations": "error",
              "no-class-assign": "error",
              "no-compare-neg-zero": "error",
              "no-cond-assign": "error",
              "no-const-assign": "error",
              "no-constant-binary-expression": "error",
              "no-constant-condition": "error",
              "no-control-regex": "error",
              "no-debugger": "error",
              "no-delete-var": "error",
              "no-dupe-args": "error",
              "no-dupe-class-members": "error",
              "no-dupe-else-if": "error",
              "no-dupe-keys": "error",
              "no-duplicate-case": "error",
              "no-empty": "error",
              "no-empty-character-class": "error",
              "no-empty-pattern": "error",
              "no-empty-static-block": "error",
              "no-ex-assign": "error",
              "no-extra-boolean-cast": "error",
              "no-fallthrough": "error",
              "no-func-assign": "error",
              "no-global-assign": "error",
              "no-import-assign": "error",
              "no-invalid-regexp": "error",
              "no-irregular-whitespace": "error",
              "no-loss-of-precision": "error",
              "no-misleading-character-class": "error",
              "no-new-native-nonconstructor": "error",
              "no-nonoctal-decimal-escape": "error",
              "no-obj-calls": "error",
              "no-octal": "error",
              "no-prototype-builtins": "error",
              "no-redeclare": "error",
              "no-regex-spaces": "error",
              "no-self-assign": "error",
              "no-setter-return": "error",
              "no-shadow-restricted-names": "error",
              "no-sparse-arrays": "error",
              "no-this-before-super": "error",
              "no-undef": "error",
              "no-unexpected-multiline": "error",
              "no-unreachable": "error",
              "no-unsafe-finally": "error",
              "no-unsafe-negation": "error",
              "no-unsafe-optional-chaining": "error",
              "no-unused-labels": "error",
              "no-unused-private-class-members": "error",
              "no-unused-vars": "error",
              "no-useless-backreference": "error",
              "no-useless-catch": "error",
              "no-useless-escape": "error",
              "no-with": "error",
              "require-yield": "error",
              "use-isnan": "error",
              "valid-typeof": "error"
            }
          }
        }
      },
      "@stylistic": {
        "rules": {
          "array-bracket-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce linebreaks after opening and before closing array brackets",
                "url": "https://eslint.style/rules/js/array-bracket-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "consistent"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "boolean"
                        },
                        "minItems": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "missingClosingLinebreak": "A linebreak is required before ']'."
              }
            }
          },
          "array-bracket-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside array brackets",
                "url": "https://eslint.style/rules/js/array-bracket-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "singleValue": {
                      "type": "boolean"
                    },
                    "objectsInArrays": {
                      "type": "boolean"
                    },
                    "arraysInArrays": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'."
              }
            }
          },
          "array-element-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce line breaks after each array element",
                "url": "https://eslint.style/rules/js/array-element-newline"
              },
              "fixable": "whitespace",
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "always",
                          "never",
                          "consistent"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "consistent": {
                            "type": "boolean"
                          },
                          "multiline": {
                            "type": "boolean"
                          },
                          "minItems": {
                            "type": [
                              "integer",
                              "null"
                            ],
                            "minimum": 0
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/basicConfig"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "ArrayExpression": {
                            "$ref": "#/definitions/basicConfig"
                          },
                          "ArrayPattern": {
                            "$ref": "#/definitions/basicConfig"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  }
                ]
              },
              "messages": {
                "unexpectedLineBreak": "There should be no linebreak here.",
                "missingLineBreak": "There should be a linebreak after this element."
              }
            }
          },
          "arrow-parens": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require parentheses around arrow function arguments",
                "url": "https://eslint.style/rules/js/arrow-parens"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "as-needed"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "requireForBlockBody": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedParens": "Unexpected parentheses around single function argument.",
                "expectedParens": "Expected parentheses around arrow function argument.",
                "unexpectedParensInline": "Unexpected parentheses around single function argument having a body with no curly braces.",
                "expectedParensBlock": "Expected parentheses around arrow function argument having a body with curly braces."
              }
            }
          },
          "arrow-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after the arrow in arrow functions",
                "url": "https://eslint.style/rules/js/arrow-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": true
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expectedBefore": "Missing space before =>.",
                "unexpectedBefore": "Unexpected space before =>.",
                "expectedAfter": "Missing space after =>.",
                "unexpectedAfter": "Unexpected space after =>."
              }
            }
          },
          "block-spacing": {
            "defaultOptions": [
              "always"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
                "url": "https://eslint.style/rules/ts/block-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "missing": "Requires a space {{location}} '{{token}}'.",
                "extra": "Unexpected space(s) {{location}} '{{token}}'."
              }
            }
          },
          "brace-style": {
            "defaultOptions": [
              "1tbs"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent brace style for blocks",
                "url": "https://eslint.style/rules/ts/brace-style"
              },
              "messages": {
                "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                "blockSameLine": "Statement inside of curly braces should be on next line.",
                "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "1tbs",
                    "stroustrup",
                    "allman"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "allowSingleLine": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "comma-dangle": {
            "defaultOptions": [
              "never"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow trailing commas",
                "url": "https://eslint.style/rules/ts/comma-dangle"
              },
              "schema": {
                "$defs": {
                  "value": {
                    "type": "string",
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline"
                    ]
                  },
                  "valueWithIgnore": {
                    "type": "string",
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline",
                      "ignore"
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/value"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "arrays": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "objects": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "imports": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "exports": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "functions": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "importAttributes": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "dynamicImports": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "enums": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "generics": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "tuples": {
                            "$ref": "#/$defs/valueWithIgnore"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                ],
                "additionalItems": false
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected trailing comma.",
                "missing": "Missing trailing comma."
              }
            }
          },
          "comma-spacing": {
            "defaultOptions": [
              {
                "before": false,
                "after": true
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after commas",
                "url": "https://eslint.style/rules/ts/comma-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpected": "There should be no space {{loc}} ','.",
                "missing": "A space is required {{loc}} ','."
              }
            }
          },
          "comma-style": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent comma style",
                "url": "https://eslint.style/rules/js/comma-style"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "first",
                    "last"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                "expectedCommaFirst": "',' should be placed first.",
                "expectedCommaLast": "',' should be placed last."
              }
            }
          },
          "computed-property-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside computed property brackets",
                "url": "https://eslint.style/rules/js/computed-property-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "enforceForClassMembers": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'."
              }
            }
          },
          "curly-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent line breaks after opening and before closing braces",
                "url": "https://eslint.style/rules/plus/curly-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "IfStatementConsequent": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "always",
                                "never"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multiline": {
                                  "type": "boolean"
                                },
                                "minElements": {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                "consistent": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "IfStatementAlternative": "[Circular Reference]",
                        "DoWhileStatement": "[Circular Reference]",
                        "ForInStatement": "[Circular Reference]",
                        "ForOfStatement": "[Circular Reference]",
                        "ForStatement": "[Circular Reference]",
                        "WhileStatement": "[Circular Reference]",
                        "SwitchStatement": "[Circular Reference]",
                        "SwitchCase": "[Circular Reference]",
                        "TryStatementBlock": "[Circular Reference]",
                        "TryStatementHandler": "[Circular Reference]",
                        "TryStatementFinalizer": "[Circular Reference]",
                        "BlockStatement": "[Circular Reference]",
                        "ArrowFunctionExpression": "[Circular Reference]",
                        "FunctionDeclaration": "[Circular Reference]",
                        "FunctionExpression": "[Circular Reference]",
                        "Property": "[Circular Reference]",
                        "ClassBody": "[Circular Reference]",
                        "StaticBlock": "[Circular Reference]",
                        "WithStatement": "[Circular Reference]",
                        "TSEnumBody": "[Circular Reference]",
                        "TSInterfaceBody": "[Circular Reference]",
                        "TSModuleBlock": "[Circular Reference]",
                        "multiline": "[Circular Reference]",
                        "minElements": "[Circular Reference]",
                        "consistent": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
              }
            }
          },
          "dot-location": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent newlines before and after dots",
                "url": "https://eslint.style/rules/js/dot-location"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "object",
                    "property"
                  ]
                }
              ],
              "fixable": "code",
              "messages": {
                "expectedDotAfterObject": "Expected dot to be on same line as object.",
                "expectedDotBeforeProperty": "Expected dot to be on same line as property."
              }
            }
          },
          "eol-last": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow newline at the end of files",
                "url": "https://eslint.style/rules/js/eol-last"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "unix",
                    "windows"
                  ]
                }
              ],
              "messages": {
                "missing": "Newline required at end of file but not found.",
                "unexpected": "Newline not allowed at end of file."
              }
            }
          },
          "func-call-spacing": {
            "defaultOptions": [
              "never",
              {}
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing between function identifiers and their invocations",
                "url": "https://eslint.style/rules/ts/function-call-spacing"
              },
              "fixable": "whitespace",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "never"
                        ]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "allowNewlines": {
                            "type": "boolean"
                          },
                          "optionalChain": {
                            "type": "object",
                            "properties": {
                              "before": {
                                "type": "boolean"
                              },
                              "after": {
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                "unexpectedNewline": "Unexpected newline between function name and paren.",
                "missing": "Missing space between function name and paren."
              }
            }
          },
          "function-call-argument-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce line breaks between arguments of a function call",
                "url": "https://eslint.style/rules/js/function-call-argument-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "consistent"
                  ]
                }
              ],
              "messages": {
                "unexpectedLineBreak": "There should be no line break here.",
                "missingLineBreak": "There should be a line break after this argument."
              }
            }
          },
          "function-call-spacing": "[Circular Reference]",
          "function-paren-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent line breaks inside function parentheses",
                "url": "https://eslint.style/rules/js/function-paren-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                        "multiline",
                        "multiline-arguments"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "minItems": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "expectedBefore": "Expected newline before ')'.",
                "expectedAfter": "Expected newline after '('.",
                "expectedBetween": "Expected newline between arguments/params.",
                "unexpectedBefore": "Unexpected newline before ')'.",
                "unexpectedAfter": "Unexpected newline after '('."
              }
            }
          },
          "generator-star-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing around `*` operators in generator functions",
                "url": "https://eslint.style/rules/js/generator-star-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "before",
                        "after",
                        "both",
                        "neither"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "before": {
                          "type": "boolean"
                        },
                        "after": {
                          "type": "boolean"
                        },
                        "named": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "before",
                                "after",
                                "both",
                                "neither"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "before": {
                                  "type": "boolean"
                                },
                                "after": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "anonymous": "[Circular Reference]",
                        "method": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "missingBefore": "Missing space before *.",
                "missingAfter": "Missing space after *.",
                "unexpectedBefore": "Unexpected space before *.",
                "unexpectedAfter": "Unexpected space after *."
              }
            }
          },
          "implicit-arrow-linebreak": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the location of arrow function bodies",
                "url": "https://eslint.style/rules/js/implicit-arrow-linebreak"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "beside",
                    "below"
                  ]
                }
              ],
              "messages": {
                "expected": "Expected a linebreak before this expression.",
                "unexpected": "Expected no linebreak before this expression."
              }
            }
          },
          "indent": {
            "defaultOptions": [
              4,
              {
                "SwitchCase": 1,
                "flatTernaryExpressions": false,
                "ignoredNodes": []
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent indentation",
                "url": "https://eslint.style/rules/ts/indent"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "tab"
                      ]
                    },
                    {
                      "type": "integer",
                      "minimum": 0
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "SwitchCase": {
                      "type": "integer",
                      "minimum": 0,
                      "default": 0
                    },
                    "VariableDeclarator": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "integer",
                              "minimum": 0
                            },
                            {
                              "type": "string",
                              "enum": [
                                "first",
                                "off"
                              ]
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "var": "[Circular Reference]",
                            "let": "[Circular Reference]",
                            "const": "[Circular Reference]"
                          },
                          "additionalProperties": false
                        }
                      ]
                    },
                    "outerIIFEBody": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "type": "string",
                          "enum": [
                            "off"
                          ]
                        }
                      ]
                    },
                    "MemberExpression": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "type": "string",
                          "enum": [
                            "off"
                          ]
                        }
                      ]
                    },
                    "FunctionDeclaration": {
                      "type": "object",
                      "properties": {
                        "parameters": "[Circular Reference]",
                        "body": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "FunctionExpression": {
                      "type": "object",
                      "properties": {
                        "parameters": "[Circular Reference]",
                        "body": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "StaticBlock": {
                      "type": "object",
                      "properties": {
                        "body": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "CallExpression": {
                      "type": "object",
                      "properties": {
                        "arguments": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    },
                    "ArrayExpression": "[Circular Reference]",
                    "ObjectExpression": "[Circular Reference]",
                    "ImportDeclaration": "[Circular Reference]",
                    "flatTernaryExpressions": {
                      "type": "boolean",
                      "default": false
                    },
                    "offsetTernaryExpressions": {
                      "type": "boolean",
                      "default": false
                    },
                    "offsetTernaryExpressionsOffsetCallExpressions": {
                      "type": "boolean",
                      "default": true
                    },
                    "ignoredNodes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "not": {
                          "pattern": ":exit$"
                        }
                      }
                    },
                    "ignoreComments": {
                      "type": "boolean",
                      "default": false
                    },
                    "tabLength": {
                      "type": "number",
                      "default": 4
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
              }
            }
          },
          "indent-binary-ops": {
            "defaultOptions": [
              2
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Indentation for binary operators",
                "url": "https://eslint.style/rules/plus/indent-binary-ops"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "integer",
                      "minimum": 0
                    },
                    {
                      "type": "string",
                      "enum": [
                        "tab"
                      ]
                    }
                  ]
                }
              ],
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}}"
              }
            }
          },
          "jsx-child-element-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-child-element-spacing"
              },
              "messages": {
                "spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
                "spacingBeforeNext": "Ambiguous spacing before next element {{element}}"
              },
              "schema": []
            }
          },
          "jsx-closing-bracket-location": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce closing bracket location in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-closing-bracket-location"
              },
              "fixable": "code",
              "messages": {
                "bracketLocation": "The closing bracket must be {{location}}{{details}}"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nonEmpty": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned"
                              ]
                            },
                            {
                              "type": "boolean",
                              "enum": [
                                false
                              ]
                            }
                          ]
                        },
                        "selfClosing": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned"
                              ]
                            },
                            {
                              "type": "boolean",
                              "enum": [
                                false
                              ]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "jsx-closing-tag-location": {
            "defaultOptions": [
              "tag-aligned"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce closing tag location for multiline JSX",
                "url": "https://eslint.style/rules/jsx/jsx-closing-tag-location"
              },
              "fixable": "whitespace",
              "messages": {
                "onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
                "matchIndent": "Expected closing tag to match indentation of opening.",
                "alignWithOpening": "Expected closing tag to be aligned with the line containing the opening tag"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "tag-aligned",
                        "line-aligned"
                      ],
                      "default": "tag-aligned"
                    }
                  ]
                }
              ]
            }
          },
          "jsx-curly-brace-presence": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
                "url": "https://eslint.style/rules/jsx/jsx-curly-brace-presence"
              },
              "fixable": "code",
              "messages": {
                "unnecessaryCurly": "Curly braces are unnecessary here.",
                "missingCurly": "Need to wrap this literal in a JSX expression."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "props": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "ignore"
                          ]
                        },
                        "children": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        },
                        "propElementValues": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "string",
                      "enum": "[Circular Reference]"
                    }
                  ]
                }
              ]
            }
          },
          "jsx-curly-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-curly-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "consistent",
                        "never"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleline": {
                          "type": "string",
                          "enum": [
                            "consistent",
                            "require",
                            "forbid"
                          ]
                        },
                        "multiline": {
                          "type": "string",
                          "enum": [
                            "consistent",
                            "require",
                            "forbid"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "expectedBefore": "Expected newline before '}'.",
                "expectedAfter": "Expected newline after '{'.",
                "unexpectedBefore": "Unexpected newline before '}'.",
                "unexpectedAfter": "Unexpected newline after '{'."
              }
            }
          },
          "jsx-curly-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-curly-spacing"
              },
              "fixable": "code",
              "messages": {
                "noNewlineAfter": "There should be no newline after '{{token}}'",
                "noNewlineBefore": "There should be no newline before '{{token}}'",
                "noSpaceAfter": "There should be no space after '{{token}}'",
                "noSpaceBefore": "There should be no space before '{{token}}'",
                "spaceNeededAfter": "A space is required after '{{token}}'",
                "spaceNeededBefore": "A space is required before '{{token}}'"
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "type": "object",
                    "properties": {
                      "when": {
                        "type": "string",
                        "enum": [
                          "always",
                          "never"
                        ]
                      },
                      "allowMultiline": {
                        "type": "boolean"
                      },
                      "spacing": {
                        "type": "object",
                        "properties": {
                          "objectLiterals": {
                            "type": "string",
                            "enum": "[Circular Reference]"
                          }
                        }
                      }
                    }
                  },
                  "basicConfigOrBoolean": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/basicConfig"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "anyOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/definitions/basicConfig"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "$ref": "#/definitions/basicConfigOrBoolean"
                              },
                              "children": {
                                "$ref": "#/definitions/basicConfigOrBoolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "type": "string",
                        "enum": "[Circular Reference]"
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean"
                      },
                      "spacing": {
                        "type": "object",
                        "properties": {
                          "objectLiterals": {
                            "type": "string",
                            "enum": "[Circular Reference]"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "jsx-equals-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow spaces around equal signs in JSX attributes",
                "url": "https://eslint.style/rules/jsx/jsx-equals-spacing"
              },
              "fixable": "code",
              "messages": {
                "noSpaceBefore": "There should be no space before '='",
                "noSpaceAfter": "There should be no space after '='",
                "needSpaceBefore": "A space is required before '='",
                "needSpaceAfter": "A space is required after '='"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ]
            }
          },
          "jsx-first-prop-new-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce proper position of the first property in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-first-prop-new-line"
              },
              "fixable": "code",
              "messages": {
                "propOnNewLine": "Property should be placed on a new line",
                "propOnSameLine": "Property should be placed on the same line as the component declaration"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "multiline",
                    "multiline-multiprop",
                    "multiprop"
                  ]
                }
              ]
            }
          },
          "jsx-function-call-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce line breaks before and after JSX elements when they are used as arguments to a function.",
                "url": "https://eslint.style/rules/jsx/jsx-function-call-newline"
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "Missing line break around JSX"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "multiline"
                  ]
                }
              ]
            }
          },
          "jsx-indent": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce JSX indentation. Deprecated, use `indent` rule instead.",
                "url": "https://eslint.style/rules/jsx/jsx-indent"
              },
              "deprecated": true,
              "fixable": "whitespace",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "tab"
                      ]
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "checkAttributes": {
                      "type": "boolean"
                    },
                    "indentLogicalExpressions": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-indent-props": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce props indentation in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-indent-props"
              },
              "fixable": "code",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "tab",
                        "first"
                      ]
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "indentMode": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "tab",
                                "first"
                              ]
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "ignoreTernaryOperator": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "jsx-max-props-per-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce maximum of props on a single line in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-max-props-per-line"
              },
              "fixable": "code",
              "messages": {
                "newLine": "Prop `{{prop}}` must be placed on a new line"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "maximum": {
                          "type": "object",
                          "properties": {
                            "single": {
                              "type": "integer",
                              "minimum": 1
                            },
                            "multi": {
                              "type": "integer",
                              "minimum": 1
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "maximum": {
                          "type": "number",
                          "minimum": 1
                        },
                        "when": {
                          "type": "string",
                          "enum": [
                            "always",
                            "multiline"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "jsx-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or prevent a new line after jsx elements and expressions.",
                "url": "https://eslint.style/rules/jsx/jsx-newline"
              },
              "fixable": "code",
              "messages": {
                "require": "JSX element should start in a new line",
                "prevent": "JSX element should not start in a new line",
                "allowMultilines": "Multiline JSX elements should start in a new line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "prevent": {
                      "default": false,
                      "type": "boolean"
                    },
                    "allowMultilines": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false,
                  "if": {
                    "properties": {
                      "allowMultilines": {
                        "const": true
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "prevent": {
                        "const": true
                      }
                    },
                    "required": [
                      "prevent"
                    ]
                  }
                }
              ]
            }
          },
          "jsx-one-expression-per-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require one JSX element per line",
                "url": "https://eslint.style/rules/jsx/jsx-one-expression-per-line"
              },
              "fixable": "whitespace",
              "messages": {
                "moveToNewLine": "`{{descriptor}}` must be placed on a new line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allow": {
                      "type": "string",
                      "enum": [
                        "none",
                        "literal",
                        "single-child",
                        "single-line",
                        "non-jsx"
                      ]
                    }
                  },
                  "default": {
                    "allow": "none"
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-pascal-case": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce PascalCase for user-defined JSX components",
                "url": "https://eslint.style/rules/jsx/jsx-pascal-case"
              },
              "messages": {
                "usePascalCase": "Imported JSX component {{name}} must be in PascalCase",
                "usePascalOrSnakeCase": "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowAllCaps": {
                      "type": "boolean"
                    },
                    "allowLeadingUnderscore": {
                      "type": "boolean"
                    },
                    "allowNamespace": {
                      "type": "boolean"
                    },
                    "ignore": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-props-no-multi-spaces": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow multiple spaces between inline JSX props",
                "url": "https://eslint.style/rules/jsx/jsx-props-no-multi-spaces"
              },
              "fixable": "code",
              "messages": {
                "noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
                "onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”"
              },
              "schema": []
            }
          },
          "jsx-quotes": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
                "url": "https://eslint.style/rules/js/jsx-quotes"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "prefer-single",
                    "prefer-double"
                  ]
                }
              ],
              "messages": {
                "unexpected": "Unexpected usage of {{description}}."
              }
            }
          },
          "jsx-self-closing-comp": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow extra closing tags for components without children",
                "url": "https://eslint.style/rules/jsx/jsx-self-closing-comp"
              },
              "fixable": "code",
              "messages": {
                "notSelfClosing": "Empty components are self-closing"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "component": {
                      "default": true,
                      "type": "boolean"
                    },
                    "html": {
                      "default": true,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-sort-props": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce props alphabetical sorting",
                "url": "https://eslint.style/rules/jsx/jsx-sort-props"
              },
              "fixable": "code",
              "messages": {
                "noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
                "listIsEmpty": "A customized reserved first list must not be empty",
                "listReservedPropsFirst": "Reserved props must be listed before all other props",
                "listCallbacksLast": "Callbacks must be listed after all other props",
                "listShorthandFirst": "Shorthand props must be listed before all other props",
                "listShorthandLast": "Shorthand props must be listed after all other props",
                "listMultilineFirst": "Multiline props must be listed before all other props",
                "listMultilineLast": "Multiline props must be listed after all other props",
                "sortPropsByAlpha": "Props should be sorted alphabetically"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "callbacksLast": {
                      "type": "boolean"
                    },
                    "shorthandFirst": {
                      "type": "boolean"
                    },
                    "shorthandLast": {
                      "type": "boolean"
                    },
                    "multiline": {
                      "type": "string",
                      "enum": [
                        "ignore",
                        "first",
                        "last"
                      ],
                      "default": "ignore"
                    },
                    "ignoreCase": {
                      "type": "boolean"
                    },
                    "noSortAlphabetically": {
                      "type": "boolean"
                    },
                    "reservedFirst": {
                      "type": [
                        "array",
                        "boolean"
                      ]
                    },
                    "locale": {
                      "type": "string",
                      "default": "auto"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-tag-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce whitespace in and around the JSX opening and closing brackets",
                "url": "https://eslint.style/rules/jsx/jsx-tag-spacing"
              },
              "fixable": "whitespace",
              "messages": {
                "selfCloseSlashNoSpace": "Whitespace is forbidden between `/` and `>`; write `/>`",
                "selfCloseSlashNeedSpace": "Whitespace is required between `/` and `>`; write `/ >`",
                "closeSlashNoSpace": "Whitespace is forbidden between `<` and `/`; write `</`",
                "closeSlashNeedSpace": "Whitespace is required between `<` and `/`; write `< /`",
                "beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeSelfCloseNeedSpace": "A space is required before closing bracket",
                "beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
                "afterOpenNoSpace": "A space is forbidden after opening bracket",
                "afterOpenNeedSpace": "A space is required after opening bracket",
                "beforeCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeCloseNeedSpace": "Whitespace is required before closing bracket",
                "beforeCloseNeedNewline": "A newline is required before closing bracket"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "closingSlash": {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "allow"
                      ]
                    },
                    "beforeSelfClosing": {
                      "type": "string",
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow"
                      ]
                    },
                    "afterOpening": {
                      "type": "string",
                      "enum": [
                        "always",
                        "allow-multiline",
                        "never",
                        "allow"
                      ]
                    },
                    "beforeClosing": {
                      "type": "string",
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow"
                      ]
                    }
                  },
                  "default": {
                    "closingSlash": "never",
                    "beforeSelfClosing": "always",
                    "afterOpening": "never",
                    "beforeClosing": "allow"
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-wrap-multilines": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow missing parentheses around multiline JSX",
                "url": "https://eslint.style/rules/jsx/jsx-wrap-multilines"
              },
              "fixable": "code",
              "messages": {
                "missingParens": "Missing parentheses around multilines JSX",
                "parensOnNewLines": "Parentheses around JSX should be on separate lines"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "declaration": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "assignment": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "return": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "arrow": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "condition": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "logical": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "prop": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "propertyValue": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "key-spacing": {
            "defaultOptions": [
              {}
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
                "url": "https://eslint.style/rules/ts/key-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "align": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "colon",
                                "value"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "mode": {
                                  "type": "string",
                                  "enum": [
                                    "strict",
                                    "minimum"
                                  ]
                                },
                                "on": {
                                  "type": "string",
                                  "enum": [
                                    "colon",
                                    "value"
                                  ]
                                },
                                "beforeColon": {
                                  "type": "boolean"
                                },
                                "afterColon": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "mode": {
                          "type": "string",
                          "enum": [
                            "strict",
                            "minimum"
                          ]
                        },
                        "beforeColon": {
                          "type": "boolean"
                        },
                        "afterColon": {
                          "type": "boolean"
                        },
                        "ignoredNodes": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "ObjectExpression",
                              "ObjectPattern",
                              "ImportDeclaration",
                              "ExportNamedDeclaration",
                              "ExportAllDeclaration",
                              "TSTypeLiteral",
                              "TSInterfaceBody",
                              "ClassBody"
                            ]
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleLine": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "multiLine": {
                          "type": "object",
                          "properties": {
                            "align": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "enum": [
                                    "colon",
                                    "value"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "mode": {
                                      "type": "string",
                                      "enum": [
                                        "strict",
                                        "minimum"
                                      ]
                                    },
                                    "on": {
                                      "type": "string",
                                      "enum": [
                                        "colon",
                                        "value"
                                      ]
                                    },
                                    "beforeColon": {
                                      "type": "boolean"
                                    },
                                    "afterColon": {
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              ]
                            },
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleLine": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "multiLine": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "align": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "on": {
                              "type": "string",
                              "enum": [
                                "colon",
                                "value"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
              }
            }
          },
          "keyword-spacing": {
            "defaultOptions": [
              {}
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after keywords",
                "url": "https://eslint.style/rules/ts/keyword-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": true
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    },
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "abstract": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "as": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "async": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "await": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "boolean": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "break": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "byte": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "case": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "catch": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "char": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "class": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "const": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "continue": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "debugger": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "default": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "do": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "double": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "else": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "enum": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "export": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "extends": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "false": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "final": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "finally": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "float": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "for": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "from": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "get": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "goto": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "if": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "implements": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "import": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "in": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "instanceof": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "int": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "interface": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "let": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "long": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "native": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "new": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "null": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "of": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "package": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "private": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "protected": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "public": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "return": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "satisfies": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "set": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "short": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "static": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "super": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "switch": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "synchronized": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "this": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "throw": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "throws": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "transient": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "true": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "try": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "typeof": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "var": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "void": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "volatile": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "while": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "with": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "yield": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expectedBefore": "Expected space(s) before \"{{value}}\".",
                "expectedAfter": "Expected space(s) after \"{{value}}\".",
                "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
                "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
              }
            }
          },
          "line-comment-position": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce position of line comments",
                "url": "https://eslint.style/rules/js/line-comment-position"
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "above",
                        "beside"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "position": {
                          "type": "string",
                          "enum": [
                            "above",
                            "beside"
                          ]
                        },
                        "ignorePattern": {
                          "type": "string"
                        },
                        "applyDefaultPatterns": {
                          "type": "boolean"
                        },
                        "applyDefaultIgnorePatterns": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "above": "Expected comment to be above code.",
                "beside": "Expected comment to be beside code."
              }
            }
          },
          "linebreak-style": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreak style",
                "url": "https://eslint.style/rules/js/linebreak-style"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "unix",
                    "windows"
                  ]
                }
              ],
              "messages": {
                "expectedLF": "Expected linebreaks to be 'LF' but found 'CRLF'.",
                "expectedCRLF": "Expected linebreaks to be 'CRLF' but found 'LF'."
              }
            }
          },
          "lines-around-comment": {
            "defaultOptions": [
              {
                "beforeBlockComment": true
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require empty lines around comments",
                "url": "https://eslint.style/rules/ts/lines-around-comment"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "beforeBlockComment": {
                      "type": "boolean",
                      "default": true
                    },
                    "afterBlockComment": {
                      "type": "boolean",
                      "default": false
                    },
                    "beforeLineComment": {
                      "type": "boolean",
                      "default": false
                    },
                    "afterLineComment": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowBlockStart": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowBlockEnd": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowClassStart": {
                      "type": "boolean"
                    },
                    "allowClassEnd": {
                      "type": "boolean"
                    },
                    "allowObjectStart": {
                      "type": "boolean"
                    },
                    "allowObjectEnd": {
                      "type": "boolean"
                    },
                    "allowArrayStart": {
                      "type": "boolean"
                    },
                    "allowArrayEnd": {
                      "type": "boolean"
                    },
                    "allowInterfaceStart": {
                      "type": "boolean"
                    },
                    "allowInterfaceEnd": {
                      "type": "boolean"
                    },
                    "allowTypeStart": {
                      "type": "boolean"
                    },
                    "allowTypeEnd": {
                      "type": "boolean"
                    },
                    "allowEnumStart": {
                      "type": "boolean"
                    },
                    "allowEnumEnd": {
                      "type": "boolean"
                    },
                    "allowModuleStart": {
                      "type": "boolean"
                    },
                    "allowModuleEnd": {
                      "type": "boolean"
                    },
                    "ignorePattern": {
                      "type": "string"
                    },
                    "applyDefaultIgnorePatterns": {
                      "type": "boolean"
                    },
                    "afterHashbangComment": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "after": "Expected line after comment.",
                "before": "Expected line before comment."
              }
            }
          },
          "lines-between-class-members": {
            "defaultOptions": [
              "always",
              {
                "exceptAfterOverload": true,
                "exceptAfterSingleLine": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow an empty line between class members",
                "url": "https://eslint.style/rules/ts/lines-between-class-members"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "enforce": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "blankLine": {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "never"
                                ]
                              },
                              "prev": {
                                "type": "string",
                                "enum": [
                                  "method",
                                  "field",
                                  "*"
                                ]
                              },
                              "next": {
                                "type": "string",
                                "enum": [
                                  "method",
                                  "field",
                                  "*"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "blankLine",
                              "prev",
                              "next"
                            ]
                          },
                          "minItems": 1
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "enforce"
                      ]
                    },
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptAfterSingleLine": {
                      "type": "boolean",
                      "default": false
                    },
                    "exceptAfterOverload": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "never": "Unexpected blank line between class members.",
                "always": "Expected blank line between class members."
              }
            }
          },
          "max-len": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce a maximum line length",
                "url": "https://eslint.style/rules/js/max-len"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "comments": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "tabWidth": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "ignorePattern": {
                          "type": "string"
                        },
                        "ignoreComments": {
                          "type": "boolean"
                        },
                        "ignoreStrings": {
                          "type": "boolean"
                        },
                        "ignoreUrls": {
                          "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                          "type": "boolean"
                        },
                        "ignoreRegExpLiterals": {
                          "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "integer",
                      "minimum": 0
                    }
                  ]
                },
                "[Circular Reference]",
                "[Circular Reference]"
              ],
              "messages": {
                "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
                "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
              }
            }
          },
          "max-statements-per-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce a maximum number of statements allowed per line",
                "url": "https://eslint.style/rules/js/max-statements-per-line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "integer",
                      "minimum": 1,
                      "default": 1
                    },
                    "ignoredNodes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "BreakStatement",
                          "ClassDeclaration",
                          "ContinueStatement",
                          "DebuggerStatement",
                          "DoWhileStatement",
                          "ExpressionStatement",
                          "ForInStatement",
                          "ForOfStatement",
                          "ForStatement",
                          "FunctionDeclaration",
                          "IfStatement",
                          "ImportDeclaration",
                          "LabeledStatement",
                          "ReturnStatement",
                          "SwitchStatement",
                          "ThrowStatement",
                          "TryStatement",
                          "VariableDeclaration",
                          "WhileStatement",
                          "WithStatement",
                          "ExportNamedDeclaration",
                          "ExportDefaultDeclaration",
                          "ExportAllDeclaration"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "exceed": "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}."
              }
            }
          },
          "member-delimiter-style": {
            "defaultOptions": [
              {
                "multiline": {
                  "delimiter": "semi",
                  "requireLast": true
                },
                "singleline": {
                  "delimiter": "semi",
                  "requireLast": false
                },
                "multilineDetection": "brackets"
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require a specific member delimiter style for interfaces and type literals",
                "url": "https://eslint.style/rules/ts/member-delimiter-style"
              },
              "fixable": "whitespace",
              "messages": {
                "unexpectedComma": "Unexpected separator (,).",
                "unexpectedSemi": "Unexpected separator (;).",
                "expectedComma": "Expected a comma.",
                "expectedSemi": "Expected a semicolon."
              },
              "schema": [
                {
                  "$defs": {
                    "multiLineOption": {
                      "type": "string",
                      "enum": [
                        "none",
                        "semi",
                        "comma"
                      ]
                    },
                    "singleLineOption": {
                      "type": "string",
                      "enum": [
                        "semi",
                        "comma"
                      ]
                    },
                    "delimiterConfig": {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "object",
                          "properties": {
                            "delimiter": {
                              "$ref": "#/items/0/$defs/multiLineOption"
                            },
                            "requireLast": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "singleline": {
                          "type": "object",
                          "properties": {
                            "delimiter": {
                              "$ref": "#/items/0/$defs/singleLineOption"
                            },
                            "requireLast": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "properties": {
                    "multiline": "[Circular Reference]",
                    "singleline": "[Circular Reference]",
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "interface": {
                          "$ref": "#/items/0/$defs/delimiterConfig"
                        },
                        "typeLiteral": {
                          "$ref": "#/items/0/$defs/delimiterConfig"
                        }
                      },
                      "additionalProperties": false
                    },
                    "multilineDetection": {
                      "type": "string",
                      "enum": [
                        "brackets",
                        "last-member"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "multiline-comment-style": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce a particular style for multiline comments",
                "url": "https://eslint.style/rules/js/multiline-comment-style"
              },
              "fixable": "whitespace",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": [
                          "starred-block",
                          "bare-block"
                        ],
                        "type": "string"
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": [
                          "separate-lines"
                        ],
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "checkJSDoc": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "additionalItems": false
                  }
                ]
              },
              "messages": {
                "expectedBlock": "Expected a block comment instead of consecutive line comments.",
                "expectedBareBlock": "Expected a block comment without padding stars.",
                "startNewline": "Expected a linebreak after '/*'.",
                "endNewline": "Expected a linebreak before '*/'.",
                "missingStar": "Expected a '*' at the start of this line.",
                "alignment": "Expected this line to be aligned with the start of the comment.",
                "expectedLines": "Expected multiple line comments instead of a block comment."
              }
            }
          },
          "multiline-ternary": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce newlines between operands of ternary expressions",
                "url": "https://eslint.style/rules/js/multiline-ternary"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "always-multiline",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "ignoreJSX": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ],
              "messages": {
                "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
                "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
                "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
                "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression."
              },
              "fixable": "whitespace"
            }
          },
          "new-parens": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
                "url": "https://eslint.style/rules/js/new-parens"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "missing": "Missing '()' invoking a constructor.",
                "unnecessary": "Unnecessary '()' invoking a constructor with no arguments."
              }
            }
          },
          "newline-per-chained-call": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require a newline after each call in a method chain",
                "url": "https://eslint.style/rules/js/newline-per-chained-call"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreChainWithDepth": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 10,
                      "default": 2
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expected": "Expected line break before `{{callee}}`."
              }
            }
          },
          "no-confusing-arrow": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow arrow functions where they could be confused with comparisons",
                "url": "https://eslint.style/rules/js/no-confusing-arrow"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowParens": {
                      "type": "boolean",
                      "default": true
                    },
                    "onlyOneSimpleParam": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "confusing": "Arrow function used ambiguously with a conditional expression."
              }
            }
          },
          "no-extra-parens": {
            "defaultOptions": [
              "all"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow unnecessary parentheses",
                "url": "https://eslint.style/rules/ts/no-extra-parens"
              },
              "fixable": "code",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "functions"
                        ]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "all"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "conditionalAssign": {
                            "type": "boolean"
                          },
                          "ternaryOperandBinaryExpressions": {
                            "type": "boolean"
                          },
                          "nestedBinaryExpressions": {
                            "type": "boolean"
                          },
                          "returnAssign": {
                            "type": "boolean"
                          },
                          "ignoreJSX": {
                            "type": "string",
                            "enum": [
                              "none",
                              "all",
                              "single-line",
                              "multi-line"
                            ]
                          },
                          "enforceForArrowConditionals": {
                            "type": "boolean"
                          },
                          "enforceForSequenceExpressions": {
                            "type": "boolean"
                          },
                          "enforceForNewInMemberExpressions": {
                            "type": "boolean"
                          },
                          "enforceForFunctionPrototypeMethods": {
                            "type": "boolean"
                          },
                          "allowParensAfterCommentPattern": {
                            "type": "string"
                          },
                          "nestedConditionalExpressions": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "unexpected": "Unnecessary parentheses around expression."
              }
            }
          },
          "no-extra-semi": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow unnecessary semicolons",
                "url": "https://eslint.style/rules/ts/no-extra-semi"
              },
              "fixable": "code",
              "schema": [],
              "messages": {
                "unexpected": "Unnecessary semicolon."
              }
            }
          },
          "no-floating-decimal": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow leading or trailing decimal points in numeric literals",
                "url": "https://eslint.style/rules/js/no-floating-decimal"
              },
              "schema": [],
              "fixable": "code",
              "messages": {
                "leading": "A leading decimal point can be confused with a dot.",
                "trailing": "A trailing decimal point can be confused with a dot."
              }
            }
          },
          "no-mixed-operators": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow mixed binary operators",
                "url": "https://eslint.style/rules/js/no-mixed-operators"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "+",
                            "-",
                            "*",
                            "/",
                            "%",
                            "**",
                            "&",
                            "|",
                            "^",
                            "~",
                            "<<",
                            ">>",
                            ">>>",
                            "==",
                            "!=",
                            "===",
                            "!==",
                            ">",
                            ">=",
                            "<",
                            "<=",
                            "&&",
                            "||",
                            "in",
                            "instanceof",
                            "?:",
                            "??"
                          ]
                        },
                        "minItems": 2,
                        "uniqueItems": true
                      },
                      "uniqueItems": true
                    },
                    "allowSamePrecedence": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedMixedOperator": "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations."
              }
            }
          },
          "no-mixed-spaces-and-tabs": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow mixed spaces and tabs for indentation",
                "url": "https://eslint.style/rules/js/no-mixed-spaces-and-tabs"
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "smart-tabs"
                      ]
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              ],
              "messages": {
                "mixedSpacesAndTabs": "Mixed spaces and tabs."
              }
            }
          },
          "no-multi-spaces": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow multiple spaces",
                "url": "https://eslint.style/rules/js/no-multi-spaces"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "object",
                      "patternProperties": {
                        "^([A-Z][a-z]*)+$": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "ignoreEOLComments": {
                      "type": "boolean",
                      "default": false
                    },
                    "includeTabs": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "multipleSpaces": "Multiple spaces found before '{{displayValue}}'."
              }
            }
          },
          "no-multiple-empty-lines": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow multiple empty lines",
                "url": "https://eslint.style/rules/js/no-multiple-empty-lines"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "maxEOF": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "maxBOF": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "max"
                  ],
                  "additionalProperties": false
                }
              ],
              "messages": {
                "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed."
              }
            }
          },
          "no-tabs": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow all tabs",
                "url": "https://eslint.style/rules/js/no-tabs"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowIndentationTabs": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedTab": "Unexpected tab character."
              }
            }
          },
          "no-trailing-spaces": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow trailing whitespace at the end of lines",
                "url": "https://eslint.style/rules/js/no-trailing-spaces"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "skipBlankLines": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignoreComments": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "trailingSpace": "Trailing spaces not allowed."
              }
            }
          },
          "no-whitespace-before-property": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow whitespace before properties",
                "url": "https://eslint.style/rules/js/no-whitespace-before-property"
              },
              "fixable": "whitespace",
              "schema": [],
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace before property {{propName}}."
              }
            }
          },
          "nonblock-statement-body-position": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the location of single-line statements",
                "url": "https://eslint.style/rules/js/nonblock-statement-body-position"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "beside",
                    "below",
                    "any"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "if": "[Circular Reference]",
                        "else": "[Circular Reference]",
                        "while": "[Circular Reference]",
                        "do": "[Circular Reference]",
                        "for": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expectNoLinebreak": "Expected no linebreak before this statement.",
                "expectLinebreak": "Expected a linebreak before this statement."
              }
            }
          },
          "object-curly-newline": {
            "defaultOptions": [
              {
                "ObjectExpression": {
                  "multiline": false,
                  "minProperties": null,
                  "consistent": true
                },
                "ObjectPattern": "[Circular Reference]",
                "ImportDeclaration": "[Circular Reference]",
                "ExportDeclaration": "[Circular Reference]",
                "TSTypeLiteral": "[Circular Reference]",
                "TSInterfaceBody": "[Circular Reference]"
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent line breaks after opening and before closing braces",
                "url": "https://eslint.style/rules/ts/object-curly-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "multiline": {
                              "type": "boolean"
                            },
                            "minProperties": {
                              "type": "integer",
                              "minimum": 0
                            },
                            "consistent": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false,
                          "minProperties": 1
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "ObjectExpression": "[Circular Reference]",
                        "ObjectPattern": "[Circular Reference]",
                        "ImportDeclaration": "[Circular Reference]",
                        "ExportDeclaration": "[Circular Reference]",
                        "TSTypeLiteral": "[Circular Reference]",
                        "TSInterfaceBody": "[Circular Reference]"
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
              }
            }
          },
          "object-curly-spacing": {
            "defaultOptions": [
              "never"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside braces",
                "url": "https://eslint.style/rules/ts/object-curly-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean"
                    },
                    "objectsInObjects": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
              }
            }
          },
          "object-property-newline": {
            "defaultOptions": [
              {
                "allowAllPropertiesOnSameLine": false,
                "allowMultiplePropertiesPerLine": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce placing object properties on separate lines",
                "url": "https://eslint.style/rules/ts/object-property-newline"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowAllPropertiesOnSameLine": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowMultiplePropertiesPerLine": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                "propertiesOnNewline": "Object properties must go on a new line."
              }
            }
          },
          "one-var-declaration-per-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow newlines around variable declarations",
                "url": "https://eslint.style/rules/js/one-var-declaration-per-line"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "initializations"
                  ]
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "expectVarOnNewline": "Expected variable declaration to be on a new line."
              }
            }
          },
          "operator-linebreak": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreak style for operators",
                "url": "https://eslint.style/rules/js/operator-linebreak"
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "after",
                        "before",
                        "none"
                      ]
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "overrides": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string",
                        "enum": [
                          "after",
                          "before",
                          "none",
                          "ignore"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "code",
              "messages": {
                "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
                "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
                "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
                "noLinebreak": "There should be no line break before or after '{{operator}}'."
              }
            }
          },
          "padded-blocks": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow padding within blocks",
                "url": "https://eslint.style/rules/js/padded-blocks"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "start",
                        "end"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "blocks": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        },
                        "switches": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        },
                        "classes": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "allowSingleLineBlocks": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "missingPadBlock": "Block must be padded by blank lines.",
                "extraPadBlock": "Block must not be padded by blank lines."
              }
            }
          },
          "padding-line-between-statements": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow padding lines between statements",
                "url": "https://eslint.style/rules/ts/padding-line-between-statements"
              },
              "fixable": "whitespace",
              "hasSuggestions": false,
              "schema": {
                "$defs": {
                  "paddingType": {
                    "type": "string",
                    "enum": [
                      "any",
                      "never",
                      "always"
                    ]
                  },
                  "statementType": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "*",
                          "block-like",
                          "exports",
                          "require",
                          "directive",
                          "expression",
                          "iife",
                          "multiline-block-like",
                          "multiline-expression",
                          "multiline-const",
                          "multiline-export",
                          "multiline-let",
                          "multiline-var",
                          "singleline-const",
                          "singleline-export",
                          "singleline-let",
                          "singleline-var",
                          "block",
                          "empty",
                          "function",
                          "ts-method",
                          "break",
                          "case",
                          "class",
                          "const",
                          "continue",
                          "debugger",
                          "default",
                          "do",
                          "export",
                          "for",
                          "if",
                          "import",
                          "let",
                          "return",
                          "switch",
                          "throw",
                          "try",
                          "var",
                          "while",
                          "with",
                          "cjs-export",
                          "cjs-import",
                          "enum",
                          "interface",
                          "type",
                          "function-overload"
                        ]
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "*",
                            "block-like",
                            "exports",
                            "require",
                            "directive",
                            "expression",
                            "iife",
                            "multiline-block-like",
                            "multiline-expression",
                            "multiline-const",
                            "multiline-export",
                            "multiline-let",
                            "multiline-var",
                            "singleline-const",
                            "singleline-export",
                            "singleline-let",
                            "singleline-var",
                            "block",
                            "empty",
                            "function",
                            "ts-method",
                            "break",
                            "case",
                            "class",
                            "const",
                            "continue",
                            "debugger",
                            "default",
                            "do",
                            "export",
                            "for",
                            "if",
                            "import",
                            "let",
                            "return",
                            "switch",
                            "throw",
                            "try",
                            "var",
                            "while",
                            "with",
                            "cjs-export",
                            "cjs-import",
                            "enum",
                            "interface",
                            "type",
                            "function-overload"
                          ]
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "additionalItems": false
                      }
                    ]
                  }
                },
                "type": "array",
                "additionalItems": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "blankLine": {
                      "$ref": "#/$defs/paddingType"
                    },
                    "prev": {
                      "$ref": "#/$defs/statementType"
                    },
                    "next": {
                      "$ref": "#/$defs/statementType"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "blankLine",
                    "prev",
                    "next"
                  ]
                }
              },
              "messages": {
                "unexpectedBlankLine": "Unexpected blank line before this statement.",
                "expectedBlankLine": "Expected blank line before this statement."
              }
            }
          },
          "quote-props": {
            "defaultOptions": [
              "always"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require quotes around object literal, type literal, interfaces and enums property names",
                "url": "https://eslint.style/rules/ts/quote-props"
              },
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed"
                        ]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "keywords": {
                            "type": "boolean"
                          },
                          "unnecessary": {
                            "type": "boolean"
                          },
                          "numbers": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "fixable": "code",
              "messages": {
                "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant."
              }
            }
          },
          "quotes": {
            "defaultOptions": [
              "double",
              {
                "allowTemplateLiterals": "never",
                "avoidEscape": false,
                "ignoreStringLiterals": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the consistent use of either backticks, double, or single quotes",
                "url": "https://eslint.style/rules/ts/quotes"
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}."
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "single",
                    "double",
                    "backtick"
                  ]
                },
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "avoid-escape"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "avoidEscape": {
                          "type": "boolean"
                        },
                        "allowTemplateLiterals": {
                          "anyOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "never",
                                "avoidEscape",
                                "always"
                              ]
                            }
                          ]
                        },
                        "ignoreStringLiterals": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "rest-spread-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce spacing between rest and spread operators and their expressions",
                "url": "https://eslint.style/rules/js/rest-spread-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace after {{type}} operator.",
                "expectedWhitespace": "Expected whitespace after {{type}} operator."
              }
            }
          },
          "semi": {
            "defaultOptions": [
              "always",
              {
                "omitLastInOneLineBlock": false,
                "beforeStatementContinuationChars": "any"
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow semicolons instead of ASI",
                "url": "https://eslint.style/rules/ts/semi"
              },
              "fixable": "code",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "never"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "beforeStatementContinuationChars": {
                            "type": "string",
                            "enum": [
                              "always",
                              "any",
                              "never"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "omitLastInOneLineBlock": {
                            "type": "boolean"
                          },
                          "omitLastInOneLineClassBody": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "missingSemi": "Missing semicolon.",
                "extraSemi": "Extra semicolon."
              }
            }
          },
          "semi-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after semicolons",
                "url": "https://eslint.style/rules/ts/semi-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedWhitespaceBefore": "Unexpected whitespace before semicolon.",
                "unexpectedWhitespaceAfter": "Unexpected whitespace after semicolon.",
                "missingWhitespaceBefore": "Missing whitespace before semicolon.",
                "missingWhitespaceAfter": "Missing whitespace after semicolon."
              }
            }
          },
          "semi-style": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce location of semicolons",
                "url": "https://eslint.style/rules/js/semi-style"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "last",
                    "first"
                  ]
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "expectedSemiColon": "Expected this semicolon to be at {{pos}}."
              }
            }
          },
          "space-before-blocks": {
            "defaultOptions": [
              "always"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before blocks",
                "url": "https://eslint.style/rules/ts/space-before-blocks"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "keywords": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "off"
                          ]
                        },
                        "functions": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "off"
                          ]
                        },
                        "classes": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "off"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedSpace": "Unexpected space before opening brace.",
                "missingSpace": "Missing space before opening brace."
              }
            }
          },
          "space-before-function-paren": {
            "defaultOptions": [
              "always"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before function parenthesis",
                "url": "https://eslint.style/rules/ts/space-before-function-paren"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "anonymous": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "ignore"
                          ]
                        },
                        "named": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "ignore"
                          ]
                        },
                        "asyncArrow": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "ignore"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedSpace": "Unexpected space before function parentheses.",
                "missingSpace": "Missing space before function parentheses."
              }
            }
          },
          "space-in-parens": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside parentheses",
                "url": "https://eslint.style/rules/js/space-in-parens"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "{}",
                          "[]",
                          "()",
                          "empty"
                        ]
                      },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "missingOpeningSpace": "There must be a space after this paren.",
                "missingClosingSpace": "There must be a space before this paren.",
                "rejectedOpeningSpace": "There should be no space after this paren.",
                "rejectedClosingSpace": "There should be no space before this paren."
              }
            }
          },
          "space-infix-ops": {
            "defaultOptions": [
              {
                "int32Hint": false,
                "ignoreTypes": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require spacing around infix operators",
                "url": "https://eslint.style/rules/ts/space-infix-ops"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "int32Hint": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignoreTypes": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "missingSpace": "Operator '{{operator}}' must be spaced."
              }
            }
          },
          "space-unary-ops": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before or after unary operators",
                "url": "https://eslint.style/rules/js/space-unary-ops"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "words": {
                      "type": "boolean",
                      "default": true
                    },
                    "nonwords": {
                      "type": "boolean",
                      "default": false
                    },
                    "overrides": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
                "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
                "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'."
              }
            }
          },
          "spaced-comment": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
                "url": "https://eslint.style/rules/js/spaced-comment"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "markers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "line": {
                      "type": "object",
                      "properties": {
                        "exceptions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "markers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "block": {
                      "type": "object",
                      "properties": {
                        "exceptions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "markers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "balanced": {
                          "type": "boolean",
                          "default": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedSpaceAfterMarker": "Unexpected space or tab after marker ({{refChar}}) in comment.",
                "expectedExceptionAfter": "Expected exception block, space or tab after '{{refChar}}' in comment.",
                "unexpectedSpaceBefore": "Unexpected space or tab before '*/' in comment.",
                "unexpectedSpaceAfter": "Unexpected space or tab after '{{refChar}}' in comment.",
                "expectedSpaceBefore": "Expected space or tab before '*/' in comment.",
                "expectedSpaceAfter": "Expected space or tab after '{{refChar}}' in comment."
              }
            }
          },
          "switch-colon-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce spacing around colons of switch statements",
                "url": "https://eslint.style/rules/js/switch-colon-spacing"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "expectedBefore": "Expected space(s) before this colon.",
                "expectedAfter": "Expected space(s) after this colon.",
                "unexpectedBefore": "Unexpected space(s) before this colon.",
                "unexpectedAfter": "Unexpected space(s) after this colon."
              }
            }
          },
          "template-curly-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing around embedded expressions of template strings",
                "url": "https://eslint.style/rules/js/template-curly-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "expectedBefore": "Expected space(s) before '}'.",
                "expectedAfter": "Expected space(s) after '${'.",
                "unexpectedBefore": "Unexpected space(s) before '}'.",
                "unexpectedAfter": "Unexpected space(s) after '${'."
              }
            }
          },
          "template-tag-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing between template tags and their literals",
                "url": "https://eslint.style/rules/js/template-tag-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "unexpected": "Unexpected space between template tag and template literal.",
                "missing": "Missing space between template tag and template literal."
              }
            }
          },
          "type-annotation-spacing": {
            "defaultOptions": [
              {}
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require consistent spacing around type annotations",
                "url": "https://eslint.style/rules/ts/type-annotation-spacing"
              },
              "fixable": "whitespace",
              "messages": {
                "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
                "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
                "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
                "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
                "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'."
              },
              "schema": [
                {
                  "$defs": {
                    "spacingConfig": {
                      "type": "object",
                      "properties": {
                        "before": {
                          "type": "boolean"
                        },
                        "after": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    },
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "colon": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "arrow": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "variable": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "parameter": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "property": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "returnType": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "type-generic-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforces consistent spacing inside TypeScript type generics",
                "url": "https://eslint.style/rules/plus/type-generic-spacing"
              },
              "fixable": "whitespace",
              "schema": [],
              "messages": {
                "genericSpacingMismatch": "Generic spaces mismatch"
              }
            }
          },
          "type-named-tuple-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Expect space before the type declaration in the named tuple",
                "url": "https://eslint.style/rules/plus/type-named-tuple-spacing"
              },
              "fixable": "whitespace",
              "schema": [],
              "messages": {
                "expectedSpaceAfter": "Expected a space after the ':'.",
                "unexpectedSpaceBetween": "Unexpected space between '?' and the ':'.",
                "unexpectedSpaceBefore": "Unexpected space before the ':'."
              }
            }
          },
          "wrap-iife": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require parentheses around immediate `function` invocations",
                "url": "https://eslint.style/rules/js/wrap-iife"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "outside",
                    "inside",
                    "any"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "functionPrototypeMethods": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "code",
              "messages": {
                "wrapInvocation": "Wrap an immediate function invocation in parentheses.",
                "wrapExpression": "Wrap only the function expression in parens.",
                "moveInvocation": "Move the invocation into the parens that contain the function."
              }
            }
          },
          "wrap-regex": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require parenthesis around regex literals",
                "url": "https://eslint.style/rules/js/wrap-regex"
              },
              "schema": [],
              "fixable": "code",
              "messages": {
                "requireParens": "Wrap the regexp literal in parens to disambiguate the slash."
              }
            }
          },
          "yield-star-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing around the `*` in `yield*` expressions",
                "url": "https://eslint.style/rules/js/yield-star-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "before",
                        "after",
                        "both",
                        "neither"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "before": {
                          "type": "boolean"
                        },
                        "after": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "missingBefore": "Missing space before *.",
                "missingAfter": "Missing space after *.",
                "unexpectedBefore": "Unexpected space before *.",
                "unexpectedAfter": "Unexpected space after *."
              }
            }
          }
        },
        "configs": {
          "disable-legacy": {
            "rules": {
              "array-bracket-newline": 0,
              "array-bracket-spacing": 0,
              "array-element-newline": 0,
              "arrow-parens": 0,
              "arrow-spacing": 0,
              "block-spacing": 0,
              "brace-style": 0,
              "comma-dangle": 0,
              "comma-spacing": 0,
              "comma-style": 0,
              "computed-property-spacing": 0,
              "dot-location": 0,
              "eol-last": 0,
              "func-call-spacing": 0,
              "function-call-argument-newline": 0,
              "function-paren-newline": 0,
              "generator-star-spacing": 0,
              "implicit-arrow-linebreak": 0,
              "indent": 0,
              "jsx-quotes": 0,
              "key-spacing": 0,
              "keyword-spacing": 0,
              "linebreak-style": 0,
              "lines-around-comment": 0,
              "lines-between-class-members": 0,
              "max-len": 0,
              "max-statements-per-line": 0,
              "multiline-ternary": 0,
              "new-parens": 0,
              "newline-per-chained-call": 0,
              "no-confusing-arrow": 0,
              "no-extra-parens": 0,
              "no-extra-semi": 0,
              "no-floating-decimal": 0,
              "no-mixed-operators": 0,
              "no-mixed-spaces-and-tabs": 0,
              "no-multi-spaces": 0,
              "no-multiple-empty-lines": 0,
              "no-tabs": 0,
              "no-trailing-spaces": 0,
              "no-whitespace-before-property": 0,
              "nonblock-statement-body-position": 0,
              "object-curly-newline": 0,
              "object-curly-spacing": 0,
              "object-property-newline": 0,
              "one-var-declaration-per-line": 0,
              "operator-linebreak": 0,
              "padded-blocks": 0,
              "padding-line-between-statements": 0,
              "quote-props": 0,
              "quotes": 0,
              "rest-spread-spacing": 0,
              "semi": 0,
              "semi-spacing": 0,
              "semi-style": 0,
              "space-before-blocks": 0,
              "space-before-function-paren": 0,
              "space-in-parens": 0,
              "space-infix-ops": 0,
              "space-unary-ops": 0,
              "spaced-comment": 0,
              "switch-colon-spacing": 0,
              "template-curly-spacing": 0,
              "template-tag-spacing": 0,
              "wrap-iife": 0,
              "wrap-regex": 0,
              "yield-star-spacing": 0,
              "@typescript-eslint/block-spacing": 0,
              "@typescript-eslint/brace-style": 0,
              "@typescript-eslint/comma-dangle": 0,
              "@typescript-eslint/comma-spacing": 0,
              "@typescript-eslint/func-call-spacing": 0,
              "@typescript-eslint/indent": 0,
              "@typescript-eslint/key-spacing": 0,
              "@typescript-eslint/keyword-spacing": 0,
              "@typescript-eslint/lines-around-comment": 0,
              "@typescript-eslint/lines-between-class-members": 0,
              "@typescript-eslint/member-delimiter-style": 0,
              "@typescript-eslint/no-extra-parens": 0,
              "@typescript-eslint/no-extra-semi": 0,
              "@typescript-eslint/object-curly-spacing": 0,
              "@typescript-eslint/padding-line-between-statements": 0,
              "@typescript-eslint/quotes": 0,
              "@typescript-eslint/semi": 0,
              "@typescript-eslint/space-before-blocks": 0,
              "@typescript-eslint/space-before-function-paren": 0,
              "@typescript-eslint/space-infix-ops": 0,
              "@typescript-eslint/type-annotation-spacing": 0,
              "react/jsx-child-element-spacing": 0,
              "react/jsx-closing-bracket-location": 0,
              "react/jsx-closing-tag-location": 0,
              "react/jsx-curly-brace-presence": 0,
              "react/jsx-curly-newline": 0,
              "react/jsx-curly-spacing": 0,
              "react/jsx-equals-spacing": 0,
              "react/jsx-first-prop-new-line": 0,
              "react/jsx-indent": 0,
              "react/jsx-indent-props": 0,
              "react/jsx-max-props-per-line": 0,
              "react/jsx-newline": 0,
              "react/jsx-one-expression-per-line": 0,
              "react/jsx-props-no-multi-spaces": 0,
              "react/jsx-self-closing-comp": 0,
              "react/jsx-sort-props": 0,
              "react/jsx-tag-spacing": 0,
              "react/jsx-wrap-multilines": 0
            }
          },
          "recommended": {
            "plugins": {
              "@stylistic": "[Circular Reference]"
            },
            "rules": {
              "@stylistic/array-bracket-spacing": [
                "error",
                "never"
              ],
              "@stylistic/arrow-parens": [
                "error",
                "as-needed",
                {
                  "requireForBlockBody": true
                }
              ],
              "@stylistic/arrow-spacing": [
                "error",
                {
                  "after": true,
                  "before": true
                }
              ],
              "@stylistic/block-spacing": [
                "error",
                "always"
              ],
              "@stylistic/brace-style": [
                "error",
                "stroustrup",
                {
                  "allowSingleLine": true
                }
              ],
              "@stylistic/comma-dangle": [
                "error",
                "always-multiline"
              ],
              "@stylistic/comma-spacing": [
                "error",
                {
                  "after": true,
                  "before": false
                }
              ],
              "@stylistic/comma-style": [
                "error",
                "last"
              ],
              "@stylistic/computed-property-spacing": [
                "error",
                "never",
                {
                  "enforceForClassMembers": true
                }
              ],
              "@stylistic/dot-location": [
                "error",
                "property"
              ],
              "@stylistic/eol-last": "error",
              "@stylistic/generator-star-spacing": [
                "error",
                {
                  "after": true,
                  "before": false
                }
              ],
              "@stylistic/indent": [
                "error",
                2,
                {
                  "ArrayExpression": 1,
                  "CallExpression": {
                    "arguments": 1
                  },
                  "flatTernaryExpressions": false,
                  "FunctionDeclaration": {
                    "body": 1,
                    "parameters": 1
                  },
                  "FunctionExpression": {
                    "body": 1,
                    "parameters": 1
                  },
                  "ignoreComments": false,
                  "ignoredNodes": [
                    "TSUnionType",
                    "TSIntersectionType",
                    "TSTypeParameterInstantiation",
                    "FunctionExpression > .params[decorators.length > 0]",
                    "FunctionExpression > .params > :matches(Decorator, :not(:first-child))"
                  ],
                  "ImportDeclaration": 1,
                  "MemberExpression": 1,
                  "ObjectExpression": 1,
                  "offsetTernaryExpressions": true,
                  "outerIIFEBody": 1,
                  "SwitchCase": 1,
                  "tabLength": 2,
                  "VariableDeclarator": 1
                }
              ],
              "@stylistic/indent-binary-ops": [
                "error",
                2
              ],
              "@stylistic/key-spacing": [
                "error",
                {
                  "afterColon": true,
                  "beforeColon": false
                }
              ],
              "@stylistic/keyword-spacing": [
                "error",
                {
                  "after": true,
                  "before": true
                }
              ],
              "@stylistic/lines-between-class-members": [
                "error",
                "always",
                {
                  "exceptAfterSingleLine": true
                }
              ],
              "@stylistic/max-statements-per-line": [
                "error",
                {
                  "max": 1
                }
              ],
              "@stylistic/member-delimiter-style": [
                "error",
                {
                  "multiline": {
                    "delimiter": "none",
                    "requireLast": false
                  },
                  "multilineDetection": "brackets",
                  "overrides": {
                    "interface": {
                      "multiline": {
                        "delimiter": "none",
                        "requireLast": false
                      }
                    }
                  },
                  "singleline": {
                    "delimiter": "comma"
                  }
                }
              ],
              "@stylistic/multiline-ternary": [
                "error",
                "always-multiline"
              ],
              "@stylistic/new-parens": "error",
              "@stylistic/no-extra-parens": [
                "error",
                "functions"
              ],
              "@stylistic/no-floating-decimal": "error",
              "@stylistic/no-mixed-operators": [
                "error",
                {
                  "allowSamePrecedence": true,
                  "groups": [
                    [
                      "==",
                      "!=",
                      "===",
                      "!==",
                      ">",
                      ">=",
                      "<",
                      "<="
                    ],
                    [
                      "&&",
                      "||"
                    ],
                    [
                      "in",
                      "instanceof"
                    ]
                  ]
                }
              ],
              "@stylistic/no-mixed-spaces-and-tabs": "error",
              "@stylistic/no-multi-spaces": "error",
              "@stylistic/no-multiple-empty-lines": [
                "error",
                {
                  "max": 1,
                  "maxBOF": 0,
                  "maxEOF": 0
                }
              ],
              "@stylistic/no-tabs": "error",
              "@stylistic/no-trailing-spaces": "error",
              "@stylistic/no-whitespace-before-property": "error",
              "@stylistic/object-curly-spacing": [
                "error",
                "always"
              ],
              "@stylistic/operator-linebreak": [
                "error",
                "before"
              ],
              "@stylistic/padded-blocks": [
                "error",
                {
                  "blocks": "never",
                  "classes": "never",
                  "switches": "never"
                }
              ],
              "@stylistic/quote-props": [
                "error",
                "consistent-as-needed"
              ],
              "@stylistic/quotes": [
                "error",
                "single",
                {
                  "allowTemplateLiterals": true,
                  "avoidEscape": false
                }
              ],
              "@stylistic/rest-spread-spacing": [
                "error",
                "never"
              ],
              "@stylistic/semi": [
                "error",
                "never"
              ],
              "@stylistic/semi-spacing": [
                "error",
                {
                  "after": true,
                  "before": false
                }
              ],
              "@stylistic/space-before-blocks": [
                "error",
                "always"
              ],
              "@stylistic/space-before-function-paren": [
                "error",
                {
                  "anonymous": "always",
                  "asyncArrow": "always",
                  "named": "never"
                }
              ],
              "@stylistic/space-in-parens": [
                "error",
                "never"
              ],
              "@stylistic/space-infix-ops": "error",
              "@stylistic/space-unary-ops": [
                "error",
                {
                  "nonwords": false,
                  "words": true
                }
              ],
              "@stylistic/spaced-comment": [
                "error",
                "always",
                {
                  "block": {
                    "balanced": true,
                    "exceptions": [
                      "*"
                    ],
                    "markers": [
                      "!"
                    ]
                  },
                  "line": {
                    "exceptions": [
                      "/",
                      "#"
                    ],
                    "markers": [
                      "/"
                    ]
                  }
                }
              ],
              "@stylistic/template-curly-spacing": "error",
              "@stylistic/template-tag-spacing": [
                "error",
                "never"
              ],
              "@stylistic/type-annotation-spacing": [
                "error",
                {}
              ],
              "@stylistic/type-generic-spacing": "error",
              "@stylistic/type-named-tuple-spacing": "error",
              "@stylistic/wrap-iife": [
                "error",
                "any",
                {
                  "functionPrototypeMethods": true
                }
              ],
              "@stylistic/yield-star-spacing": [
                "error",
                {
                  "after": true,
                  "before": false
                }
              ],
              "@stylistic/jsx-closing-bracket-location": "error",
              "@stylistic/jsx-closing-tag-location": "error",
              "@stylistic/jsx-curly-brace-presence": [
                "error",
                {
                  "propElementValues": "always"
                }
              ],
              "@stylistic/jsx-curly-newline": "error",
              "@stylistic/jsx-curly-spacing": [
                "error",
                "never"
              ],
              "@stylistic/jsx-equals-spacing": "error",
              "@stylistic/jsx-first-prop-new-line": "error",
              "@stylistic/jsx-function-call-newline": [
                "error",
                "multiline"
              ],
              "@stylistic/jsx-indent-props": [
                "error",
                2
              ],
              "@stylistic/jsx-max-props-per-line": [
                "error",
                {
                  "maximum": 1,
                  "when": "multiline"
                }
              ],
              "@stylistic/jsx-one-expression-per-line": [
                "error",
                {
                  "allow": "single-child"
                }
              ],
              "@stylistic/jsx-quotes": "error",
              "@stylistic/jsx-tag-spacing": [
                "error",
                {
                  "afterOpening": "never",
                  "beforeClosing": "never",
                  "beforeSelfClosing": "always",
                  "closingSlash": "never"
                }
              ],
              "@stylistic/jsx-wrap-multilines": [
                "error",
                {
                  "arrow": "parens-new-line",
                  "assignment": "parens-new-line",
                  "condition": "parens-new-line",
                  "declaration": "parens-new-line",
                  "logical": "parens-new-line",
                  "prop": "parens-new-line",
                  "propertyValue": "parens-new-line",
                  "return": "parens-new-line"
                }
              ]
            }
          },
          "recommended-flat": "[Circular Reference]",
          "all": {
            "plugins": {
              "@stylistic": "[Circular Reference]"
            },
            "rules": {
              "@stylistic/array-bracket-newline": 2,
              "@stylistic/array-bracket-spacing": 2,
              "@stylistic/array-element-newline": 2,
              "@stylistic/arrow-parens": 2,
              "@stylistic/arrow-spacing": 2,
              "@stylistic/block-spacing": 2,
              "@stylistic/brace-style": 2,
              "@stylistic/comma-dangle": 2,
              "@stylistic/comma-spacing": 2,
              "@stylistic/comma-style": 2,
              "@stylistic/computed-property-spacing": 2,
              "@stylistic/dot-location": 2,
              "@stylistic/eol-last": 2,
              "@stylistic/function-call-argument-newline": 2,
              "@stylistic/function-call-spacing": 2,
              "@stylistic/function-paren-newline": 2,
              "@stylistic/generator-star-spacing": 2,
              "@stylistic/implicit-arrow-linebreak": 2,
              "@stylistic/indent": 2,
              "@stylistic/indent-binary-ops": 2,
              "@stylistic/key-spacing": 2,
              "@stylistic/keyword-spacing": 2,
              "@stylistic/linebreak-style": 2,
              "@stylistic/lines-around-comment": 2,
              "@stylistic/lines-between-class-members": 2,
              "@stylistic/member-delimiter-style": 2,
              "@stylistic/multiline-comment-style": 2,
              "@stylistic/multiline-ternary": 2,
              "@stylistic/new-parens": 2,
              "@stylistic/newline-per-chained-call": 2,
              "@stylistic/no-confusing-arrow": 2,
              "@stylistic/no-extra-parens": 2,
              "@stylistic/no-extra-semi": 2,
              "@stylistic/no-floating-decimal": 2,
              "@stylistic/no-multi-spaces": 2,
              "@stylistic/no-multiple-empty-lines": 2,
              "@stylistic/no-trailing-spaces": 2,
              "@stylistic/no-whitespace-before-property": 2,
              "@stylistic/nonblock-statement-body-position": 2,
              "@stylistic/object-curly-newline": 2,
              "@stylistic/object-curly-spacing": 2,
              "@stylistic/object-property-newline": 2,
              "@stylistic/one-var-declaration-per-line": 2,
              "@stylistic/operator-linebreak": 2,
              "@stylistic/padded-blocks": 2,
              "@stylistic/padding-line-between-statements": 2,
              "@stylistic/quote-props": 2,
              "@stylistic/quotes": 2,
              "@stylistic/rest-spread-spacing": 2,
              "@stylistic/semi": 2,
              "@stylistic/semi-spacing": 2,
              "@stylistic/semi-style": 2,
              "@stylistic/space-before-blocks": 2,
              "@stylistic/space-before-function-paren": 2,
              "@stylistic/space-in-parens": 2,
              "@stylistic/space-infix-ops": 2,
              "@stylistic/space-unary-ops": 2,
              "@stylistic/spaced-comment": 2,
              "@stylistic/switch-colon-spacing": 2,
              "@stylistic/template-curly-spacing": 2,
              "@stylistic/template-tag-spacing": 2,
              "@stylistic/type-annotation-spacing": 2,
              "@stylistic/type-generic-spacing": 2,
              "@stylistic/type-named-tuple-spacing": 2,
              "@stylistic/wrap-iife": 2,
              "@stylistic/wrap-regex": 2,
              "@stylistic/yield-star-spacing": 2
            }
          },
          "all-flat": "[Circular Reference]"
        }
      }
    },
    "rules": {
      "accessor-pairs": "off",
      "array-callback-return": [
        "error",
        {
          "allowImplicit": true
        }
      ],
      "block-scoped-var": "error",
      "complexity": [
        "off",
        20
      ],
      "class-methods-use-this": [
        "off",
        {
          "exceptMethods": []
        }
      ],
      "consistent-return": "error",
      "constructor-super": "error",
      "curly": [
        "error",
        "all"
      ],
      "default-case": [
        "error",
        {
          "commentPattern": "^no default$"
        }
      ],
      "default-case-last": "error",
      "default-param-last": "error",
      "dot-notation": [
        "error",
        {
          "allowKeywords": true
        }
      ],
      "eqeqeq": [
        "error",
        "always",
        {
          "null": "ignore"
        }
      ],
      "grouped-accessor-pairs": "error",
      "guard-for-in": "error",
      "init-declarations": "off",
      "max-classes-per-file": [
        "error",
        1
      ],
      "no-alert": "error",
      "no-caller": "error",
      "no-case-declarations": "error",
      "no-class-assign": "error",
      "no-const-assign": "error",
      "no-constructor-return": "error",
      "no-div-regex": "off",
      "no-dupe-class-members": "error",
      "no-duplicate-imports": "off",
      "no-else-return": [
        "error",
        {
          "allowElseIf": false
        }
      ],
      "no-empty-function": [
        "error",
        {
          "allow": [
            "arrowFunctions",
            "functions",
            "methods"
          ]
        }
      ],
      "no-empty-pattern": "error",
      "no-eq-null": "off",
      "no-eval": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-extra-label": "error",
      "no-fallthrough": "error",
      "no-global-assign": [
        "error",
        {
          "exceptions": []
        }
      ],
      "no-native-reassign": "off",
      "no-implicit-coercion": [
        "off",
        {
          "boolean": false,
          "number": true,
          "string": true,
          "allow": []
        }
      ],
      "no-implicit-globals": "off",
      "no-implied-eval": "error",
      "no-invalid-this": "off",
      "no-iterator": "error",
      "no-labels": [
        "error",
        {
          "allowLoop": false,
          "allowSwitch": false
        }
      ],
      "no-lone-blocks": "error",
      "no-loop-func": "error",
      "no-magic-numbers": [
        "off",
        {
          "ignore": [],
          "ignoreArrayIndexes": true,
          "enforceConst": true,
          "detectObjects": false
        }
      ],
      "no-multi-str": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-wrappers": "error",
      "no-nonoctal-decimal-escape": "error",
      "no-octal": "error",
      "no-octal-escape": "error",
      "no-param-reassign": [
        "error",
        {
          "props": true,
          "ignorePropertyModificationsFor": [
            "acc",
            "accumulator",
            "event",
            "req",
            "request",
            "res",
            "response",
            "staticContext"
          ]
        }
      ],
      "no-proto": "error",
      "no-redeclare": "error",
      "no-restricted-exports": [
        "error",
        {
          "restrictedNamedExports": [
            "default",
            "then"
          ]
        }
      ],
      "no-restricted-globals": [
        "error",
        {
          "name": "addEventListener",
          "message": "'addEventListener' should be written as 'window.addEventListener' or 'document.addEventListener' instead."
        },
        {
          "name": "blur",
          "message": "'blur' should be written as 'window.blur' or 'document.blur' instead."
        },
        {
          "name": "close",
          "message": "'close' should be written as 'window.close' or 'document.close' instead."
        },
        {
          "name": "closed",
          "message": "'closed' should be written as 'window.closed' or 'document.closed' instead."
        },
        {
          "name": "confirm",
          "message": "'confirm' should be written as 'window.confirm' or 'document.confirm' instead."
        },
        {
          "name": "defaultStatus",
          "message": "'defaultStatus' should be written as 'window.defaultStatus' or 'document.defaultStatus' instead."
        },
        {
          "name": "defaultstatus",
          "message": "'defaultstatus' should be written as 'window.defaultstatus' or 'document.defaultstatus' instead."
        },
        {
          "name": "event",
          "message": "'event' should be written as 'window.event' or 'document.event' instead."
        },
        {
          "name": "external",
          "message": "'external' should be written as 'window.external' or 'document.external' instead."
        },
        {
          "name": "find",
          "message": "'find' should be written as 'window.find' or 'document.find' instead."
        },
        {
          "name": "focus",
          "message": "'focus' should be written as 'window.focus' or 'document.focus' instead."
        },
        {
          "name": "frameElement",
          "message": "'frameElement' should be written as 'window.frameElement' or 'document.frameElement' instead."
        },
        {
          "name": "frames",
          "message": "'frames' should be written as 'window.frames' or 'document.frames' instead."
        },
        {
          "name": "history",
          "message": "'history' should be written as 'window.history' or 'document.history' instead."
        },
        {
          "name": "innerHeight",
          "message": "'innerHeight' should be written as 'window.innerHeight' or 'document.innerHeight' instead."
        },
        {
          "name": "innerWidth",
          "message": "'innerWidth' should be written as 'window.innerWidth' or 'document.innerWidth' instead."
        },
        {
          "name": "length",
          "message": "'length' should be written as 'window.length' or 'document.length' instead."
        },
        {
          "name": "location",
          "message": "'location' should be written as 'window.location' or 'document.location' instead."
        },
        {
          "name": "locationbar",
          "message": "'locationbar' should be written as 'window.locationbar' or 'document.locationbar' instead."
        },
        {
          "name": "menubar",
          "message": "'menubar' should be written as 'window.menubar' or 'document.menubar' instead."
        },
        {
          "name": "moveBy",
          "message": "'moveBy' should be written as 'window.moveBy' or 'document.moveBy' instead."
        },
        {
          "name": "moveTo",
          "message": "'moveTo' should be written as 'window.moveTo' or 'document.moveTo' instead."
        },
        {
          "name": "name",
          "message": "'name' should be written as 'window.name' or 'document.name' instead."
        },
        {
          "name": "onblur",
          "message": "'onblur' should be written as 'window.onblur' or 'document.onblur' instead."
        },
        {
          "name": "onerror",
          "message": "'onerror' should be written as 'window.onerror' or 'document.onerror' instead."
        },
        {
          "name": "onfocus",
          "message": "'onfocus' should be written as 'window.onfocus' or 'document.onfocus' instead."
        },
        {
          "name": "onload",
          "message": "'onload' should be written as 'window.onload' or 'document.onload' instead."
        },
        {
          "name": "onresize",
          "message": "'onresize' should be written as 'window.onresize' or 'document.onresize' instead."
        },
        {
          "name": "onunload",
          "message": "'onunload' should be written as 'window.onunload' or 'document.onunload' instead."
        },
        {
          "name": "open",
          "message": "'open' should be written as 'window.open' or 'document.open' instead."
        },
        {
          "name": "opener",
          "message": "'opener' should be written as 'window.opener' or 'document.opener' instead."
        },
        {
          "name": "opera",
          "message": "'opera' should be written as 'window.opera' or 'document.opera' instead."
        },
        {
          "name": "outerHeight",
          "message": "'outerHeight' should be written as 'window.outerHeight' or 'document.outerHeight' instead."
        },
        {
          "name": "outerWidth",
          "message": "'outerWidth' should be written as 'window.outerWidth' or 'document.outerWidth' instead."
        },
        {
          "name": "pageXOffset",
          "message": "'pageXOffset' should be written as 'window.pageXOffset' or 'document.pageXOffset' instead."
        },
        {
          "name": "pageYOffset",
          "message": "'pageYOffset' should be written as 'window.pageYOffset' or 'document.pageYOffset' instead."
        },
        {
          "name": "parent",
          "message": "'parent' should be written as 'window.parent' or 'document.parent' instead."
        },
        {
          "name": "print",
          "message": "'print' should be written as 'window.print' or 'document.print' instead."
        },
        {
          "name": "removeEventListener",
          "message": "'removeEventListener' should be written as 'window.removeEventListener' or 'document.removeEventListener' instead."
        },
        {
          "name": "resizeBy",
          "message": "'resizeBy' should be written as 'window.resizeBy' or 'document.resizeBy' instead."
        },
        {
          "name": "resizeTo",
          "message": "'resizeTo' should be written as 'window.resizeTo' or 'document.resizeTo' instead."
        },
        {
          "name": "screen",
          "message": "'screen' should be written as 'window.screen' or 'document.screen' instead."
        },
        {
          "name": "screenLeft",
          "message": "'screenLeft' should be written as 'window.screenLeft' or 'document.screenLeft' instead."
        },
        {
          "name": "screenTop",
          "message": "'screenTop' should be written as 'window.screenTop' or 'document.screenTop' instead."
        },
        {
          "name": "screenX",
          "message": "'screenX' should be written as 'window.screenX' or 'document.screenX' instead."
        },
        {
          "name": "screenY",
          "message": "'screenY' should be written as 'window.screenY' or 'document.screenY' instead."
        },
        {
          "name": "scroll",
          "message": "'scroll' should be written as 'window.scroll' or 'document.scroll' instead."
        },
        {
          "name": "scrollbars",
          "message": "'scrollbars' should be written as 'window.scrollbars' or 'document.scrollbars' instead."
        },
        {
          "name": "scrollBy",
          "message": "'scrollBy' should be written as 'window.scrollBy' or 'document.scrollBy' instead."
        },
        {
          "name": "scrollTo",
          "message": "'scrollTo' should be written as 'window.scrollTo' or 'document.scrollTo' instead."
        },
        {
          "name": "scrollX",
          "message": "'scrollX' should be written as 'window.scrollX' or 'document.scrollX' instead."
        },
        {
          "name": "scrollY",
          "message": "'scrollY' should be written as 'window.scrollY' or 'document.scrollY' instead."
        },
        {
          "name": "self",
          "message": "'self' should be written as 'window.self' or 'document.self' instead."
        },
        {
          "name": "status",
          "message": "'status' should be written as 'window.status' or 'document.status' instead."
        },
        {
          "name": "statusbar",
          "message": "'statusbar' should be written as 'window.statusbar' or 'document.statusbar' instead."
        },
        {
          "name": "stop",
          "message": "'stop' should be written as 'window.stop' or 'document.stop' instead."
        },
        {
          "name": "toolbar",
          "message": "'toolbar' should be written as 'window.toolbar' or 'document.toolbar' instead."
        },
        {
          "name": "top",
          "message": "'top' should be written as 'window.top' or 'document.top' instead."
        },
        {
          "name": "isFinite",
          "message": "Use Number.isFinite instead..."
        },
        {
          "name": "isNaN",
          "message": "Use Number.isNaN instead..."
        }
      ],
      "no-restricted-imports": [
        "off",
        {
          "paths": [],
          "patterns": []
        }
      ],
      "no-restricted-properties": [
        "error",
        {
          "object": "arguments",
          "property": "callee",
          "message": "arguments.callee is deprecated"
        },
        {
          "object": "global",
          "property": "isFinite",
          "message": "Please use Number.isFinite instead"
        },
        {
          "object": "self",
          "property": "isFinite",
          "message": "Please use Number.isFinite instead"
        },
        {
          "object": "window",
          "property": "isFinite",
          "message": "Please use Number.isFinite instead"
        },
        {
          "object": "global",
          "property": "isNaN",
          "message": "Please use Number.isNaN instead"
        },
        {
          "object": "self",
          "property": "isNaN",
          "message": "Please use Number.isNaN instead"
        },
        {
          "object": "window",
          "property": "isNaN",
          "message": "Please use Number.isNaN instead"
        },
        {
          "property": "__defineGetter__",
          "message": "Please use Object.defineProperty instead."
        },
        {
          "property": "__defineSetter__",
          "message": "Please use Object.defineProperty instead."
        },
        {
          "object": "Math",
          "property": "pow",
          "message": "Use the exponentiation operator (**) instead."
        }
      ],
      "no-return-assign": [
        "error",
        "always"
      ],
      "no-return-await": "error",
      "no-script-url": "error",
      "no-self-assign": [
        "error",
        {
          "props": true
        }
      ],
      "no-self-compare": "error",
      "no-sequences": "error",
      "no-this-before-super": "error",
      "no-throw-literal": "error",
      "no-unmodified-loop-condition": "off",
      "no-unused-expressions": [
        "error",
        {
          "allowShortCircuit": false,
          "allowTernary": false,
          "allowTaggedTemplates": false
        }
      ],
      "no-unused-labels": "error",
      "no-useless-call": "off",
      "no-useless-catch": "error",
      "no-useless-concat": "error",
      "no-useless-computed-key": "error",
      "no-useless-constructor": "error",
      "no-useless-escape": "error",
      "no-useless-return": "error",
      "no-useless-rename": [
        "error",
        {
          "ignoreDestructuring": false,
          "ignoreImport": false,
          "ignoreExport": false
        }
      ],
      "no-var": "error",
      "no-void": "error",
      "no-warning-comments": [
        "off",
        {
          "terms": [
            "todo",
            "fixme"
          ],
          "location": "start"
        }
      ],
      "no-with": "error",
      "no-catch-shadow": "off",
      "no-delete-var": "error",
      "no-label-var": "error",
      "no-shadow": "error",
      "no-shadow-restricted-names": "error",
      "no-undef": "error",
      "no-undef-init": "error",
      "no-undefined": "off",
      "no-unused-vars": [
        "error",
        {
          "args": "after-used",
          "varsIgnorePattern": "^_",
          "argsIgnorePattern": "^_",
          "ignoreRestSiblings": true
        }
      ],
      "no-use-before-define": [
        "error",
        {
          "functions": true,
          "classes": true,
          "variables": true
        }
      ],
      "object-shorthand": [
        "error",
        "always",
        {
          "ignoreConstructors": false,
          "avoidQuotes": true
        }
      ],
      "prefer-arrow-callback": [
        "error",
        {
          "allowNamedFunctions": false,
          "allowUnboundThis": true
        }
      ],
      "prefer-const": [
        "error",
        {
          "destructuring": "any",
          "ignoreReadBeforeAssign": true
        }
      ],
      "prefer-destructuring": [
        "error",
        {
          "VariableDeclarator": {
            "array": false,
            "object": true
          },
          "AssignmentExpression": {
            "array": true,
            "object": false
          }
        },
        {
          "enforceForRenamedProperties": false
        }
      ],
      "prefer-named-capture-group": "off",
      "prefer-numeric-literals": "error",
      "prefer-object-has-own": "error",
      "prefer-promise-reject-errors": [
        "error",
        {
          "allowEmptyReject": true
        }
      ],
      "prefer-regex-literals": [
        "error",
        {
          "disallowRedundantWrapping": true
        }
      ],
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "radix": "error",
      "require-await": "off",
      "require-unicode-regexp": "off",
      "require-yield": "error",
      "sort-imports": [
        "off",
        {
          "ignoreCase": false,
          "ignoreDeclarationSort": false,
          "ignoreMemberSort": false,
          "memberSyntaxSortOrder": [
            "none",
            "all",
            "multiple",
            "single"
          ]
        }
      ],
      "strict": [
        "error",
        "never"
      ],
      "symbol-description": "error",
      "vars-on-top": "error",
      "yoda": "error",
      "for-direction": "error",
      "getter-return": [
        "error",
        {
          "allowImplicit": true
        }
      ],
      "no-async-promise-executor": "error",
      "no-await-in-loop": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": [
        "error",
        "always"
      ],
      "no-console": "error",
      "no-constant-binary-expression": "error",
      "no-constant-condition": "error",
      "no-control-regex": "error",
      "no-debugger": "error",
      "no-dupe-args": "error",
      "no-dupe-else-if": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-empty": "error",
      "no-empty-character-class": "error",
      "no-ex-assign": "error",
      "no-extra-boolean-cast": "error",
      "no-func-assign": "error",
      "no-import-assign": "error",
      "no-inner-declarations": "error",
      "no-invalid-regexp": "error",
      "no-irregular-whitespace": "error",
      "no-loss-of-precision": "error",
      "no-misleading-character-class": "error",
      "no-obj-calls": "error",
      "no-promise-executor-return": "error",
      "no-prototype-builtins": "error",
      "no-regex-spaces": "error",
      "no-setter-return": "error",
      "no-sparse-arrays": "error",
      "no-template-curly-in-string": "error",
      "no-unexpected-multiline": "off",
      "no-unreachable": "error",
      "no-unreachable-loop": [
        "error",
        {
          "ignore": []
        }
      ],
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unsafe-optional-chaining": [
        "error",
        {
          "disallowArithmeticOperators": true
        }
      ],
      "no-unused-private-class-members": "error",
      "no-useless-backreference": "error",
      "no-negated-in-lhs": "off",
      "require-atomic-updates": "off",
      "use-isnan": "error",
      "valid-typeof": [
        "error",
        {
          "requireStringLiterals": true
        }
      ],
      "no-empty-static-block": "error",
      "no-useless-assignment": "error",
      "no-object-constructor": "error",
      "no-new-native-nonconstructor": "error",
      "prefer-exponentiation-operator": "error",
      "array-bracket-newline": [
        "error",
        "consistent"
      ],
      "array-element-newline": [
        "error",
        {
          "multiline": true,
          "minItems": 3
        }
      ],
      "array-bracket-spacing": [
        "error",
        "never"
      ],
      "arrow-parens": [
        "error",
        "always"
      ],
      "arrow-spacing": [
        "error",
        {
          "before": true,
          "after": true
        }
      ],
      "block-spacing": [
        "error",
        "always"
      ],
      "brace-style": [
        "error",
        "1tbs",
        {
          "allowSingleLine": true
        }
      ],
      "comma-dangle": [
        "error",
        {
          "arrays": "always-multiline",
          "objects": "always-multiline",
          "imports": "always-multiline",
          "exports": "always-multiline",
          "functions": "always-multiline"
        }
      ],
      "comma-spacing": [
        "error",
        {
          "before": false,
          "after": true
        }
      ],
      "comma-style": [
        "error",
        "last",
        {
          "exceptions": {
            "ArrayExpression": false,
            "ArrayPattern": false,
            "ArrowFunctionExpression": false,
            "CallExpression": false,
            "FunctionDeclaration": false,
            "FunctionExpression": false,
            "ImportDeclaration": false,
            "ObjectExpression": false,
            "ObjectPattern": false,
            "VariableDeclaration": false,
            "NewExpression": false
          }
        }
      ],
      "computed-property-spacing": [
        "error",
        "never"
      ],
      "dot-location": [
        "error",
        "property"
      ],
      "eol-last": [
        "error",
        "always"
      ],
      "function-call-argument-newline": [
        "error",
        "consistent"
      ],
      "func-call-spacing": [
        "error",
        "never"
      ],
      "function-paren-newline": [
        "error",
        "multiline-arguments"
      ],
      "generator-star-spacing": [
        "error",
        {
          "before": false,
          "after": true
        }
      ],
      "implicit-arrow-linebreak": [
        "error",
        "beside"
      ],
      "indent": [
        "error",
        2,
        {
          "SwitchCase": 1,
          "VariableDeclarator": 1,
          "outerIIFEBody": 1,
          "FunctionDeclaration": {
            "parameters": 1,
            "body": 1
          },
          "FunctionExpression": {
            "parameters": 1,
            "body": 1
          },
          "CallExpression": {
            "arguments": 1
          },
          "ArrayExpression": 1,
          "ObjectExpression": 1,
          "ImportDeclaration": 1,
          "flatTernaryExpressions": false,
          "ignoredNodes": [
            "JSXElement",
            "JSXElement > *",
            "JSXAttribute",
            "JSXIdentifier",
            "JSXNamespacedName",
            "JSXMemberExpression",
            "JSXSpreadAttribute",
            "JSXExpressionContainer",
            "JSXOpeningElement",
            "JSXClosingElement",
            "JSXFragment",
            "JSXOpeningFragment",
            "JSXClosingFragment",
            "JSXText",
            "JSXEmptyExpression",
            "JSXSpreadChild"
          ],
          "ignoreComments": false
        }
      ],
      "jsx-quotes": [
        "off",
        "prefer-double"
      ],
      "key-spacing": [
        "error",
        {
          "beforeColon": false,
          "afterColon": true
        }
      ],
      "keyword-spacing": [
        "error",
        {
          "before": true,
          "after": true,
          "overrides": {
            "return": {
              "after": true
            },
            "throw": {
              "after": true
            },
            "case": {
              "after": true
            }
          }
        }
      ],
      "line-comment-position": [
        "off",
        {
          "position": "above",
          "ignorePattern": "",
          "applyDefaultPatterns": true
        }
      ],
      "linebreak-style": [
        "error",
        "unix"
      ],
      "lines-between-class-members": [
        "error",
        "always",
        {
          "exceptAfterSingleLine": false
        }
      ],
      "lines-around-comment": "off",
      "lines-around-directive": [
        "error",
        {
          "before": "always",
          "after": "always"
        }
      ],
      "max-len": "off",
      "max-statements-per-line": [
        "off",
        {
          "max": 1
        }
      ],
      "multiline-comment-style": [
        "off",
        "starred-block"
      ],
      "multiline-ternary": [
        "off",
        "never"
      ],
      "new-parens": "error",
      "newline-after-var": "off",
      "newline-before-return": "off",
      "newline-per-chained-call": [
        "error",
        {
          "ignoreChainWithDepth": 4
        }
      ],
      "no-confusing-arrow": [
        "error",
        {
          "allowParens": true
        }
      ],
      "no-extra-parens": [
        "off",
        "all",
        {
          "conditionalAssign": true,
          "nestedBinaryExpressions": false,
          "returnAssign": false,
          "ignoreJSX": "all",
          "enforceForArrowConditionals": false
        }
      ],
      "no-extra-semi": "error",
      "no-floating-decimal": "error",
      "no-mixed-operators": [
        "error",
        {
          "groups": [
            [
              "%",
              "**"
            ],
            [
              "%",
              "+"
            ],
            [
              "%",
              "-"
            ],
            [
              "%",
              "*"
            ],
            [
              "%",
              "/"
            ],
            [
              "/",
              "*"
            ],
            [
              "&",
              "|",
              "<<",
              ">>",
              ">>>"
            ],
            [
              "==",
              "!=",
              "===",
              "!=="
            ],
            [
              "&&",
              "||"
            ]
          ],
          "allowSamePrecedence": false
        }
      ],
      "no-mixed-spaces-and-tabs": "error",
      "no-multi-spaces": [
        "error",
        {
          "ignoreEOLComments": false
        }
      ],
      "no-multiple-empty-lines": [
        "error",
        {
          "max": 1,
          "maxBOF": 0,
          "maxEOF": 0
        }
      ],
      "no-spaced-func": "error",
      "no-tabs": "error",
      "no-trailing-spaces": [
        "error",
        {
          "skipBlankLines": false,
          "ignoreComments": false
        }
      ],
      "no-whitespace-before-property": "error",
      "nonblock-statement-body-position": [
        "error",
        "beside",
        {
          "overrides": {}
        }
      ],
      "object-curly-newline": [
        "error",
        {
          "ObjectExpression": {
            "minProperties": 4,
            "multiline": true,
            "consistent": true
          },
          "ObjectPattern": {
            "minProperties": 4,
            "multiline": true,
            "consistent": true
          },
          "ImportDeclaration": {
            "minProperties": 4,
            "multiline": true,
            "consistent": true
          },
          "ExportDeclaration": {
            "minProperties": 4,
            "multiline": true,
            "consistent": true
          }
        }
      ],
      "object-curly-spacing": [
        "error",
        "always"
      ],
      "object-property-newline": [
        "error",
        {
          "allowAllPropertiesOnSameLine": true
        }
      ],
      "one-var-declaration-per-line": [
        "error",
        "always"
      ],
      "operator-linebreak": [
        "error",
        "before",
        {
          "overrides": {
            "=": "none"
          }
        }
      ],
      "padded-blocks": [
        "error",
        {
          "blocks": "never",
          "classes": "never",
          "switches": "never"
        },
        {
          "allowSingleLineBlocks": true
        }
      ],
      "padding-line-between-statements": "off",
      "quote-props": [
        "error",
        "as-needed",
        {
          "keywords": false,
          "unnecessary": true,
          "numbers": false
        }
      ],
      "quotes": [
        "error",
        "single",
        {
          "avoidEscape": true
        }
      ],
      "rest-spread-spacing": [
        "error",
        "never"
      ],
      "semi": [
        "error",
        "always"
      ],
      "semi-spacing": [
        "error",
        {
          "before": false,
          "after": true
        }
      ],
      "semi-style": [
        "error",
        "last"
      ],
      "space-before-blocks": "error",
      "space-before-function-paren": [
        "error",
        {
          "anonymous": "always",
          "named": "never",
          "asyncArrow": "always"
        }
      ],
      "space-in-parens": [
        "error",
        "never"
      ],
      "space-infix-ops": "error",
      "space-unary-ops": [
        "error",
        {
          "words": true,
          "nonwords": false,
          "overrides": {}
        }
      ],
      "spaced-comment": [
        "error",
        "always",
        {
          "line": {
            "exceptions": [
              "-",
              "+"
            ],
            "markers": [
              "=",
              "!",
              "/"
            ]
          },
          "block": {
            "exceptions": [
              "-",
              "+"
            ],
            "markers": [
              "=",
              "!",
              ":",
              "::"
            ],
            "balanced": true
          }
        }
      ],
      "switch-colon-spacing": [
        "error",
        {
          "after": true,
          "before": false
        }
      ],
      "template-curly-spacing": "error",
      "template-tag-spacing": [
        "error",
        "never"
      ],
      "wrap-iife": [
        "error",
        "outside",
        {
          "functionPrototypeMethods": false
        }
      ],
      "wrap-regex": "off",
      "yield-star-spacing": [
        "error",
        "after"
      ],
      "curly-newline": "off",
      "indent-binary-ops": "off",
      "jsx-child-element-spacing": "off",
      "jsx-closing-bracket-location": "off",
      "jsx-closing-tag-location": "off",
      "jsx-curly-brace-presence": "off",
      "jsx-curly-newline": "off",
      "jsx-curly-spacing": "off",
      "jsx-equals-spacing": "off",
      "jsx-first-prop-new-line": "off",
      "jsx-function-call-newline": "off",
      "jsx-indent": "off",
      "jsx-indent-props": "off",
      "jsx-max-props-per-line": "off",
      "jsx-newline": "off",
      "jsx-one-expression-per-line": "off",
      "jsx-pascal-case": "off",
      "jsx-props-no-multi-spaces": "off",
      "jsx-self-closing-comp": "off",
      "jsx-sort-props": "off",
      "jsx-tag-spacing": "off",
      "jsx-wrap-multilines": "off",
      "member-delimiter-style": "off",
      "type-annotation-spacing": "off",
      "type-generic-spacing": "off",
      "type-named-tuple-spacing": "off"
    }
  }
]