[
  {
    "plugins": {
      "testing-library": {
        "meta": {
          "name": "eslint-plugin-testing-library",
          "version": "7.1.1"
        },
        "configs": {
          "dom": {
            "plugins": [
              "testing-library"
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": "userEvent"
                }
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-events": [
                "error",
                {
                  "eventModules": [
                    "fire-event"
                  ]
                }
              ],
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error"
            }
          },
          "angular": {
            "plugins": [
              "testing-library"
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": "userEvent"
                }
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-events": [
                "error",
                {
                  "eventModules": [
                    "fire-event"
                  ]
                }
              ],
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "angular"
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error"
            }
          },
          "react": {
            "plugins": [
              "testing-library"
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": "userEvent"
                }
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-events": [
                "error",
                {
                  "eventModules": [
                    "fire-event"
                  ]
                }
              ],
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "react"
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-manual-cleanup": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-unnecessary-act": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error"
            }
          },
          "vue": {
            "plugins": [
              "testing-library"
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": [
                    "fireEvent",
                    "userEvent"
                  ]
                }
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "vue"
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-manual-cleanup": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error"
            }
          },
          "svelte": {
            "plugins": [
              "testing-library"
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": [
                    "fireEvent",
                    "userEvent"
                  ]
                }
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "svelte"
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-manual-cleanup": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error"
            }
          },
          "marko": {
            "plugins": [
              "testing-library"
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": [
                    "fireEvent",
                    "userEvent"
                  ]
                }
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "marko"
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-unnecessary-act": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error"
            }
          },
          "flat/dom": {
            "plugins": {
              "testing-library": "[Circular Reference]"
            },
            "rules": "[Circular Reference]"
          },
          "flat/angular": {
            "plugins": {
              "testing-library": "[Circular Reference]"
            },
            "rules": "[Circular Reference]"
          },
          "flat/react": {
            "plugins": {
              "testing-library": "[Circular Reference]"
            },
            "rules": "[Circular Reference]"
          },
          "flat/vue": {
            "plugins": {
              "testing-library": "[Circular Reference]"
            },
            "rules": "[Circular Reference]"
          },
          "flat/svelte": {
            "plugins": {
              "testing-library": "[Circular Reference]"
            },
            "rules": "[Circular Reference]"
          },
          "flat/marko": {
            "plugins": {
              "testing-library": "[Circular Reference]"
            },
            "rules": "[Circular Reference]"
          }
        },
        "rules": {
          "await-async-events": {
            "defaultOptions": [
              {
                "eventModule": "userEvent"
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce promises from async event methods are handled",
                "recommendedConfig": {
                  "dom": [
                    "error",
                    {
                      "eventModule": "userEvent"
                    }
                  ],
                  "angular": [
                    "error",
                    {
                      "eventModule": "userEvent"
                    }
                  ],
                  "react": [
                    "error",
                    {
                      "eventModule": "userEvent"
                    }
                  ],
                  "vue": [
                    "error",
                    {
                      "eventModule": [
                        "fireEvent",
                        "userEvent"
                      ]
                    }
                  ],
                  "svelte": [
                    "error",
                    {
                      "eventModule": [
                        "fireEvent",
                        "userEvent"
                      ]
                    }
                  ],
                  "marko": [
                    "error",
                    {
                      "eventModule": [
                        "fireEvent",
                        "userEvent"
                      ]
                    }
                  ]
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/await-async-events.md"
              },
              "messages": {
                "awaitAsyncEvent": "Promise returned from async event method `{{ name }}` must be handled",
                "awaitAsyncEventWrapper": "Promise returned from `{{ name }}` wrapper over async event method must be handled"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "default": {},
                  "additionalProperties": false,
                  "properties": {
                    "eventModule": {
                      "default": "userEvent",
                      "oneOf": [
                        {
                          "enum": [
                            "fireEvent",
                            "userEvent"
                          ],
                          "type": "string"
                        },
                        {
                          "items": {
                            "type": "string",
                            "enum": [
                              "fireEvent",
                              "userEvent"
                            ]
                          },
                          "type": "array"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "await-async-queries": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce promises from async queries to be handled",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/await-async-queries.md"
              },
              "messages": {
                "awaitAsyncQuery": "promise returned from `{{ name }}` query must be handled",
                "asyncQueryWrapper": "promise returned from `{{ name }}` wrapper over async query must be handled"
              },
              "schema": []
            }
          },
          "await-async-utils": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce promises from async utils to be awaited properly",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/await-async-utils.md"
              },
              "messages": {
                "awaitAsyncUtil": "Promise returned from `{{ name }}` must be handled",
                "asyncUtilWrapper": "Promise returned from {{ name }} wrapper over async util must be handled"
              },
              "schema": []
            }
          },
          "consistent-data-testid": {
            "defaultOptions": [
              {
                "testIdPattern": "",
                "testIdAttribute": "data-testid"
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Ensures consistent usage of `data-testid`",
                "recommendedConfig": {
                  "dom": false,
                  "angular": false,
                  "react": false,
                  "vue": false,
                  "svelte": false,
                  "marko": false
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/consistent-data-testid.md"
              },
              "messages": {
                "consistentDataTestId": "`{{attr}}` \"{{value}}\" should match `{{regex}}`",
                "consistentDataTestIdCustomMessage": "`{{message}}`"
              },
              "schema": [
                {
                  "type": "object",
                  "default": {},
                  "additionalProperties": false,
                  "required": [
                    "testIdPattern"
                  ],
                  "properties": {
                    "testIdPattern": {
                      "type": "string"
                    },
                    "testIdAttribute": {
                      "default": "data-testid",
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ]
                    },
                    "customMessage": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "no-await-sync-events": {
            "defaultOptions": [
              {
                "eventModules": [
                  "fire-event"
                ]
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow unnecessary `await` for sync events",
                "recommendedConfig": {
                  "dom": [
                    "error",
                    {
                      "eventModules": "[Circular Reference]"
                    }
                  ],
                  "angular": [
                    "error",
                    {
                      "eventModules": "[Circular Reference]"
                    }
                  ],
                  "react": [
                    "error",
                    {
                      "eventModules": "[Circular Reference]"
                    }
                  ],
                  "vue": false,
                  "svelte": false,
                  "marko": false
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-await-sync-events.md"
              },
              "messages": {
                "noAwaitSyncEvents": "`{{ name }}` is sync and does not need `await` operator"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "eventModules": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "fire-event",
                          "user-event"
                        ]
                      },
                      "minItems": 1,
                      "default": "[Circular Reference]"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-await-sync-queries": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow unnecessary `await` for sync queries",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-await-sync-queries.md"
              },
              "messages": {
                "noAwaitSyncQuery": "`{{ name }}` query is sync so it does not need to be awaited"
              },
              "schema": []
            }
          },
          "no-container": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow the use of `container` methods",
                "recommendedConfig": {
                  "dom": false,
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-container.md"
              },
              "messages": {
                "noContainer": "Avoid using container methods. Prefer using the methods from Testing Library, such as \"getByRole()\""
              },
              "schema": []
            }
          },
          "no-debugging-utils": {
            "defaultOptions": [
              {
                "utilsToCheckFor": {
                  "debug": true,
                  "logTestingPlaygroundURL": true,
                  "prettyDOM": true,
                  "logRoles": true,
                  "logDOM": true,
                  "prettyFormat": true
                }
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow the use of debugging utilities like `debug`",
                "recommendedConfig": {
                  "dom": false,
                  "angular": "warn",
                  "react": "warn",
                  "vue": "warn",
                  "svelte": "warn",
                  "marko": "warn"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-debugging-utils.md"
              },
              "messages": {
                "noDebug": "Unexpected debug statement"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "utilsToCheckFor": {
                      "type": "object",
                      "properties": {
                        "prettyFormat": {
                          "type": "boolean"
                        },
                        "logDOM": {
                          "type": "boolean"
                        },
                        "logRoles": {
                          "type": "boolean"
                        },
                        "prettyDOM": {
                          "type": "boolean"
                        },
                        "logTestingPlaygroundURL": {
                          "type": "boolean"
                        },
                        "debug": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-dom-import": {
            "defaultOptions": [
              ""
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow importing from DOM Testing Library",
                "recommendedConfig": {
                  "dom": false,
                  "angular": [
                    "error",
                    "angular"
                  ],
                  "react": [
                    "error",
                    "react"
                  ],
                  "vue": [
                    "error",
                    "vue"
                  ],
                  "svelte": [
                    "error",
                    "svelte"
                  ],
                  "marko": [
                    "error",
                    "marko"
                  ]
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-dom-import.md"
              },
              "messages": {
                "noDomImport": "import from DOM Testing Library is restricted, import from corresponding Testing Library framework instead",
                "noDomImportFramework": "import from DOM Testing Library is restricted, import from {{module}} instead"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string"
                }
              ]
            }
          },
          "no-global-regexp-flag-in-query": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow the use of the global RegExp flag (/g) in queries",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-global-regexp-flag-in-query.md"
              },
              "messages": {
                "noGlobalRegExpFlagInQuery": "Avoid using the global RegExp flag (/g) in queries"
              },
              "fixable": "code",
              "schema": []
            }
          },
          "no-manual-cleanup": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow the use of `cleanup`",
                "recommendedConfig": {
                  "dom": false,
                  "angular": false,
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": false
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-manual-cleanup.md"
              },
              "messages": {
                "noManualCleanup": "`cleanup` is performed automatically by your test runner, you don't need manual cleanups."
              },
              "schema": []
            }
          },
          "no-node-access": {
            "defaultOptions": [
              {
                "allowContainerFirstChild": false
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow direct Node access",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-node-access.md"
              },
              "messages": {
                "noNodeAccess": "Avoid direct Node access. Prefer using the methods from Testing Library."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowContainerFirstChild": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "no-promise-in-fire-event": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow the use of promises passed to a `fireEvent` method",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-promise-in-fire-event.md"
              },
              "messages": {
                "noPromiseInFireEvent": "A promise shouldn't be passed to a `fireEvent` method, instead pass the DOM element"
              },
              "schema": []
            }
          },
          "no-render-in-lifecycle": {
            "defaultOptions": [
              {
                "allowTestingFrameworkSetupHook": ""
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow the use of `render` in testing frameworks setup functions",
                "recommendedConfig": {
                  "dom": false,
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-render-in-lifecycle.md"
              },
              "messages": {
                "noRenderInSetup": "Forbidden usage of `render` within testing framework `{{ name }}` setup"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowTestingFrameworkSetupHook": {
                      "enum": [
                        "beforeEach",
                        "beforeAll"
                      ],
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "no-unnecessary-act": {
            "defaultOptions": [
              {
                "isStrict": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow wrapping Testing Library utils or empty callbacks in `act`",
                "recommendedConfig": {
                  "dom": false,
                  "angular": false,
                  "react": "error",
                  "vue": false,
                  "svelte": false,
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-unnecessary-act.md"
              },
              "messages": {
                "noUnnecessaryActTestingLibraryUtil": "Avoid wrapping Testing Library util calls in `act`",
                "noUnnecessaryActEmptyFunction": "Avoid wrapping empty function in `act`"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "isStrict": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "no-wait-for-multiple-assertions": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow the use of multiple `expect` calls inside `waitFor`",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-wait-for-multiple-assertions.md"
              },
              "messages": {
                "noWaitForMultipleAssertion": "Avoid using multiple assertions within `waitFor` callback"
              },
              "schema": []
            }
          },
          "no-wait-for-side-effects": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow the use of side effects in `waitFor`",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-wait-for-side-effects.md"
              },
              "messages": {
                "noSideEffectsWaitFor": "Avoid using side effects within `waitFor` callback"
              },
              "schema": []
            }
          },
          "no-wait-for-snapshot": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Ensures no snapshot is generated inside of a `waitFor` call",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-wait-for-snapshot.md"
              },
              "messages": {
                "noWaitForSnapshot": "A snapshot can't be generated inside of a `{{ name }}` call"
              },
              "schema": []
            }
          },
          "prefer-explicit-assert": {
            "defaultOptions": [
              {
                "includeFindQueries": true
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Suggest using explicit assertions rather than standalone queries",
                "recommendedConfig": {
                  "dom": false,
                  "angular": false,
                  "react": false,
                  "vue": false,
                  "svelte": false,
                  "marko": false
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-explicit-assert.md"
              },
              "messages": {
                "preferExplicitAssert": "Wrap stand-alone `{{queryType}}` query with `expect` function for better explicit assertion",
                "preferExplicitAssertAssertion": "`getBy*` queries must be asserted with `{{assertion}}`"
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "assertion": {
                      "type": "string",
                      "enum": [
                        "toBeOnTheScreen",
                        "toBeInTheDocument",
                        "toBeTruthy",
                        "toBeDefined"
                      ]
                    },
                    "includeFindQueries": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "prefer-find-by": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Suggest using `find(All)By*` query instead of `waitFor` + `get(All)By*` to wait for elements",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-find-by.md"
              },
              "messages": {
                "preferFindBy": "Prefer `{{queryVariant}}{{queryMethod}}` query over using `waitFor` + `{{prevQuery}}`"
              },
              "fixable": "code",
              "schema": []
            }
          },
          "prefer-implicit-assert": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Suggest using implicit assertions for getBy* & findBy* queries",
                "recommendedConfig": {
                  "dom": false,
                  "angular": false,
                  "react": false,
                  "vue": false,
                  "svelte": false,
                  "marko": false
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-implicit-assert.md"
              },
              "messages": {
                "preferImplicitAssert": "Don't wrap `{{queryType}}` query with `expect` & presence matchers like `toBeInTheDocument` or `not.toBeNull` as `{{queryType}}` queries fail implicitly when element is not found"
              },
              "schema": []
            }
          },
          "prefer-presence-queries": {
            "defaultOptions": [
              {
                "presence": true,
                "absence": true
              }
            ],
            "meta": {
              "docs": {
                "description": "Ensure appropriate `get*`/`query*` queries are used with their respective matchers",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-presence-queries.md"
              },
              "messages": {
                "wrongPresenceQuery": "Use `getBy*` queries rather than `queryBy*` for checking element is present",
                "wrongAbsenceQuery": "Use `queryBy*` queries rather than `getBy*` for checking element is NOT present"
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "presence": {
                      "type": "boolean"
                    },
                    "absence": {
                      "type": "boolean"
                    }
                  }
                }
              ],
              "type": "suggestion"
            }
          },
          "prefer-query-by-disappearance": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Suggest using `queryBy*` queries when waiting for disappearance",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-query-by-disappearance.md"
              },
              "messages": {
                "preferQueryByDisappearance": "Prefer using queryBy* when waiting for disappearance"
              },
              "schema": []
            }
          },
          "prefer-query-matchers": {
            "defaultOptions": [
              {
                "validEntries": []
              }
            ],
            "meta": {
              "docs": {
                "description": "Ensure the configured `get*`/`query*` query is used with the corresponding matchers",
                "recommendedConfig": {
                  "dom": false,
                  "angular": false,
                  "react": false,
                  "vue": false,
                  "svelte": false,
                  "marko": false
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-query-matchers.md"
              },
              "messages": {
                "wrongQueryForMatcher": "Use `{{ query }}By*` queries for {{ matcher }}"
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "validEntries": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "query": {
                            "type": "string",
                            "enum": [
                              "get",
                              "query"
                            ]
                          },
                          "matcher": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "type": "suggestion"
            }
          },
          "prefer-screen-queries": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Suggest using `screen` while querying",
                "recommendedConfig": {
                  "dom": "error",
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-screen-queries.md"
              },
              "messages": {
                "preferScreenQueries": "Avoid destructuring queries from `render` result, use `screen.{{ name }}` instead"
              },
              "schema": []
            }
          },
          "prefer-user-event": {
            "defaultOptions": [
              {
                "allowedMethods": []
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Suggest using `userEvent` over `fireEvent` for simulating user interactions",
                "recommendedConfig": {
                  "dom": false,
                  "angular": false,
                  "react": false,
                  "vue": false,
                  "svelte": false,
                  "marko": false
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-user-event.md"
              },
              "messages": {
                "preferUserEvent": "Prefer using {{userEventMethods}} over fireEvent.{{fireEventMethod}}"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowedMethods": {
                      "type": "array"
                    }
                  }
                }
              ]
            }
          },
          "render-result-naming-convention": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce a valid naming for return value from `render`",
                "recommendedConfig": {
                  "dom": false,
                  "angular": "error",
                  "react": "error",
                  "vue": "error",
                  "svelte": "error",
                  "marko": "error"
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/render-result-naming-convention.md"
              },
              "messages": {
                "renderResultNamingConvention": "`{{ renderResultName }}` is not a recommended name for `render` returned value. Instead, you should destructure it, or name it using one of: `view`, or `utils`"
              },
              "schema": []
            }
          }
        }
      },
      "jest-dom": {
        "meta": {
          "name": "eslint-plugin-jest-dom",
          "version": "5.5.0"
        },
        "configs": {
          "recommended": {
            "plugins": [
              "jest-dom"
            ],
            "rules": {
              "jest-dom/prefer-checked": "error",
              "jest-dom/prefer-empty": "error",
              "jest-dom/prefer-enabled-disabled": "error",
              "jest-dom/prefer-focus": "error",
              "jest-dom/prefer-in-document": "error",
              "jest-dom/prefer-required": "error",
              "jest-dom/prefer-to-have-attribute": "error",
              "jest-dom/prefer-to-have-class": "error",
              "jest-dom/prefer-to-have-style": "error",
              "jest-dom/prefer-to-have-text-content": "error",
              "jest-dom/prefer-to-have-value": "error"
            }
          },
          "all": {
            "plugins": [
              "jest-dom"
            ],
            "rules": "[Circular Reference]"
          },
          "flat/recommended": {
            "plugins": {
              "jest-dom": "[Circular Reference]"
            },
            "rules": "[Circular Reference]"
          },
          "flat/all": {
            "plugins": {
              "jest-dom": "[Circular Reference]"
            },
            "rules": "[Circular Reference]"
          }
        },
        "rules": {
          "prefer-checked": {
            "meta": {
              "docs": {
                "description": "prefer toBeChecked over checking attributes",
                "category": "Best Practices",
                "recommended": true,
                "url": "prefer-checked"
              },
              "fixable": "code"
            }
          },
          "prefer-empty": {
            "meta": {
              "docs": {
                "description": "Prefer toBeEmpty over checking innerHTML",
                "category": "Best Practices",
                "recommended": true,
                "url": "prefer-empty"
              },
              "fixable": "code"
            }
          },
          "prefer-enabled-disabled": {
            "meta": {
              "docs": {
                "description": "prefer toBeDisabled or toBeEnabled over checking attributes",
                "category": "Best Practices",
                "recommended": true,
                "url": "prefer-enabled-disabled"
              },
              "fixable": "code"
            }
          },
          "prefer-focus": {
            "meta": {
              "docs": {
                "url": "prefer-focus",
                "description": "prefer toHaveFocus over checking document.activeElement",
                "category": "Best Practices",
                "recommended": true
              },
              "fixable": "code"
            }
          },
          "prefer-in-document": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "category": "Best Practices",
                "description": "Prefer .toBeInTheDocument() for asserting the existence of a DOM node",
                "url": "prefer-in-document",
                "recommended": true
              },
              "fixable": "code",
              "messages": {
                "use-document": "Prefer .toBeInTheDocument() for asserting DOM node existence",
                "invalid-combination-length-1": "Invalid combination of {{ query }} and .toHaveLength(1). Did you mean to use {{ allQuery }}?",
                "replace-query-with-all": "Replace {{ query }} with {{ allQuery }}"
              },
              "hasSuggestions": true
            }
          },
          "prefer-required": {
            "meta": {
              "docs": {
                "description": "prefer toBeRequired over checking properties",
                "category": "Best Practices",
                "recommended": true,
                "url": "prefer-required"
              },
              "fixable": "code"
            }
          },
          "prefer-to-have-attribute": {
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toHaveAttribute over checking  getAttribute/hasAttribute ",
                "url": "prefer-to-have-attribute",
                "recommended": true
              },
              "fixable": "code"
            }
          },
          "prefer-to-have-class": {
            "meta": {
              "docs": {
                "category": "Best Practices",
                "url": "prefer-to-have-class",
                "description": "prefer toHaveClass over checking element className",
                "recommended": true
              },
              "messages": {
                "use-to-have-class": "Prefer .toHaveClass() over checking element className"
              },
              "fixable": "code"
            }
          },
          "prefer-to-have-style": {
            "meta": {
              "docs": {
                "category": "Best Practices",
                "url": "prefer-to-have-style",
                "description": "prefer toHaveStyle over checking element style",
                "recommended": true
              },
              "fixable": "code"
            }
          },
          "prefer-to-have-text-content": {
            "meta": {
              "docs": {
                "category": "Best Practices",
                "url": "prefer-to-have-text-content",
                "description": "Prefer toHaveTextContent over checking element.textContent",
                "recommended": true
              },
              "fixable": "code"
            }
          },
          "prefer-to-have-value": {
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toHaveValue over checking element.value",
                "url": "prefer-to-have-value",
                "recommended": true
              },
              "fixable": "code",
              "messages": {
                "use-to-have-value": "Prefer .toHaveValue() over other attribute checks"
              }
            }
          }
        }
      }
    },
    "rules": {
      "testing-library/await-async-events": "error",
      "testing-library/await-async-queries": "error",
      "testing-library/await-async-utils": "error",
      "testing-library/consistent-data-testid": [
        "error",
        {
          "testIdPattern": ".*",
          "testIdAttribute": [
            "data-testid"
          ]
        }
      ],
      "testing-library/no-await-sync-events": [
        "error",
        {
          "eventModules": [
            "fire-event"
          ]
        }
      ],
      "testing-library/no-await-sync-queries": "error",
      "testing-library/no-container": "error",
      "testing-library/no-debugging-utils": "error",
      "testing-library/no-dom-import": "error",
      "testing-library/no-global-regexp-flag-in-query": "error",
      "testing-library/no-manual-cleanup": "error",
      "testing-library/no-node-access": "error",
      "testing-library/no-promise-in-fire-event": "error",
      "testing-library/no-render-in-lifecycle": "error",
      "testing-library/no-unnecessary-act": "error",
      "testing-library/no-wait-for-multiple-assertions": "error",
      "testing-library/no-wait-for-side-effects": "error",
      "testing-library/no-wait-for-snapshot": "error",
      "testing-library/prefer-explicit-assert": "error",
      "testing-library/prefer-find-by": "error",
      "testing-library/prefer-presence-queries": "error",
      "testing-library/prefer-query-by-disappearance": "error",
      "testing-library/prefer-query-matchers": "error",
      "testing-library/prefer-screen-queries": "error",
      "testing-library/prefer-user-event": "error",
      "testing-library/render-result-naming-convention": "error",
      "testing-library/prefer-implicit-assert": "error",
      "jest-dom/prefer-checked": "error",
      "jest-dom/prefer-empty": "error",
      "jest-dom/prefer-enabled-disabled": "error",
      "jest-dom/prefer-focus": "error",
      "jest-dom/prefer-in-document": "error",
      "jest-dom/prefer-required": "error",
      "jest-dom/prefer-to-have-attribute": "error",
      "jest-dom/prefer-to-have-class": "error",
      "jest-dom/prefer-to-have-style": "error",
      "jest-dom/prefer-to-have-text-content": "error",
      "jest-dom/prefer-to-have-value": "error"
    }
  }
]