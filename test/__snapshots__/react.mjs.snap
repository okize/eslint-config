[
  {
    "languageOptions": {
      "parserOptions": {
        "ecmaFeatures": {
          "jsx": true
        }
      },
      "globals": {
        "AbortController": false,
        "AbortSignal": false,
        "AbsoluteOrientationSensor": false,
        "AbstractRange": false,
        "Accelerometer": false,
        "addEventListener": false,
        "ai": false,
        "AI": false,
        "AITextSession": false,
        "alert": false,
        "AnalyserNode": false,
        "Animation": false,
        "AnimationEffect": false,
        "AnimationEvent": false,
        "AnimationPlaybackEvent": false,
        "AnimationTimeline": false,
        "atob": false,
        "Attr": false,
        "Audio": false,
        "AudioBuffer": false,
        "AudioBufferSourceNode": false,
        "AudioContext": false,
        "AudioData": false,
        "AudioDecoder": false,
        "AudioDestinationNode": false,
        "AudioEncoder": false,
        "AudioListener": false,
        "AudioNode": false,
        "AudioParam": false,
        "AudioParamMap": false,
        "AudioProcessingEvent": false,
        "AudioScheduledSourceNode": false,
        "AudioSinkInfo": false,
        "AudioWorklet": false,
        "AudioWorkletGlobalScope": false,
        "AudioWorkletNode": false,
        "AudioWorkletProcessor": false,
        "AuthenticatorAssertionResponse": false,
        "AuthenticatorAttestationResponse": false,
        "AuthenticatorResponse": false,
        "BackgroundFetchManager": false,
        "BackgroundFetchRecord": false,
        "BackgroundFetchRegistration": false,
        "BarcodeDetector": false,
        "BarProp": false,
        "BaseAudioContext": false,
        "BatteryManager": false,
        "BeforeUnloadEvent": false,
        "BiquadFilterNode": false,
        "Blob": false,
        "BlobEvent": false,
        "Bluetooth": false,
        "BluetoothCharacteristicProperties": false,
        "BluetoothDevice": false,
        "BluetoothRemoteGATTCharacteristic": false,
        "BluetoothRemoteGATTDescriptor": false,
        "BluetoothRemoteGATTServer": false,
        "BluetoothRemoteGATTService": false,
        "BluetoothUUID": false,
        "blur": false,
        "BroadcastChannel": false,
        "BrowserCaptureMediaStreamTrack": false,
        "btoa": false,
        "ByteLengthQueuingStrategy": false,
        "Cache": false,
        "caches": false,
        "CacheStorage": false,
        "cancelAnimationFrame": false,
        "cancelIdleCallback": false,
        "CanvasCaptureMediaStream": false,
        "CanvasCaptureMediaStreamTrack": false,
        "CanvasGradient": false,
        "CanvasPattern": false,
        "CanvasRenderingContext2D": false,
        "CaptureController": false,
        "CaretPosition": false,
        "CDATASection": false,
        "ChannelMergerNode": false,
        "ChannelSplitterNode": false,
        "ChapterInformation": false,
        "CharacterBoundsUpdateEvent": false,
        "CharacterData": false,
        "clearInterval": false,
        "clearTimeout": false,
        "clientInformation": false,
        "Clipboard": false,
        "ClipboardEvent": false,
        "ClipboardItem": false,
        "close": false,
        "closed": false,
        "CloseEvent": false,
        "CloseWatcher": false,
        "Comment": false,
        "CompositionEvent": false,
        "CompressionStream": false,
        "confirm": false,
        "console": false,
        "ConstantSourceNode": false,
        "ContentVisibilityAutoStateChangeEvent": false,
        "ConvolverNode": false,
        "CookieChangeEvent": false,
        "CookieDeprecationLabel": false,
        "cookieStore": false,
        "CookieStore": false,
        "CookieStoreManager": false,
        "CountQueuingStrategy": false,
        "createImageBitmap": false,
        "Credential": false,
        "credentialless": false,
        "CredentialsContainer": false,
        "CropTarget": false,
        "crossOriginIsolated": false,
        "crypto": false,
        "Crypto": false,
        "CryptoKey": false,
        "CSS": false,
        "CSSAnimation": false,
        "CSSConditionRule": false,
        "CSSContainerRule": false,
        "CSSCounterStyleRule": false,
        "CSSFontFaceRule": false,
        "CSSFontFeatureValuesRule": false,
        "CSSFontPaletteValuesRule": false,
        "CSSGroupingRule": false,
        "CSSImageValue": false,
        "CSSImportRule": false,
        "CSSKeyframeRule": false,
        "CSSKeyframesRule": false,
        "CSSKeywordValue": false,
        "CSSLayerBlockRule": false,
        "CSSLayerStatementRule": false,
        "CSSMarginRule": false,
        "CSSMathClamp": false,
        "CSSMathInvert": false,
        "CSSMathMax": false,
        "CSSMathMin": false,
        "CSSMathNegate": false,
        "CSSMathProduct": false,
        "CSSMathSum": false,
        "CSSMathValue": false,
        "CSSMatrixComponent": false,
        "CSSMediaRule": false,
        "CSSNamespaceRule": false,
        "CSSNestedDeclarations": false,
        "CSSNumericArray": false,
        "CSSNumericValue": false,
        "CSSPageDescriptors": false,
        "CSSPageRule": false,
        "CSSPerspective": false,
        "CSSPositionTryDescriptors": false,
        "CSSPositionTryRule": false,
        "CSSPositionValue": false,
        "CSSPropertyRule": false,
        "CSSRotate": false,
        "CSSRule": false,
        "CSSRuleList": false,
        "CSSScale": false,
        "CSSScopeRule": false,
        "CSSSkew": false,
        "CSSSkewX": false,
        "CSSSkewY": false,
        "CSSStartingStyleRule": false,
        "CSSStyleDeclaration": false,
        "CSSStyleRule": false,
        "CSSStyleSheet": false,
        "CSSStyleValue": false,
        "CSSSupportsRule": false,
        "CSSTransformComponent": false,
        "CSSTransformValue": false,
        "CSSTransition": false,
        "CSSTranslate": false,
        "CSSUnitValue": false,
        "CSSUnparsedValue": false,
        "CSSVariableReferenceValue": false,
        "CSSViewTransitionRule": false,
        "currentFrame": false,
        "currentTime": false,
        "CustomElementRegistry": false,
        "customElements": false,
        "CustomEvent": false,
        "CustomStateSet": false,
        "DataTransfer": false,
        "DataTransferItem": false,
        "DataTransferItemList": false,
        "DecompressionStream": false,
        "DelayNode": false,
        "DelegatedInkTrailPresenter": false,
        "DeviceMotionEvent": false,
        "DeviceMotionEventAcceleration": false,
        "DeviceMotionEventRotationRate": false,
        "DeviceOrientationEvent": false,
        "devicePixelRatio": false,
        "dispatchEvent": false,
        "document": false,
        "Document": false,
        "DocumentFragment": false,
        "documentPictureInPicture": false,
        "DocumentPictureInPicture": false,
        "DocumentPictureInPictureEvent": false,
        "DocumentTimeline": false,
        "DocumentType": false,
        "DOMError": false,
        "DOMException": false,
        "DOMImplementation": false,
        "DOMMatrix": false,
        "DOMMatrixReadOnly": false,
        "DOMParser": false,
        "DOMPoint": false,
        "DOMPointReadOnly": false,
        "DOMQuad": false,
        "DOMRect": false,
        "DOMRectList": false,
        "DOMRectReadOnly": false,
        "DOMStringList": false,
        "DOMStringMap": false,
        "DOMTokenList": false,
        "DragEvent": false,
        "DynamicsCompressorNode": false,
        "EditContext": false,
        "Element": false,
        "ElementInternals": false,
        "EncodedAudioChunk": false,
        "EncodedVideoChunk": false,
        "ErrorEvent": false,
        "event": false,
        "Event": false,
        "EventCounts": false,
        "EventSource": false,
        "EventTarget": false,
        "external": false,
        "External": false,
        "EyeDropper": false,
        "FeaturePolicy": false,
        "FederatedCredential": false,
        "fence": false,
        "Fence": false,
        "FencedFrameConfig": false,
        "fetch": false,
        "fetchLater": false,
        "FetchLaterResult": false,
        "File": false,
        "FileList": false,
        "FileReader": false,
        "FileSystem": false,
        "FileSystemDirectoryEntry": false,
        "FileSystemDirectoryHandle": false,
        "FileSystemDirectoryReader": false,
        "FileSystemEntry": false,
        "FileSystemFileEntry": false,
        "FileSystemFileHandle": false,
        "FileSystemHandle": false,
        "FileSystemWritableFileStream": false,
        "find": false,
        "Float16Array": false,
        "focus": false,
        "FocusEvent": false,
        "FontData": false,
        "FontFace": false,
        "FontFaceSet": false,
        "FontFaceSetLoadEvent": false,
        "FormData": false,
        "FormDataEvent": false,
        "FragmentDirective": false,
        "frameElement": false,
        "frames": false,
        "GainNode": false,
        "Gamepad": false,
        "GamepadAxisMoveEvent": false,
        "GamepadButton": false,
        "GamepadButtonEvent": false,
        "GamepadEvent": false,
        "GamepadHapticActuator": false,
        "GamepadPose": false,
        "Geolocation": false,
        "GeolocationCoordinates": false,
        "GeolocationPosition": false,
        "GeolocationPositionError": false,
        "getComputedStyle": false,
        "getScreenDetails": false,
        "getSelection": false,
        "GPU": false,
        "GPUAdapter": false,
        "GPUAdapterInfo": false,
        "GPUBindGroup": false,
        "GPUBindGroupLayout": false,
        "GPUBuffer": false,
        "GPUBufferUsage": false,
        "GPUCanvasContext": false,
        "GPUColorWrite": false,
        "GPUCommandBuffer": false,
        "GPUCommandEncoder": false,
        "GPUCompilationInfo": false,
        "GPUCompilationMessage": false,
        "GPUComputePassEncoder": false,
        "GPUComputePipeline": false,
        "GPUDevice": false,
        "GPUDeviceLostInfo": false,
        "GPUError": false,
        "GPUExternalTexture": false,
        "GPUInternalError": false,
        "GPUMapMode": false,
        "GPUOutOfMemoryError": false,
        "GPUPipelineError": false,
        "GPUPipelineLayout": false,
        "GPUQuerySet": false,
        "GPUQueue": false,
        "GPURenderBundle": false,
        "GPURenderBundleEncoder": false,
        "GPURenderPassEncoder": false,
        "GPURenderPipeline": false,
        "GPUSampler": false,
        "GPUShaderModule": false,
        "GPUShaderStage": false,
        "GPUSupportedFeatures": false,
        "GPUSupportedLimits": false,
        "GPUTexture": false,
        "GPUTextureUsage": false,
        "GPUTextureView": false,
        "GPUUncapturedErrorEvent": false,
        "GPUValidationError": false,
        "GravitySensor": false,
        "Gyroscope": false,
        "HashChangeEvent": false,
        "Headers": false,
        "HID": false,
        "HIDConnectionEvent": false,
        "HIDDevice": false,
        "HIDInputReportEvent": false,
        "Highlight": false,
        "HighlightRegistry": false,
        "history": false,
        "History": false,
        "HTMLAllCollection": false,
        "HTMLAnchorElement": false,
        "HTMLAreaElement": false,
        "HTMLAudioElement": false,
        "HTMLBaseElement": false,
        "HTMLBodyElement": false,
        "HTMLBRElement": false,
        "HTMLButtonElement": false,
        "HTMLCanvasElement": false,
        "HTMLCollection": false,
        "HTMLDataElement": false,
        "HTMLDataListElement": false,
        "HTMLDetailsElement": false,
        "HTMLDialogElement": false,
        "HTMLDirectoryElement": false,
        "HTMLDivElement": false,
        "HTMLDListElement": false,
        "HTMLDocument": false,
        "HTMLElement": false,
        "HTMLEmbedElement": false,
        "HTMLFencedFrameElement": false,
        "HTMLFieldSetElement": false,
        "HTMLFontElement": false,
        "HTMLFormControlsCollection": false,
        "HTMLFormElement": false,
        "HTMLFrameElement": false,
        "HTMLFrameSetElement": false,
        "HTMLHeadElement": false,
        "HTMLHeadingElement": false,
        "HTMLHRElement": false,
        "HTMLHtmlElement": false,
        "HTMLIFrameElement": false,
        "HTMLImageElement": false,
        "HTMLInputElement": false,
        "HTMLLabelElement": false,
        "HTMLLegendElement": false,
        "HTMLLIElement": false,
        "HTMLLinkElement": false,
        "HTMLMapElement": false,
        "HTMLMarqueeElement": false,
        "HTMLMediaElement": false,
        "HTMLMenuElement": false,
        "HTMLMetaElement": false,
        "HTMLMeterElement": false,
        "HTMLModElement": false,
        "HTMLObjectElement": false,
        "HTMLOListElement": false,
        "HTMLOptGroupElement": false,
        "HTMLOptionElement": false,
        "HTMLOptionsCollection": false,
        "HTMLOutputElement": false,
        "HTMLParagraphElement": false,
        "HTMLParamElement": false,
        "HTMLPictureElement": false,
        "HTMLPreElement": false,
        "HTMLProgressElement": false,
        "HTMLQuoteElement": false,
        "HTMLScriptElement": false,
        "HTMLSelectElement": false,
        "HTMLSlotElement": false,
        "HTMLSourceElement": false,
        "HTMLSpanElement": false,
        "HTMLStyleElement": false,
        "HTMLTableCaptionElement": false,
        "HTMLTableCellElement": false,
        "HTMLTableColElement": false,
        "HTMLTableElement": false,
        "HTMLTableRowElement": false,
        "HTMLTableSectionElement": false,
        "HTMLTemplateElement": false,
        "HTMLTextAreaElement": false,
        "HTMLTimeElement": false,
        "HTMLTitleElement": false,
        "HTMLTrackElement": false,
        "HTMLUListElement": false,
        "HTMLUnknownElement": false,
        "HTMLVideoElement": false,
        "IDBCursor": false,
        "IDBCursorWithValue": false,
        "IDBDatabase": false,
        "IDBFactory": false,
        "IDBIndex": false,
        "IDBKeyRange": false,
        "IDBObjectStore": false,
        "IDBOpenDBRequest": false,
        "IDBRequest": false,
        "IDBTransaction": false,
        "IDBVersionChangeEvent": false,
        "IdentityCredential": false,
        "IdentityCredentialError": false,
        "IdentityProvider": false,
        "IdleDeadline": false,
        "IdleDetector": false,
        "IIRFilterNode": false,
        "Image": false,
        "ImageBitmap": false,
        "ImageBitmapRenderingContext": false,
        "ImageCapture": false,
        "ImageData": false,
        "ImageDecoder": false,
        "ImageTrack": false,
        "ImageTrackList": false,
        "indexedDB": false,
        "Ink": false,
        "innerHeight": false,
        "innerWidth": false,
        "InputDeviceCapabilities": false,
        "InputDeviceInfo": false,
        "InputEvent": false,
        "IntersectionObserver": false,
        "IntersectionObserverEntry": false,
        "isSecureContext": false,
        "Keyboard": false,
        "KeyboardEvent": false,
        "KeyboardLayoutMap": false,
        "KeyframeEffect": false,
        "LargestContentfulPaint": false,
        "LaunchParams": false,
        "launchQueue": false,
        "LaunchQueue": false,
        "LayoutShift": false,
        "LayoutShiftAttribution": false,
        "length": false,
        "LinearAccelerationSensor": false,
        "localStorage": false,
        "location": true,
        "Location": false,
        "locationbar": false,
        "Lock": false,
        "LockManager": false,
        "matchMedia": false,
        "MathMLElement": false,
        "MediaCapabilities": false,
        "MediaCapabilitiesInfo": false,
        "MediaDeviceInfo": false,
        "MediaDevices": false,
        "MediaElementAudioSourceNode": false,
        "MediaEncryptedEvent": false,
        "MediaError": false,
        "MediaKeyError": false,
        "MediaKeyMessageEvent": false,
        "MediaKeys": false,
        "MediaKeySession": false,
        "MediaKeyStatusMap": false,
        "MediaKeySystemAccess": false,
        "MediaList": false,
        "MediaMetadata": false,
        "MediaQueryList": false,
        "MediaQueryListEvent": false,
        "MediaRecorder": false,
        "MediaRecorderErrorEvent": false,
        "MediaSession": false,
        "MediaSource": false,
        "MediaSourceHandle": false,
        "MediaStream": false,
        "MediaStreamAudioDestinationNode": false,
        "MediaStreamAudioSourceNode": false,
        "MediaStreamEvent": false,
        "MediaStreamTrack": false,
        "MediaStreamTrackAudioSourceNode": false,
        "MediaStreamTrackAudioStats": false,
        "MediaStreamTrackEvent": false,
        "MediaStreamTrackGenerator": false,
        "MediaStreamTrackProcessor": false,
        "MediaStreamTrackVideoStats": false,
        "menubar": false,
        "MessageChannel": false,
        "MessageEvent": false,
        "MessagePort": false,
        "MIDIAccess": false,
        "MIDIConnectionEvent": false,
        "MIDIInput": false,
        "MIDIInputMap": false,
        "MIDIMessageEvent": false,
        "MIDIOutput": false,
        "MIDIOutputMap": false,
        "MIDIPort": false,
        "MimeType": false,
        "MimeTypeArray": false,
        "model": false,
        "ModelGenericSession": false,
        "ModelManager": false,
        "MouseEvent": false,
        "moveBy": false,
        "moveTo": false,
        "MutationEvent": false,
        "MutationObserver": false,
        "MutationRecord": false,
        "name": false,
        "NamedNodeMap": false,
        "NavigateEvent": false,
        "navigation": false,
        "Navigation": false,
        "NavigationActivation": false,
        "NavigationCurrentEntryChangeEvent": false,
        "NavigationDestination": false,
        "NavigationHistoryEntry": false,
        "NavigationPreloadManager": false,
        "NavigationTransition": false,
        "navigator": false,
        "Navigator": false,
        "NavigatorLogin": false,
        "NavigatorManagedData": false,
        "NavigatorUAData": false,
        "NetworkInformation": false,
        "Node": false,
        "NodeFilter": false,
        "NodeIterator": false,
        "NodeList": false,
        "Notification": false,
        "NotifyPaintEvent": false,
        "NotRestoredReasonDetails": false,
        "NotRestoredReasons": false,
        "OfflineAudioCompletionEvent": false,
        "OfflineAudioContext": false,
        "offscreenBuffering": false,
        "OffscreenCanvas": false,
        "OffscreenCanvasRenderingContext2D": false,
        "onabort": true,
        "onafterprint": true,
        "onanimationcancel": true,
        "onanimationend": true,
        "onanimationiteration": true,
        "onanimationstart": true,
        "onappinstalled": true,
        "onauxclick": true,
        "onbeforeinput": true,
        "onbeforeinstallprompt": true,
        "onbeforematch": true,
        "onbeforeprint": true,
        "onbeforetoggle": true,
        "onbeforeunload": true,
        "onbeforexrselect": true,
        "onblur": true,
        "oncancel": true,
        "oncanplay": true,
        "oncanplaythrough": true,
        "onchange": true,
        "onclick": true,
        "onclose": true,
        "oncontentvisibilityautostatechange": true,
        "oncontextlost": true,
        "oncontextmenu": true,
        "oncontextrestored": true,
        "oncopy": true,
        "oncuechange": true,
        "oncut": true,
        "ondblclick": true,
        "ondevicemotion": true,
        "ondeviceorientation": true,
        "ondeviceorientationabsolute": true,
        "ondrag": true,
        "ondragend": true,
        "ondragenter": true,
        "ondragleave": true,
        "ondragover": true,
        "ondragstart": true,
        "ondrop": true,
        "ondurationchange": true,
        "onemptied": true,
        "onended": true,
        "onerror": true,
        "onfocus": true,
        "onformdata": true,
        "ongamepadconnected": true,
        "ongamepaddisconnected": true,
        "ongotpointercapture": true,
        "onhashchange": true,
        "oninput": true,
        "oninvalid": true,
        "onkeydown": true,
        "onkeypress": true,
        "onkeyup": true,
        "onlanguagechange": true,
        "onload": true,
        "onloadeddata": true,
        "onloadedmetadata": true,
        "onloadstart": true,
        "onlostpointercapture": true,
        "onmessage": true,
        "onmessageerror": true,
        "onmousedown": true,
        "onmouseenter": true,
        "onmouseleave": true,
        "onmousemove": true,
        "onmouseout": true,
        "onmouseover": true,
        "onmouseup": true,
        "onmousewheel": true,
        "onoffline": true,
        "ononline": true,
        "onpagehide": true,
        "onpagereveal": true,
        "onpageshow": true,
        "onpageswap": true,
        "onpaste": true,
        "onpause": true,
        "onplay": true,
        "onplaying": true,
        "onpointercancel": true,
        "onpointerdown": true,
        "onpointerenter": true,
        "onpointerleave": true,
        "onpointermove": true,
        "onpointerout": true,
        "onpointerover": true,
        "onpointerrawupdate": true,
        "onpointerup": true,
        "onpopstate": true,
        "onprogress": true,
        "onratechange": true,
        "onrejectionhandled": true,
        "onreset": true,
        "onresize": true,
        "onscroll": true,
        "onscrollend": true,
        "onscrollsnapchange": true,
        "onscrollsnapchanging": true,
        "onsearch": true,
        "onsecuritypolicyviolation": true,
        "onseeked": true,
        "onseeking": true,
        "onselect": true,
        "onselectionchange": true,
        "onselectstart": true,
        "onslotchange": true,
        "onstalled": true,
        "onstorage": true,
        "onsubmit": true,
        "onsuspend": true,
        "ontimeupdate": true,
        "ontoggle": true,
        "ontransitioncancel": true,
        "ontransitionend": true,
        "ontransitionrun": true,
        "ontransitionstart": true,
        "onunhandledrejection": true,
        "onunload": true,
        "onvolumechange": true,
        "onwaiting": true,
        "onwheel": true,
        "open": false,
        "opener": false,
        "Option": false,
        "OrientationSensor": false,
        "origin": false,
        "originAgentCluster": false,
        "OscillatorNode": false,
        "OTPCredential": false,
        "outerHeight": false,
        "outerWidth": false,
        "OverconstrainedError": false,
        "PageRevealEvent": false,
        "PageSwapEvent": false,
        "PageTransitionEvent": false,
        "pageXOffset": false,
        "pageYOffset": false,
        "PannerNode": false,
        "parent": false,
        "PasswordCredential": false,
        "Path2D": false,
        "PaymentAddress": false,
        "PaymentManager": false,
        "PaymentMethodChangeEvent": false,
        "PaymentRequest": false,
        "PaymentRequestUpdateEvent": false,
        "PaymentResponse": false,
        "performance": false,
        "Performance": false,
        "PerformanceElementTiming": false,
        "PerformanceEntry": false,
        "PerformanceEventTiming": false,
        "PerformanceLongAnimationFrameTiming": false,
        "PerformanceLongTaskTiming": false,
        "PerformanceMark": false,
        "PerformanceMeasure": false,
        "PerformanceNavigation": false,
        "PerformanceNavigationTiming": false,
        "PerformanceObserver": false,
        "PerformanceObserverEntryList": false,
        "PerformancePaintTiming": false,
        "PerformanceResourceTiming": false,
        "PerformanceScriptTiming": false,
        "PerformanceServerTiming": false,
        "PerformanceTiming": false,
        "PeriodicSyncManager": false,
        "PeriodicWave": false,
        "Permissions": false,
        "PermissionStatus": false,
        "PERSISTENT": false,
        "personalbar": false,
        "PictureInPictureEvent": false,
        "PictureInPictureWindow": false,
        "Plugin": false,
        "PluginArray": false,
        "PointerEvent": false,
        "PopStateEvent": false,
        "postMessage": false,
        "Presentation": false,
        "PresentationAvailability": false,
        "PresentationConnection": false,
        "PresentationConnectionAvailableEvent": false,
        "PresentationConnectionCloseEvent": false,
        "PresentationConnectionList": false,
        "PresentationReceiver": false,
        "PresentationRequest": false,
        "PressureObserver": false,
        "PressureRecord": false,
        "print": false,
        "ProcessingInstruction": false,
        "Profiler": false,
        "ProgressEvent": false,
        "PromiseRejectionEvent": false,
        "prompt": false,
        "ProtectedAudience": false,
        "PublicKeyCredential": false,
        "PushManager": false,
        "PushSubscription": false,
        "PushSubscriptionOptions": false,
        "queryLocalFonts": false,
        "queueMicrotask": false,
        "RadioNodeList": false,
        "Range": false,
        "ReadableByteStreamController": false,
        "ReadableStream": false,
        "ReadableStreamBYOBReader": false,
        "ReadableStreamBYOBRequest": false,
        "ReadableStreamDefaultController": false,
        "ReadableStreamDefaultReader": false,
        "registerProcessor": false,
        "RelativeOrientationSensor": false,
        "RemotePlayback": false,
        "removeEventListener": false,
        "reportError": false,
        "ReportingObserver": false,
        "Request": false,
        "requestAnimationFrame": false,
        "requestIdleCallback": false,
        "resizeBy": false,
        "ResizeObserver": false,
        "ResizeObserverEntry": false,
        "ResizeObserverSize": false,
        "resizeTo": false,
        "Response": false,
        "RTCCertificate": false,
        "RTCDataChannel": false,
        "RTCDataChannelEvent": false,
        "RTCDtlsTransport": false,
        "RTCDTMFSender": false,
        "RTCDTMFToneChangeEvent": false,
        "RTCEncodedAudioFrame": false,
        "RTCEncodedVideoFrame": false,
        "RTCError": false,
        "RTCErrorEvent": false,
        "RTCIceCandidate": false,
        "RTCIceTransport": false,
        "RTCPeerConnection": false,
        "RTCPeerConnectionIceErrorEvent": false,
        "RTCPeerConnectionIceEvent": false,
        "RTCRtpReceiver": false,
        "RTCRtpScriptTransform": false,
        "RTCRtpSender": false,
        "RTCRtpTransceiver": false,
        "RTCSctpTransport": false,
        "RTCSessionDescription": false,
        "RTCStatsReport": false,
        "RTCTrackEvent": false,
        "sampleRate": false,
        "scheduler": false,
        "Scheduler": false,
        "Scheduling": false,
        "screen": false,
        "Screen": false,
        "ScreenDetailed": false,
        "ScreenDetails": false,
        "screenLeft": false,
        "ScreenOrientation": false,
        "screenTop": false,
        "screenX": false,
        "screenY": false,
        "ScriptProcessorNode": false,
        "scroll": false,
        "scrollbars": false,
        "scrollBy": false,
        "ScrollTimeline": false,
        "scrollTo": false,
        "scrollX": false,
        "scrollY": false,
        "SecurityPolicyViolationEvent": false,
        "Selection": false,
        "self": false,
        "Sensor": false,
        "SensorErrorEvent": false,
        "Serial": false,
        "SerialPort": false,
        "ServiceWorker": false,
        "ServiceWorkerContainer": false,
        "ServiceWorkerRegistration": false,
        "sessionStorage": false,
        "setInterval": false,
        "setTimeout": false,
        "ShadowRoot": false,
        "sharedStorage": false,
        "SharedStorage": false,
        "SharedStorageWorklet": false,
        "SharedWorker": false,
        "showDirectoryPicker": false,
        "showOpenFilePicker": false,
        "showSaveFilePicker": false,
        "SnapEvent": false,
        "SourceBuffer": false,
        "SourceBufferList": false,
        "speechSynthesis": false,
        "SpeechSynthesis": false,
        "SpeechSynthesisErrorEvent": false,
        "SpeechSynthesisEvent": false,
        "SpeechSynthesisUtterance": false,
        "SpeechSynthesisVoice": false,
        "StaticRange": false,
        "status": false,
        "statusbar": false,
        "StereoPannerNode": false,
        "stop": false,
        "Storage": false,
        "StorageBucket": false,
        "StorageBucketManager": false,
        "StorageEvent": false,
        "StorageManager": false,
        "structuredClone": false,
        "styleMedia": false,
        "StylePropertyMap": false,
        "StylePropertyMapReadOnly": false,
        "StyleSheet": false,
        "StyleSheetList": false,
        "SubmitEvent": false,
        "SubtleCrypto": false,
        "SVGAElement": false,
        "SVGAngle": false,
        "SVGAnimatedAngle": false,
        "SVGAnimatedBoolean": false,
        "SVGAnimatedEnumeration": false,
        "SVGAnimatedInteger": false,
        "SVGAnimatedLength": false,
        "SVGAnimatedLengthList": false,
        "SVGAnimatedNumber": false,
        "SVGAnimatedNumberList": false,
        "SVGAnimatedPreserveAspectRatio": false,
        "SVGAnimatedRect": false,
        "SVGAnimatedString": false,
        "SVGAnimatedTransformList": false,
        "SVGAnimateElement": false,
        "SVGAnimateMotionElement": false,
        "SVGAnimateTransformElement": false,
        "SVGAnimationElement": false,
        "SVGCircleElement": false,
        "SVGClipPathElement": false,
        "SVGComponentTransferFunctionElement": false,
        "SVGDefsElement": false,
        "SVGDescElement": false,
        "SVGElement": false,
        "SVGEllipseElement": false,
        "SVGFEBlendElement": false,
        "SVGFEColorMatrixElement": false,
        "SVGFEComponentTransferElement": false,
        "SVGFECompositeElement": false,
        "SVGFEConvolveMatrixElement": false,
        "SVGFEDiffuseLightingElement": false,
        "SVGFEDisplacementMapElement": false,
        "SVGFEDistantLightElement": false,
        "SVGFEDropShadowElement": false,
        "SVGFEFloodElement": false,
        "SVGFEFuncAElement": false,
        "SVGFEFuncBElement": false,
        "SVGFEFuncGElement": false,
        "SVGFEFuncRElement": false,
        "SVGFEGaussianBlurElement": false,
        "SVGFEImageElement": false,
        "SVGFEMergeElement": false,
        "SVGFEMergeNodeElement": false,
        "SVGFEMorphologyElement": false,
        "SVGFEOffsetElement": false,
        "SVGFEPointLightElement": false,
        "SVGFESpecularLightingElement": false,
        "SVGFESpotLightElement": false,
        "SVGFETileElement": false,
        "SVGFETurbulenceElement": false,
        "SVGFilterElement": false,
        "SVGForeignObjectElement": false,
        "SVGGElement": false,
        "SVGGeometryElement": false,
        "SVGGradientElement": false,
        "SVGGraphicsElement": false,
        "SVGImageElement": false,
        "SVGLength": false,
        "SVGLengthList": false,
        "SVGLinearGradientElement": false,
        "SVGLineElement": false,
        "SVGMarkerElement": false,
        "SVGMaskElement": false,
        "SVGMatrix": false,
        "SVGMetadataElement": false,
        "SVGMPathElement": false,
        "SVGNumber": false,
        "SVGNumberList": false,
        "SVGPathElement": false,
        "SVGPatternElement": false,
        "SVGPoint": false,
        "SVGPointList": false,
        "SVGPolygonElement": false,
        "SVGPolylineElement": false,
        "SVGPreserveAspectRatio": false,
        "SVGRadialGradientElement": false,
        "SVGRect": false,
        "SVGRectElement": false,
        "SVGScriptElement": false,
        "SVGSetElement": false,
        "SVGStopElement": false,
        "SVGStringList": false,
        "SVGStyleElement": false,
        "SVGSVGElement": false,
        "SVGSwitchElement": false,
        "SVGSymbolElement": false,
        "SVGTextContentElement": false,
        "SVGTextElement": false,
        "SVGTextPathElement": false,
        "SVGTextPositioningElement": false,
        "SVGTitleElement": false,
        "SVGTransform": false,
        "SVGTransformList": false,
        "SVGTSpanElement": false,
        "SVGUnitTypes": false,
        "SVGUseElement": false,
        "SVGViewElement": false,
        "SyncManager": false,
        "TaskAttributionTiming": false,
        "TaskController": false,
        "TaskPriorityChangeEvent": false,
        "TaskSignal": false,
        "TEMPORARY": false,
        "Text": false,
        "TextDecoder": false,
        "TextDecoderStream": false,
        "TextEncoder": false,
        "TextEncoderStream": false,
        "TextEvent": false,
        "TextFormat": false,
        "TextFormatUpdateEvent": false,
        "TextMetrics": false,
        "TextTrack": false,
        "TextTrackCue": false,
        "TextTrackCueList": false,
        "TextTrackList": false,
        "TextUpdateEvent": false,
        "TimeEvent": false,
        "TimeRanges": false,
        "ToggleEvent": false,
        "toolbar": false,
        "top": false,
        "Touch": false,
        "TouchEvent": false,
        "TouchList": false,
        "TrackEvent": false,
        "TransformStream": false,
        "TransformStreamDefaultController": false,
        "TransitionEvent": false,
        "TreeWalker": false,
        "TrustedHTML": false,
        "TrustedScript": false,
        "TrustedScriptURL": false,
        "TrustedTypePolicy": false,
        "TrustedTypePolicyFactory": false,
        "trustedTypes": false,
        "UIEvent": false,
        "URL": false,
        "URLPattern": false,
        "URLSearchParams": false,
        "USB": false,
        "USBAlternateInterface": false,
        "USBConfiguration": false,
        "USBConnectionEvent": false,
        "USBDevice": false,
        "USBEndpoint": false,
        "USBInterface": false,
        "USBInTransferResult": false,
        "USBIsochronousInTransferPacket": false,
        "USBIsochronousInTransferResult": false,
        "USBIsochronousOutTransferPacket": false,
        "USBIsochronousOutTransferResult": false,
        "USBOutTransferResult": false,
        "UserActivation": false,
        "ValidityState": false,
        "VideoColorSpace": false,
        "VideoDecoder": false,
        "VideoEncoder": false,
        "VideoFrame": false,
        "VideoPlaybackQuality": false,
        "ViewTimeline": false,
        "ViewTransition": false,
        "ViewTransitionTypeSet": false,
        "VirtualKeyboard": false,
        "VirtualKeyboardGeometryChangeEvent": false,
        "VisibilityStateEntry": false,
        "visualViewport": false,
        "VisualViewport": false,
        "VTTCue": false,
        "VTTRegion": false,
        "WakeLock": false,
        "WakeLockSentinel": false,
        "WaveShaperNode": false,
        "WebAssembly": false,
        "WebGL2RenderingContext": false,
        "WebGLActiveInfo": false,
        "WebGLBuffer": false,
        "WebGLContextEvent": false,
        "WebGLFramebuffer": false,
        "WebGLObject": false,
        "WebGLProgram": false,
        "WebGLQuery": false,
        "WebGLRenderbuffer": false,
        "WebGLRenderingContext": false,
        "WebGLSampler": false,
        "WebGLShader": false,
        "WebGLShaderPrecisionFormat": false,
        "WebGLSync": false,
        "WebGLTexture": false,
        "WebGLTransformFeedback": false,
        "WebGLUniformLocation": false,
        "WebGLVertexArrayObject": false,
        "WebSocket": false,
        "WebSocketError": false,
        "WebSocketStream": false,
        "WebTransport": false,
        "WebTransportBidirectionalStream": false,
        "WebTransportDatagramDuplexStream": false,
        "WebTransportError": false,
        "WebTransportReceiveStream": false,
        "WebTransportSendStream": false,
        "WGSLLanguageFeatures": false,
        "WheelEvent": false,
        "window": false,
        "Window": false,
        "WindowControlsOverlay": false,
        "WindowControlsOverlayGeometryChangeEvent": false,
        "Worker": false,
        "Worklet": false,
        "WorkletGlobalScope": false,
        "WritableStream": false,
        "WritableStreamDefaultController": false,
        "WritableStreamDefaultWriter": false,
        "XMLDocument": false,
        "XMLHttpRequest": false,
        "XMLHttpRequestEventTarget": false,
        "XMLHttpRequestUpload": false,
        "XMLSerializer": false,
        "XPathEvaluator": false,
        "XPathExpression": false,
        "XPathResult": false,
        "XRAnchor": false,
        "XRAnchorSet": false,
        "XRBoundedReferenceSpace": false,
        "XRCamera": false,
        "XRCPUDepthInformation": false,
        "XRDepthInformation": false,
        "XRDOMOverlayState": false,
        "XRFrame": false,
        "XRHand": false,
        "XRHitTestResult": false,
        "XRHitTestSource": false,
        "XRInputSource": false,
        "XRInputSourceArray": false,
        "XRInputSourceEvent": false,
        "XRInputSourcesChangeEvent": false,
        "XRJointPose": false,
        "XRJointSpace": false,
        "XRLayer": false,
        "XRLightEstimate": false,
        "XRLightProbe": false,
        "XRPose": false,
        "XRRay": false,
        "XRReferenceSpace": false,
        "XRReferenceSpaceEvent": false,
        "XRRenderState": false,
        "XRRigidTransform": false,
        "XRSession": false,
        "XRSessionEvent": false,
        "XRSpace": false,
        "XRSystem": false,
        "XRTransientInputHitTestResult": false,
        "XRTransientInputHitTestSource": false,
        "XRView": false,
        "XRViewerPose": false,
        "XRViewport": false,
        "XRWebGLBinding": false,
        "XRWebGLDepthInformation": false,
        "XRWebGLLayer": false,
        "XSLTProcessor": false
      }
    },
    "settings": {
      "react": {
        "version": "detect"
      }
    },
    "plugins": {
      "react": {
        "deprecatedRules": {
          "jsx-sort-default-props": {
            "meta": {
              "deprecated": true,
              "replacedBy": [
                "sort-default-props"
              ],
              "docs": {
                "description": "Enforce defaultProps declarations alphabetical sorting",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md"
              },
              "messages": {
                "propsNotSorted": "Default prop types declarations should be sorted alphabetically"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-space-before-closing": {
            "meta": {
              "deprecated": true,
              "replacedBy": [
                "jsx-tag-spacing"
              ],
              "docs": {
                "description": "Enforce spacing before closing bracket in JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md"
              },
              "fixable": "code",
              "messages": {
                "noSpaceBeforeClose": "A space is forbidden before closing bracket",
                "needSpaceBeforeClose": "A space is required before closing bracket"
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ]
            }
          }
        },
        "rules": {
          "boolean-prop-naming": {
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforces consistent naming for boolean props",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md"
              },
              "messages": {
                "patternMismatch": "Prop name `{{propName}}` doesn’t match rule `{{pattern}}`"
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "propTypeNames": {
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true
                    },
                    "rule": {
                      "default": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
                      "minLength": 1,
                      "type": "string"
                    },
                    "message": {
                      "minLength": 1,
                      "type": "string"
                    },
                    "validateNested": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              ]
            }
          },
          "button-has-type": {
            "meta": {
              "docs": {
                "description": "Disallow usage of `button` elements without an explicit `type` attribute",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md"
              },
              "messages": {
                "missingType": "Missing an explicit type attribute for button",
                "complexType": "The button type attribute must be specified by a static string or a trivial ternary expression",
                "invalidValue": "\"{{value}}\" is an invalid value for button type attribute",
                "forbiddenValue": "\"{{value}}\" is an invalid value for button type attribute"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "button": {
                      "default": true,
                      "type": "boolean"
                    },
                    "submit": {
                      "default": true,
                      "type": "boolean"
                    },
                    "reset": {
                      "default": true,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "checked-requires-onchange-or-readonly": {
            "meta": {
              "docs": {
                "description": "Enforce using `onChange` or `readonly` attribute when `checked` is used",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/checked-requires-onchange-or-readonly.md"
              },
              "messages": {
                "missingProperty": "`checked` should be used with either `onChange` or `readOnly`.",
                "exclusiveCheckedAttribute": "Use either `checked` or `defaultChecked`, but not both."
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreMissingProperties": {
                      "type": "boolean"
                    },
                    "ignoreExclusiveCheckedAttribute": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "default-props-match-prop-types": {
            "meta": {
              "docs": {
                "description": "Enforce all defaultProps have a corresponding non-required PropType",
                "category": "Best Practices",
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md"
              },
              "messages": {
                "requiredHasDefault": "defaultProp \"{{name}}\" defined for isRequired propType.",
                "defaultHasNoType": "defaultProp \"{{name}}\" has no corresponding propTypes declaration."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowRequiredDefaults": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "destructuring-assignment": {
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md"
              },
              "fixable": "code",
              "messages": {
                "noDestructPropsInSFCArg": "Must never use destructuring props assignment in SFC argument",
                "noDestructContextInSFCArg": "Must never use destructuring context assignment in SFC argument",
                "noDestructAssignment": "Must never use destructuring {{type}} assignment",
                "useDestructAssignment": "Must use destructuring {{type}} assignment",
                "destructureInSignature": "Must destructure props in the function signature."
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "ignoreClassFields": {
                      "type": "boolean"
                    },
                    "destructureInSignature": {
                      "type": "string",
                      "enum": [
                        "always",
                        "ignore"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "display-name": {
            "meta": {
              "docs": {
                "description": "Disallow missing displayName in a React component definition",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md"
              },
              "messages": {
                "noDisplayName": "Component definition is missing display name",
                "noContextDisplayName": "Context definition is missing display name"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreTranspilerName": {
                      "type": "boolean"
                    },
                    "checkContextObjects": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "forbid-component-props": {
            "meta": {
              "docs": {
                "description": "Disallow certain props on components",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md"
              },
              "messages": {
                "propIsForbidden": "Prop \"{{prop}}\" is forbidden on Components"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "forbid": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "propName": {
                                "type": "string"
                              },
                              "allowedFor": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "allowedForPatterns": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "propName": {
                                "type": "string"
                              },
                              "disallowedFor": {
                                "type": "array",
                                "uniqueItems": true,
                                "minItems": 1,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "disallowedForPatterns": {
                                "type": "array",
                                "uniqueItems": true,
                                "minItems": 1,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "anyOf": [
                              {
                                "required": [
                                  "disallowedFor"
                                ]
                              },
                              {
                                "required": [
                                  "disallowedForPatterns"
                                ]
                              }
                            ],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "propNamePattern": {
                                "type": "string"
                              },
                              "allowedFor": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "allowedForPatterns": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "propNamePattern": {
                                "type": "string"
                              },
                              "disallowedFor": {
                                "type": "array",
                                "uniqueItems": true,
                                "minItems": 1,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "disallowedForPatterns": {
                                "type": "array",
                                "uniqueItems": true,
                                "minItems": 1,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "anyOf": [
                              {
                                "required": [
                                  "disallowedFor"
                                ]
                              },
                              {
                                "required": [
                                  "disallowedForPatterns"
                                ]
                              }
                            ],
                            "additionalProperties": false
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "forbid-dom-props": {
            "meta": {
              "docs": {
                "description": "Disallow certain props on DOM Nodes",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md"
              },
              "messages": {
                "propIsForbidden": "Prop \"{{prop}}\" is forbidden on DOM Nodes"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "forbid": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "propName": {
                                "type": "string"
                              },
                              "disallowedFor": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "message": {
                                "type": "string"
                              }
                            }
                          }
                        ],
                        "minLength": 1
                      },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "forbid-elements": {
            "meta": {
              "docs": {
                "description": "Disallow certain elements",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md"
              },
              "messages": {
                "forbiddenElement": "<{{element}}> is forbidden",
                "forbiddenElement_message": "<{{element}}> is forbidden, {{message}}"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "forbid": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "element": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "element"
                            ],
                            "additionalProperties": false
                          }
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "forbid-foreign-prop-types": {
            "meta": {
              "docs": {
                "description": "Disallow using another component's propTypes",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md"
              },
              "messages": {
                "forbiddenPropType": "Using propTypes from another component is not safe because they may be removed in production builds"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowInPropTypes": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "forbid-prop-types": {
            "meta": {
              "docs": {
                "description": "Disallow certain propTypes",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md"
              },
              "messages": {
                "forbiddenPropType": "Prop type \"{{target}}\" is forbidden"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "forbid": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "checkContextTypes": {
                      "type": "boolean"
                    },
                    "checkChildContextTypes": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": true
                }
              ]
            }
          },
          "forward-ref-uses-ref": {
            "meta": {
              "docs": {
                "description": "Require all forwardRef components include a ref parameter",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forward-ref-uses-ref.md"
              },
              "messages": {
                "missingRefParameter": "forwardRef is used with this component but no ref parameter is set",
                "addRefParameter": "Add a ref parameter",
                "removeForwardRef": "Remove forwardRef wrapper"
              },
              "schema": [],
              "type": "suggestion",
              "hasSuggestions": true
            }
          },
          "function-component-definition": {
            "meta": {
              "docs": {
                "description": "Enforce a specific function type for function components",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md"
              },
              "fixable": "code",
              "messages": {
                "function-declaration": "Function component is not a function declaration",
                "function-expression": "Function component is not a function expression",
                "arrow-function": "Function component is not an arrow function"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "namedComponents": {
                      "anyOf": [
                        {
                          "enum": [
                            "function-declaration",
                            "arrow-function",
                            "function-expression"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "function-declaration",
                              "arrow-function",
                              "function-expression"
                            ]
                          }
                        }
                      ]
                    },
                    "unnamedComponents": {
                      "anyOf": [
                        {
                          "enum": [
                            "arrow-function",
                            "function-expression"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "arrow-function",
                              "function-expression"
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "hook-use-state": {
            "meta": {
              "docs": {
                "description": "Ensure destructuring and symmetric naming of useState hook value and setter variables",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/hook-use-state.md"
              },
              "messages": {
                "useStateErrorMessage": "useState call is not destructured into value + setter pair",
                "useStateErrorMessageOrAddOption": "useState call is not destructured into value + setter pair (you can allow destructuring by enabling \"allowDestructuredState\" option)",
                "suggestPair": "Destructure useState call into value + setter pair",
                "suggestMemo": "Replace useState call with useMemo"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowDestructuredState": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "type": "suggestion",
              "hasSuggestions": true
            }
          },
          "iframe-missing-sandbox": {
            "meta": {
              "docs": {
                "description": "Enforce sandbox attribute on iframe elements",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/iframe-missing-sandbox.md"
              },
              "schema": [],
              "messages": {
                "attributeMissing": "An iframe element is missing a sandbox attribute",
                "invalidValue": "An iframe element defines a sandbox attribute with invalid value \"{{ value }}\"",
                "invalidCombination": "An iframe element defines a sandbox attribute with both allow-scripts and allow-same-origin which is invalid"
              }
            }
          },
          "jsx-boolean-value": {
            "meta": {
              "docs": {
                "description": "Enforce boolean attributes notation in JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md"
              },
              "fixable": "code",
              "messages": {
                "omitBoolean": "Value must be omitted for boolean attribute `{{propName}}`",
                "setBoolean": "Value must be set for boolean attribute `{{propName}}`",
                "omitPropAndBoolean": "Value must be omitted for `false` attribute: `{{propName}}`"
              },
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": [
                          "always",
                          "never"
                        ]
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": [
                          "always"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "never": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            },
                            "uniqueItems": true
                          },
                          "assumeUndefinedIsFalse": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": [
                          "never"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "always": "[Circular Reference]",
                          "assumeUndefinedIsFalse": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "additionalItems": false
                  }
                ]
              }
            }
          },
          "jsx-child-element-spacing": {
            "meta": {
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md"
              },
              "fixable": null,
              "messages": {
                "spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
                "spacingBeforeNext": "Ambiguous spacing before next element {{element}}"
              },
              "schema": []
            }
          },
          "jsx-closing-bracket-location": {
            "meta": {
              "docs": {
                "description": "Enforce closing bracket location in JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md"
              },
              "fixable": "code",
              "messages": {
                "bracketLocation": "The closing bracket must be {{location}}{{details}}"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "location": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nonEmpty": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned",
                            false
                          ]
                        },
                        "selfClosing": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned",
                            false
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "jsx-closing-tag-location": {
            "meta": {
              "docs": {
                "description": "Enforce closing tag location for multiline JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md"
              },
              "fixable": "whitespace",
              "messages": {
                "onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
                "matchIndent": "Expected closing tag to match indentation of opening.",
                "alignWithOpening": "Expected closing tag to be aligned with the line containing the opening tag"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tag-aligned",
                        "line-aligned"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "location": {
                          "enum": [
                            "tag-aligned",
                            "line-aligned"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "jsx-curly-spacing": {
            "meta": {
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md"
              },
              "fixable": "code",
              "messages": {
                "noNewlineAfter": "There should be no newline after '{{token}}'",
                "noNewlineBefore": "There should be no newline before '{{token}}'",
                "noSpaceAfter": "There should be no space after '{{token}}'",
                "noSpaceBefore": "There should be no space before '{{token}}'",
                "spaceNeededAfter": "A space is required after '{{token}}'",
                "spaceNeededBefore": "A space is required before '{{token}}'"
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "type": "object",
                    "properties": {
                      "when": {
                        "enum": [
                          "always",
                          "never"
                        ]
                      },
                      "allowMultiline": {
                        "type": "boolean"
                      },
                      "spacing": {
                        "type": "object",
                        "properties": {
                          "objectLiterals": {
                            "enum": "[Circular Reference]"
                          }
                        }
                      }
                    }
                  },
                  "basicConfigOrBoolean": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/basicConfig"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "anyOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/definitions/basicConfig"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "$ref": "#/definitions/basicConfigOrBoolean"
                              },
                              "children": {
                                "$ref": "#/definitions/basicConfigOrBoolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "enum": "[Circular Reference]"
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean"
                      },
                      "spacing": {
                        "type": "object",
                        "properties": {
                          "objectLiterals": {
                            "enum": "[Circular Reference]"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "jsx-curly-newline": {
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "consistent",
                        "never"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleline": {
                          "enum": [
                            "consistent",
                            "require",
                            "forbid"
                          ]
                        },
                        "multiline": {
                          "enum": [
                            "consistent",
                            "require",
                            "forbid"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "expectedBefore": "Expected newline before '}'.",
                "expectedAfter": "Expected newline after '{'.",
                "unexpectedBefore": "Unexpected newline before '}'.",
                "unexpectedAfter": "Unexpected newline after '{'."
              }
            }
          },
          "jsx-equals-spacing": {
            "meta": {
              "docs": {
                "description": "Enforce or disallow spaces around equal signs in JSX attributes",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md"
              },
              "fixable": "code",
              "messages": {
                "noSpaceBefore": "There should be no space before '='",
                "noSpaceAfter": "There should be no space after '='",
                "needSpaceBefore": "A space is required before '='",
                "needSpaceAfter": "A space is required after '='"
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ]
            }
          },
          "jsx-filename-extension": {
            "meta": {
              "docs": {
                "description": "Disallow file extensions that may contain JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md"
              },
              "messages": {
                "noJSXWithExtension": "JSX not allowed in files with extension '{{ext}}'",
                "extensionOnlyForJSX": "Only files containing JSX may use the extension '{{ext}}'"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allow": {
                      "enum": [
                        "always",
                        "as-needed"
                      ]
                    },
                    "extensions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "ignoreFilesWithoutCode": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-first-prop-new-line": {
            "meta": {
              "docs": {
                "description": "Enforce proper position of the first property in JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md"
              },
              "fixable": "code",
              "messages": {
                "propOnNewLine": "Property should be placed on a new line",
                "propOnSameLine": "Property should be placed on the same line as the component declaration"
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                    "multiline",
                    "multiline-multiprop",
                    "multiprop"
                  ]
                }
              ]
            }
          },
          "jsx-handler-names": {
            "meta": {
              "docs": {
                "description": "Enforce event handler naming conventions in JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md"
              },
              "messages": {
                "badHandlerName": "Handler function for {{propKey}} prop key must be a camelCase name beginning with '{{handlerPrefix}}' only",
                "badPropKey": "Prop key for {{propValue}} must begin with '{{handlerPropPrefix}}'"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "eventHandlerPrefix": {
                          "type": "string"
                        },
                        "eventHandlerPropPrefix": {
                          "type": "string"
                        },
                        "checkLocalVariables": {
                          "type": "boolean"
                        },
                        "checkInlineFunction": {
                          "type": "boolean"
                        },
                        "ignoreComponentNames": {
                          "type": "array",
                          "uniqueItems": true,
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "eventHandlerPrefix": {
                          "type": "string"
                        },
                        "eventHandlerPropPrefix": {
                          "type": "boolean",
                          "enum": [
                            false
                          ]
                        },
                        "checkLocalVariables": {
                          "type": "boolean"
                        },
                        "checkInlineFunction": {
                          "type": "boolean"
                        },
                        "ignoreComponentNames": {
                          "type": "array",
                          "uniqueItems": true,
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "eventHandlerPrefix": {
                          "type": "boolean",
                          "enum": [
                            false
                          ]
                        },
                        "eventHandlerPropPrefix": {
                          "type": "string"
                        },
                        "checkLocalVariables": {
                          "type": "boolean"
                        },
                        "checkInlineFunction": {
                          "type": "boolean"
                        },
                        "ignoreComponentNames": {
                          "type": "array",
                          "uniqueItems": true,
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "checkLocalVariables": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "checkInlineFunction": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "ignoreComponentNames": {
                          "type": "array",
                          "uniqueItems": true,
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "jsx-indent": {
            "meta": {
              "docs": {
                "description": "Enforce JSX indentation",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md"
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tab"
                      ]
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "checkAttributes": {
                      "type": "boolean"
                    },
                    "indentLogicalExpressions": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-indent-props": {
            "meta": {
              "docs": {
                "description": "Enforce props indentation in JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md"
              },
              "fixable": "code",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tab",
                        "first"
                      ]
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "indentMode": {
                          "anyOf": [
                            {
                              "enum": [
                                "tab",
                                "first"
                              ]
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "ignoreTernaryOperator": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "jsx-key": {
            "meta": {
              "docs": {
                "description": "Disallow missing `key` props in iterators/collection literals",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md"
              },
              "messages": {
                "missingIterKey": "Missing \"key\" prop for element in iterator",
                "missingIterKeyUsePrag": "Missing \"key\" prop for element in iterator. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
                "missingArrayKey": "Missing \"key\" prop for element in array",
                "missingArrayKeyUsePrag": "Missing \"key\" prop for element in array. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
                "keyBeforeSpread": "`key` prop must be placed before any `{...spread}, to avoid conflicting with React’s new JSX transform: https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html`",
                "nonUniqueKeys": "`key` prop must be unique"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "checkFragmentShorthand": {
                      "type": "boolean",
                      "default": false
                    },
                    "checkKeyMustBeforeSpread": {
                      "type": "boolean",
                      "default": false
                    },
                    "warnOnDuplicates": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-max-depth": {
            "meta": {
              "docs": {
                "description": "Enforce JSX maximum depth",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md"
              },
              "messages": {
                "wrongDepth": "Expected the depth of nested jsx elements to be <= {{needed}}, but found {{found}}."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-max-props-per-line": {
            "meta": {
              "docs": {
                "description": "Enforce maximum of props on a single line in JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md"
              },
              "fixable": "code",
              "messages": {
                "newLine": "Prop `{{prop}}` must be placed on a new line"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "maximum": {
                          "type": "object",
                          "properties": {
                            "single": {
                              "type": "integer",
                              "minimum": 1
                            },
                            "multi": {
                              "type": "integer",
                              "minimum": 1
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "maximum": {
                          "type": "number",
                          "minimum": 1
                        },
                        "when": {
                          "type": "string",
                          "enum": [
                            "always",
                            "multiline"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "jsx-newline": {
            "meta": {
              "docs": {
                "description": "Require or prevent a new line after jsx elements and expressions.",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md"
              },
              "fixable": "code",
              "messages": {
                "require": "JSX element should start in a new line",
                "prevent": "JSX element should not start in a new line",
                "allowMultilines": "Multiline JSX elements should start in a new line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "prevent": {
                      "default": false,
                      "type": "boolean"
                    },
                    "allowMultilines": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false,
                  "if": {
                    "properties": {
                      "allowMultilines": {
                        "const": true
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "prevent": {
                        "const": true
                      }
                    },
                    "required": [
                      "prevent"
                    ]
                  }
                }
              ]
            }
          },
          "jsx-no-bind": {
            "meta": {
              "docs": {
                "description": "Disallow `.bind()` or arrow functions in JSX props",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md"
              },
              "messages": {
                "bindCall": "JSX props should not use .bind()",
                "arrowFunc": "JSX props should not use arrow functions",
                "bindExpression": "JSX props should not use ::",
                "func": "JSX props should not use functions"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowArrowFunctions": {
                      "default": false,
                      "type": "boolean"
                    },
                    "allowBind": {
                      "default": false,
                      "type": "boolean"
                    },
                    "allowFunctions": {
                      "default": false,
                      "type": "boolean"
                    },
                    "ignoreRefs": {
                      "default": false,
                      "type": "boolean"
                    },
                    "ignoreDOMComponents": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-no-comment-textnodes": {
            "meta": {
              "docs": {
                "description": "Disallow comments from being inserted as text nodes",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md"
              },
              "messages": {
                "putCommentInBraces": "Comments inside children section of tag should be placed inside braces"
              },
              "schema": []
            }
          },
          "jsx-no-constructed-context-values": {
            "meta": {
              "docs": {
                "description": "Disallows JSX context provider values from taking values that will cause needless rerenders",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md"
              },
              "messages": {
                "withIdentifierMsg": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
                "withIdentifierMsgFunc": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
                "defaultMsg": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
                "defaultMsgFunc": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useCallback hook."
              },
              "schema": false
            }
          },
          "jsx-no-duplicate-props": {
            "meta": {
              "docs": {
                "description": "Disallow duplicate properties in JSX",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md"
              },
              "messages": {
                "noDuplicateProps": "No duplicate props allowed"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-no-leaked-render": {
            "meta": {
              "docs": {
                "description": "Disallow problematic leaked values from being rendered",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-leaked-render.md"
              },
              "messages": {
                "noPotentialLeakedRender": "Potential leaked value that might cause unintentionally rendered values or rendering crashes"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "validStrategies": {
                      "type": "array",
                      "items": {
                        "enum": [
                          "ternary",
                          "coerce"
                        ]
                      },
                      "uniqueItems": true,
                      "default": [
                        "ternary",
                        "coerce"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-no-literals": {
            "meta": {
              "docs": {
                "description": "Disallow usage of string literals in JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md"
              },
              "messages": {
                "invalidPropValue": "Invalid prop value: \"{{text}}\"",
                "invalidPropValueInElement": "Invalid prop value: \"{{text}}\" in {{element}}",
                "noStringsInAttributes": "Strings not allowed in attributes: \"{{text}}\"",
                "noStringsInAttributesInElement": "Strings not allowed in attributes: \"{{text}}\" in {{element}}",
                "noStringsInJSX": "Strings not allowed in JSX files: \"{{text}}\"",
                "noStringsInJSXInElement": "Strings not allowed in JSX files: \"{{text}}\" in {{element}}",
                "literalNotInJSXExpression": "Missing JSX expression container around literal string: \"{{text}}\"",
                "literalNotInJSXExpressionInElement": "Missing JSX expression container around literal string: \"{{text}}\" in {{element}}"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "elementOverrides": {
                      "type": "object",
                      "patternProperties": {
                        "^[A-Z][\\w.]*$": {
                          "type": "object",
                          "properties": {
                            "applyToNestedElements": {
                              "type": "boolean"
                            },
                            "noStrings": {
                              "type": "boolean"
                            },
                            "allowedStrings": {
                              "type": "array",
                              "uniqueItems": true,
                              "items": {
                                "type": "string"
                              }
                            },
                            "ignoreProps": {
                              "type": "boolean"
                            },
                            "noAttributeStrings": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "noStrings": "[Circular Reference]",
                    "allowedStrings": "[Circular Reference]",
                    "ignoreProps": "[Circular Reference]",
                    "noAttributeStrings": "[Circular Reference]"
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-no-script-url": {
            "meta": {
              "docs": {
                "description": "Disallow usage of `javascript:` URLs",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md"
              },
              "messages": {
                "noScriptURL": "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML, try using dangerouslySetInnerHTML instead."
              },
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "array",
                        "uniqueItems": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "props": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "uniqueItems": true
                              }
                            }
                          },
                          "required": [
                            "name",
                            "props"
                          ],
                          "additionalProperties": false
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "includeFromSettings": {
                            "type": "boolean"
                          }
                        },
                        "additionalItems": false
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "object",
                        "properties": {
                          "includeFromSettings": {
                            "type": "boolean"
                          }
                        },
                        "additionalItems": false
                      }
                    ],
                    "additionalItems": false
                  }
                ]
              }
            }
          },
          "jsx-no-target-blank": {
            "meta": {
              "fixable": "code",
              "docs": {
                "description": "Disallow `target=\"_blank\"` attribute without `rel=\"noreferrer\"`",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md"
              },
              "messages": {
                "noTargetBlankWithoutNoreferrer": "Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
                "noTargetBlankWithoutNoopener": "Using target=\"_blank\" without rel=\"noreferrer\" or rel=\"noopener\" (the former implies the latter and is preferred due to wider support) is a security risk: see https://mathiasbynens.github.io/rel-noopener/#recommendations"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowReferrer": {
                      "type": "boolean"
                    },
                    "enforceDynamicLinks": {
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    "warnOnSpreadAttributes": {
                      "type": "boolean"
                    },
                    "links": {
                      "type": "boolean",
                      "default": true
                    },
                    "forms": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-no-useless-fragment": {
            "meta": {
              "type": "suggestion",
              "fixable": "code",
              "docs": {
                "description": "Disallow unnecessary fragments",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md"
              },
              "messages": {
                "NeedsMoreChildren": "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
                "ChildOfHtmlElement": "Passing a fragment to an HTML element is useless."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowExpressions": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "jsx-one-expression-per-line": {
            "meta": {
              "docs": {
                "description": "Require one JSX element per line",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md"
              },
              "fixable": "whitespace",
              "messages": {
                "moveToNewLine": "`{{descriptor}}` must be placed on a new line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allow": {
                      "enum": [
                        "none",
                        "literal",
                        "single-child",
                        "non-jsx"
                      ]
                    }
                  },
                  "default": {
                    "allow": "none"
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-no-undef": {
            "meta": {
              "docs": {
                "description": "Disallow undeclared variables in JSX",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md"
              },
              "messages": {
                "undefined": "'{{identifier}}' is not defined."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowGlobals": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-curly-brace-presence": {
            "meta": {
              "docs": {
                "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md"
              },
              "fixable": "code",
              "messages": {
                "unnecessaryCurly": "Curly braces are unnecessary here.",
                "missingCurly": "Need to wrap this literal in a JSX expression."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "props": {
                          "enum": [
                            "always",
                            "never",
                            "ignore"
                          ]
                        },
                        "children": {
                          "enum": "[Circular Reference]"
                        },
                        "propElementValues": {
                          "enum": "[Circular Reference]"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "enum": "[Circular Reference]"
                    }
                  ]
                }
              ]
            }
          },
          "jsx-pascal-case": {
            "meta": {
              "docs": {
                "description": "Enforce PascalCase for user-defined JSX components",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md"
              },
              "messages": {
                "usePascalCase": "Imported JSX component {{name}} must be in PascalCase",
                "usePascalOrSnakeCase": "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowAllCaps": {
                      "type": "boolean"
                    },
                    "allowLeadingUnderscore": {
                      "type": "boolean"
                    },
                    "allowNamespace": {
                      "type": "boolean"
                    },
                    "ignore": {
                      "items": [
                        {
                          "type": "string"
                        }
                      ],
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-fragments": {
            "meta": {
              "docs": {
                "description": "Enforce shorthand or standard form for React fragments",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md"
              },
              "fixable": "code",
              "messages": {
                "fragmentsNotSupported": "Fragments are only supported starting from React v16.2. Please disable the `react/jsx-fragments` rule in `eslint` settings or upgrade your version of React.",
                "preferPragma": "Prefer {{react}}.{{fragment}} over fragment shorthand",
                "preferFragment": "Prefer fragment shorthand over {{react}}.{{fragment}}"
              },
              "schema": [
                {
                  "enum": [
                    "syntax",
                    "element"
                  ]
                }
              ]
            }
          },
          "jsx-props-no-multi-spaces": {
            "meta": {
              "docs": {
                "description": "Disallow multiple spaces between inline JSX props",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md"
              },
              "fixable": "code",
              "messages": {
                "noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
                "onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”"
              },
              "schema": []
            }
          },
          "jsx-props-no-spreading": {
            "meta": {
              "docs": {
                "description": "Disallow JSX prop spreading",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md"
              },
              "messages": {
                "noSpreading": "Prop spreading is forbidden"
              },
              "schema": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "html": {
                          "enum": [
                            "enforce",
                            "ignore"
                          ]
                        },
                        "custom": {
                          "enum": [
                            "enforce",
                            "ignore"
                          ]
                        },
                        "explicitSpread": {
                          "enum": [
                            "enforce",
                            "ignore"
                          ]
                        },
                        "exceptions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          }
                        }
                      }
                    },
                    {
                      "not": {
                        "type": "object",
                        "required": [
                          "html",
                          "custom"
                        ],
                        "properties": {
                          "html": {
                            "enum": [
                              "ignore"
                            ]
                          },
                          "custom": {
                            "enum": [
                              "ignore"
                            ]
                          },
                          "exceptions": {
                            "type": "array",
                            "minItems": 0,
                            "maxItems": 0
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "jsx-props-no-spread-multi": {
            "meta": {
              "docs": {
                "description": "Disallow JSX prop spreading the same identifier multiple times",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spread-multi.md"
              },
              "messages": {
                "noMultiSpreading": "Spreading the same expression multiple times is forbidden"
              }
            }
          },
          "jsx-sort-default-props": "[Circular Reference]",
          "jsx-sort-props": {
            "meta": {
              "docs": {
                "description": "Enforce props alphabetical sorting",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md"
              },
              "fixable": "code",
              "messages": {
                "noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
                "listIsEmpty": "A customized reserved first list must not be empty",
                "listReservedPropsFirst": "Reserved props must be listed before all other props",
                "listCallbacksLast": "Callbacks must be listed after all other props",
                "listShorthandFirst": "Shorthand props must be listed before all other props",
                "listShorthandLast": "Shorthand props must be listed after all other props",
                "listMultilineFirst": "Multiline props must be listed before all other props",
                "listMultilineLast": "Multiline props must be listed after all other props",
                "sortPropsByAlpha": "Props should be sorted alphabetically"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "callbacksLast": {
                      "type": "boolean"
                    },
                    "shorthandFirst": {
                      "type": "boolean"
                    },
                    "shorthandLast": {
                      "type": "boolean"
                    },
                    "multiline": {
                      "enum": [
                        "ignore",
                        "first",
                        "last"
                      ],
                      "default": "ignore"
                    },
                    "ignoreCase": {
                      "type": "boolean"
                    },
                    "noSortAlphabetically": {
                      "type": "boolean"
                    },
                    "reservedFirst": {
                      "type": [
                        "array",
                        "boolean"
                      ]
                    },
                    "locale": {
                      "type": "string",
                      "default": "auto"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-space-before-closing": "[Circular Reference]",
          "jsx-tag-spacing": {
            "meta": {
              "docs": {
                "description": "Enforce whitespace in and around the JSX opening and closing brackets",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md"
              },
              "fixable": "whitespace",
              "messages": {
                "selfCloseSlashNoSpace": "Whitespace is forbidden between `/` and `>`; write `/>`",
                "selfCloseSlashNeedSpace": "Whitespace is required between `/` and `>`; write `/ >`",
                "closeSlashNoSpace": "Whitespace is forbidden between `<` and `/`; write `</`",
                "closeSlashNeedSpace": "Whitespace is required between `<` and `/`; write `< /`",
                "beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeSelfCloseNeedSpace": "A space is required before closing bracket",
                "beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
                "afterOpenNoSpace": "A space is forbidden after opening bracket",
                "afterOpenNeedSpace": "A space is required after opening bracket",
                "beforeCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeCloseNeedSpace": "Whitespace is required before closing bracket",
                "beforeCloseNeedNewline": "A newline is required before closing bracket"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "closingSlash": {
                      "enum": [
                        "always",
                        "never",
                        "allow"
                      ]
                    },
                    "beforeSelfClosing": {
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow"
                      ]
                    },
                    "afterOpening": {
                      "enum": [
                        "always",
                        "allow-multiline",
                        "never",
                        "allow"
                      ]
                    },
                    "beforeClosing": {
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow"
                      ]
                    }
                  },
                  "default": {
                    "closingSlash": "never",
                    "beforeSelfClosing": "always",
                    "afterOpening": "never",
                    "beforeClosing": "allow"
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-uses-react": {
            "meta": {
              "docs": {
                "description": "Disallow React to be incorrectly marked as unused",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md"
              },
              "schema": []
            }
          },
          "jsx-uses-vars": {
            "meta": {
              "docs": {
                "description": "Disallow variables used in JSX to be incorrectly marked as unused",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md"
              },
              "schema": []
            }
          },
          "jsx-wrap-multilines": {
            "meta": {
              "docs": {
                "description": "Disallow missing parentheses around multiline JSX",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md"
              },
              "fixable": "code",
              "messages": {
                "missingParens": "Missing parentheses around multilines JSX",
                "extraParens": "Expected no parentheses around multilines JSX",
                "parensOnNewLines": "Parentheses around JSX should be on separate lines"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "declaration": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never"
                      ]
                    },
                    "assignment": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never"
                      ]
                    },
                    "return": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never"
                      ]
                    },
                    "arrow": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never"
                      ]
                    },
                    "condition": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never"
                      ]
                    },
                    "logical": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never"
                      ]
                    },
                    "prop": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-invalid-html-attribute": {
            "meta": {
              "docs": {
                "description": "Disallow usage of invalid attributes",
                "category": "Possible Errors",
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md"
              },
              "messages": {
                "emptyIsMeaningless": "An empty “{{attributeName}}” attribute is meaningless.",
                "neverValid": "“{{reportingValue}}” is never a valid “{{attributeName}}” attribute value.",
                "noEmpty": "An empty “{{attributeName}}” attribute is meaningless.",
                "noMethod": "The ”{{attributeName}}“ attribute cannot be a method.",
                "notAlone": "“{{reportingValue}}” must be directly followed by “{{missingValue}}”.",
                "notPaired": "“{{reportingValue}}” can not be directly followed by “{{secondValue}}” without “{{missingValue}}”.",
                "notValidFor": "“{{reportingValue}}” is not a valid “{{attributeName}}” attribute value for <{{elementName}}>.",
                "onlyMeaningfulFor": "The ”{{attributeName}}“ attribute only has meaning on the tags: {{tagNames}}",
                "onlyStrings": "“{{attributeName}}” attribute only supports strings.",
                "spaceDelimited": "”{{attributeName}}“ attribute values should be space delimited.",
                "suggestRemoveDefault": "\"remove {{attributeName}}\"",
                "suggestRemoveEmpty": "\"remove empty attribute {{attributeName}}\"",
                "suggestRemoveInvalid": "“remove invalid attribute {{reportingValue}}”",
                "suggestRemoveWhitespaces": "remove whitespaces in “{{attributeName}}”",
                "suggestRemoveNonString": "remove non-string value in “{{attributeName}}”"
              },
              "schema": [
                {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "enum": [
                      "rel"
                    ]
                  }
                }
              ],
              "type": "suggestion",
              "hasSuggestions": true
            }
          },
          "no-access-state-in-setstate": {
            "meta": {
              "docs": {
                "description": "Disallow when this.state is accessed within setState",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md"
              },
              "messages": {
                "useCallback": "Use callback in setState when referencing the previous state."
              }
            }
          },
          "no-adjacent-inline-elements": {
            "meta": {
              "docs": {
                "description": "Disallow adjacent inline elements not separated by whitespace.",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md"
              },
              "schema": [],
              "messages": {
                "inlineElement": "Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements."
              }
            }
          },
          "no-array-index-key": {
            "meta": {
              "docs": {
                "description": "Disallow usage of Array index in keys",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md"
              },
              "messages": {
                "noArrayIndex": "Do not use Array index in keys"
              },
              "schema": []
            }
          },
          "no-arrow-function-lifecycle": {
            "meta": {
              "docs": {
                "description": "Lifecycle methods should be methods on the prototype, not class fields",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md"
              },
              "messages": {
                "lifecycle": "{{propertyName}} is a React lifecycle method, and should not be an arrow function or in a class field. Use an instance method instead."
              },
              "schema": [],
              "fixable": "code"
            }
          },
          "no-children-prop": {
            "meta": {
              "docs": {
                "description": "Disallow passing of children as props",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md"
              },
              "messages": {
                "nestChildren": "Do not pass children as props. Instead, nest children between the opening and closing tags.",
                "passChildrenAsArgs": "Do not pass children as props. Instead, pass them as additional arguments to React.createElement.",
                "nestFunction": "Do not nest a function between the opening and closing tags. Instead, pass it as a prop.",
                "passFunctionAsArgs": "Do not pass a function as an additional argument to React.createElement. Instead, pass it as a prop."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowFunctions": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-danger": {
            "meta": {
              "docs": {
                "description": "Disallow usage of dangerous JSX properties",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md"
              },
              "messages": {
                "dangerousProp": "Dangerous property '{{name}}' found"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "customComponentNames": {
                      "items": {
                        "type": "string"
                      },
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true
                    }
                  }
                }
              ]
            }
          },
          "no-danger-with-children": {
            "meta": {
              "docs": {
                "description": "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md"
              },
              "messages": {
                "dangerWithChildren": "Only set one of `children` or `props.dangerouslySetInnerHTML`"
              },
              "schema": []
            }
          },
          "no-deprecated": {
            "meta": {
              "docs": {
                "description": "Disallow usage of deprecated methods",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md"
              },
              "messages": {
                "deprecated": "{{oldMethod}} is deprecated since React {{version}}{{newMethod}}{{refs}}"
              },
              "schema": []
            }
          },
          "no-did-mount-set-state": {
            "meta": {
              "docs": {
                "description": "Disallow usage of setState in componentDidMount",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md"
              },
              "messages": {
                "noSetState": "Do not use setState in {{name}}"
              },
              "schema": [
                {
                  "enum": [
                    "disallow-in-func"
                  ]
                }
              ]
            }
          },
          "no-did-update-set-state": {
            "meta": {
              "docs": {
                "description": "Disallow usage of setState in componentDidUpdate",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md"
              },
              "messages": "[Circular Reference]",
              "schema": [
                {
                  "enum": [
                    "disallow-in-func"
                  ]
                }
              ]
            }
          },
          "no-direct-mutation-state": {
            "meta": {
              "docs": {
                "description": "Disallow direct mutation of this.state",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md"
              },
              "messages": {
                "noDirectMutation": "Do not mutate state directly. Use setState()."
              }
            }
          },
          "no-find-dom-node": {
            "meta": {
              "docs": {
                "description": "Disallow usage of findDOMNode",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md"
              },
              "messages": {
                "noFindDOMNode": "Do not use findDOMNode. It doesn’t work with function components and is deprecated in StrictMode. See https://reactjs.org/docs/react-dom.html#finddomnode"
              },
              "schema": []
            }
          },
          "no-is-mounted": {
            "meta": {
              "docs": {
                "description": "Disallow usage of isMounted",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md"
              },
              "messages": {
                "noIsMounted": "Do not use isMounted"
              },
              "schema": []
            }
          },
          "no-multi-comp": {
            "meta": {
              "docs": {
                "description": "Disallow multiple component definition per file",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md"
              },
              "messages": {
                "onlyOneComponent": "Declare only one React component per file"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreStateless": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-namespace": {
            "meta": {
              "docs": {
                "description": "Enforce that namespaces are not used in React elements",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md"
              },
              "messages": {
                "noNamespace": "React component {{name}} must not be in a namespace, as React does not support them"
              },
              "schema": []
            }
          },
          "no-set-state": {
            "meta": {
              "docs": {
                "description": "Disallow usage of setState",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md"
              },
              "messages": {
                "noSetState": "Do not use setState"
              },
              "schema": []
            }
          },
          "no-string-refs": {
            "meta": {
              "docs": {
                "description": "Disallow using string references",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md"
              },
              "messages": {
                "thisRefsDeprecated": "Using this.refs is deprecated.",
                "stringInRefDeprecated": "Using string literals in ref attributes is deprecated."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "noTemplateLiterals": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-redundant-should-component-update": {
            "meta": {
              "docs": {
                "description": "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md"
              },
              "messages": {
                "noShouldCompUpdate": "{{component}} does not need shouldComponentUpdate when extending React.PureComponent."
              },
              "schema": []
            }
          },
          "no-render-return-value": {
            "meta": {
              "docs": {
                "description": "Disallow usage of the return value of ReactDOM.render",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md"
              },
              "messages": {
                "noReturnValue": "Do not depend on the return value from {{node}}.render"
              },
              "schema": []
            }
          },
          "no-this-in-sfc": {
            "meta": {
              "docs": {
                "description": "Disallow `this` from being used in stateless functional components",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md"
              },
              "messages": {
                "noThisInSFC": "Stateless functional components should not use `this`"
              },
              "schema": []
            }
          },
          "no-typos": {
            "meta": {
              "docs": {
                "description": "Disallow common typos",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md"
              },
              "messages": {
                "typoPropTypeChain": "Typo in prop type chain qualifier: {{name}}",
                "typoPropType": "Typo in declared prop type: {{name}}",
                "typoStaticClassProp": "Typo in static class property declaration",
                "typoPropDeclaration": "Typo in property declaration",
                "typoLifecycleMethod": "Typo in component lifecycle method declaration: {{actual}} should be {{expected}}",
                "staticLifecycleMethod": "Lifecycle method should be static: {{method}}",
                "noPropTypesBinding": "`'prop-types'` imported without a local `PropTypes` binding.",
                "noReactBinding": "`'react'` imported without a local `React` binding."
              },
              "schema": []
            }
          },
          "no-unescaped-entities": {
            "meta": {
              "hasSuggestions": true,
              "docs": {
                "description": "Disallow unescaped HTML entities from appearing in markup",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md"
              },
              "messages": {
                "unescapedEntity": "HTML entity, `{{entity}}` , must be escaped.",
                "unescapedEntityAlts": "`{{entity}}` can be escaped with {{alts}}.",
                "replaceWithAlt": "Replace with `{{alt}}`."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "forbid": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "char": {
                                "type": "string"
                              },
                              "alternatives": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-unknown-property": {
            "meta": {
              "docs": {
                "description": "Disallow usage of unknown DOM property",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md"
              },
              "fixable": "code",
              "messages": {
                "invalidPropOnTag": "Invalid property '{{name}}' found on tag '{{tagName}}', but it is only allowed on: {{allowedTags}}",
                "unknownPropWithStandardName": "Unknown property '{{name}}' found, use '{{standardName}}' instead",
                "unknownProp": "Unknown property '{{name}}' found",
                "dataLowercaseRequired": "React does not recognize data-* props with uppercase characters on a DOM element. Found '{{name}}', use '{{lowerCaseName}}' instead"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignore": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "requireDataLowercase": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-unsafe": {
            "meta": {
              "docs": {
                "description": "Disallow usage of unsafe lifecycle methods",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md"
              },
              "messages": {
                "unsafeMethod": "{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "checkAliases": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-unstable-nested-components": {
            "meta": {
              "docs": {
                "description": "Disallow creating unstable components inside components",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "customValidators": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "allowAsProps": {
                      "type": "boolean"
                    },
                    "propNamePattern": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-unused-class-component-methods": {
            "meta": {
              "docs": {
                "description": "Disallow declaring unused methods of component class",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md"
              },
              "messages": {
                "unused": "Unused method or property \"{{name}}\"",
                "unusedWithClass": "Unused method or property \"{{name}}\" of class \"{{className}}\""
              },
              "schema": []
            }
          },
          "no-unused-prop-types": {
            "meta": {
              "docs": {
                "description": "Disallow definitions of unused propTypes",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md"
              },
              "messages": {
                "unusedPropType": "'{{name}}' PropType is defined but prop is never used"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignore": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    },
                    "customValidators": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "skipShapeProps": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-unused-state": {
            "meta": {
              "docs": {
                "description": "Disallow definitions of unused state",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md"
              },
              "messages": {
                "unusedStateField": "Unused state field: '{{name}}'"
              },
              "schema": []
            }
          },
          "no-object-type-as-default-prop": {
            "meta": {
              "docs": {
                "description": "Disallow usage of referential-type variables as default param in functional component",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-object-type-as-default-prop.md"
              },
              "messages": {
                "forbiddenTypeDefaultParam": "{{propName}} has a/an {{forbiddenType}} as default prop. This could lead to potential infinite render loop in React. Use a variable reference instead of {{forbiddenType}}."
              }
            }
          },
          "no-will-update-set-state": {
            "meta": {
              "docs": {
                "description": "Disallow usage of setState in componentWillUpdate",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md"
              },
              "messages": "[Circular Reference]",
              "schema": [
                {
                  "enum": [
                    "disallow-in-func"
                  ]
                }
              ]
            }
          },
          "prefer-es6-class": {
            "meta": {
              "docs": {
                "description": "Enforce ES5 or ES6 class for React Components",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md"
              },
              "messages": {
                "shouldUseES6Class": "Component should use es6 class instead of createClass",
                "shouldUseCreateClass": "Component should use createClass instead of es6 class"
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ]
            }
          },
          "prefer-exact-props": {
            "meta": {
              "docs": {
                "description": "Prefer exact proptype definitions",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md"
              },
              "messages": {
                "propTypes": "Component propTypes should be exact by using {{exactPropWrappers}}.",
                "flow": "Component flow props should be set with exact objects."
              },
              "schema": []
            }
          },
          "prefer-read-only-props": {
            "meta": {
              "docs": {
                "description": "Enforce that props are read-only",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md"
              },
              "fixable": "code",
              "messages": {
                "readOnlyProp": "Prop '{{name}}' should be read-only."
              },
              "schema": []
            }
          },
          "prefer-stateless-function": {
            "meta": {
              "docs": {
                "description": "Enforce stateless components to be written as a pure function",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md"
              },
              "messages": {
                "componentShouldBePure": "Component should be written as a pure function"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignorePureComponents": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "prop-types": {
            "meta": {
              "docs": {
                "description": "Disallow missing props validation in a React component definition",
                "category": "Best Practices",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md"
              },
              "messages": {
                "missingPropType": "'{{name}}' is missing in props validation"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignore": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "customValidators": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "skipUndeclared": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "react-in-jsx-scope": {
            "meta": {
              "docs": {
                "description": "Disallow missing React when using JSX",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md"
              },
              "messages": {
                "notInScope": "'{{name}}' must be in scope when using JSX"
              },
              "schema": []
            }
          },
          "require-default-props": {
            "meta": {
              "docs": {
                "description": "Enforce a defaultProps definition for every prop that is not a required prop",
                "category": "Best Practices",
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md"
              },
              "messages": {
                "noDefaultWithRequired": "propType \"{{name}}\" is required and should not have a defaultProps declaration.",
                "shouldHaveDefault": "propType \"{{name}}\" is not required, but has no corresponding defaultProps declaration.",
                "noDefaultPropsWithFunction": "Don’t use defaultProps with function components.",
                "shouldAssignObjectDefault": "propType \"{{name}}\" is not required, but has no corresponding default argument value.",
                "destructureInSignature": "Must destructure props in the function signature to initialize an optional prop."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "forbidDefaultForRequired": {
                      "type": "boolean"
                    },
                    "classes": {
                      "enum": [
                        "defaultProps",
                        "ignore"
                      ]
                    },
                    "functions": {
                      "enum": [
                        "defaultArguments",
                        "defaultProps",
                        "ignore"
                      ]
                    },
                    "ignoreFunctionalComponents": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "require-optimization": {
            "meta": {
              "docs": {
                "description": "Enforce React components to have a shouldComponentUpdate method",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md"
              },
              "messages": {
                "noShouldComponentUpdate": "Component is not optimized. Please add a shouldComponentUpdate method."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowDecorators": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "require-render-return": {
            "meta": {
              "docs": {
                "description": "Enforce ES5 or ES6 class for returning value in render function",
                "category": "Possible Errors",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md"
              },
              "messages": {
                "noRenderReturn": "Your render method should have a return statement"
              },
              "schema": []
            }
          },
          "self-closing-comp": {
            "meta": {
              "docs": {
                "description": "Disallow extra closing tags for components without children",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md"
              },
              "fixable": "code",
              "messages": {
                "notSelfClosing": "Empty components are self-closing"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "component": {
                      "default": true,
                      "type": "boolean"
                    },
                    "html": {
                      "default": true,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "sort-comp": {
            "meta": {
              "docs": {
                "description": "Enforce component methods order",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md"
              },
              "messages": {
                "unsortedProps": "{{propA}} should be placed {{position}} {{propB}}"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "order": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "groups": {
                      "type": "object",
                      "patternProperties": {
                        "^.*$": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "defaultConfig": {
              "order": [
                "static-methods",
                "lifecycle",
                "everything-else",
                "render"
              ],
              "groups": {
                "lifecycle": [
                  "displayName",
                  "propTypes",
                  "contextTypes",
                  "childContextTypes",
                  "mixins",
                  "statics",
                  "defaultProps",
                  "constructor",
                  "getDefaultProps",
                  "state",
                  "getInitialState",
                  "getChildContext",
                  "getDerivedStateFromProps",
                  "componentWillMount",
                  "UNSAFE_componentWillMount",
                  "componentDidMount",
                  "componentWillReceiveProps",
                  "UNSAFE_componentWillReceiveProps",
                  "shouldComponentUpdate",
                  "componentWillUpdate",
                  "UNSAFE_componentWillUpdate",
                  "getSnapshotBeforeUpdate",
                  "componentDidUpdate",
                  "componentDidCatch",
                  "componentWillUnmount"
                ]
              }
            }
          },
          "sort-default-props": {
            "meta": {
              "docs": {
                "description": "Enforce defaultProps declarations alphabetical sorting",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-default-props.md"
              },
              "messages": {
                "propsNotSorted": "Default prop types declarations should be sorted alphabetically"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "sort-prop-types": {
            "meta": {
              "docs": {
                "description": "Enforce propTypes declarations alphabetical sorting",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md"
              },
              "fixable": "code",
              "messages": {
                "requiredPropsFirst": "Required prop types must be listed before all other prop types",
                "callbackPropsLast": "Callback prop types must be listed after all other prop types",
                "propsNotSorted": "Prop types declarations should be sorted alphabetically"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "requiredFirst": {
                      "type": "boolean"
                    },
                    "callbacksLast": {
                      "type": "boolean"
                    },
                    "ignoreCase": {
                      "type": "boolean"
                    },
                    "noSortAlphabetically": {
                      "type": "boolean"
                    },
                    "sortShapeProp": {
                      "type": "boolean"
                    },
                    "checkTypes": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "state-in-constructor": {
            "meta": {
              "docs": {
                "description": "Enforce class component state initialization style",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md"
              },
              "messages": {
                "stateInitConstructor": "State initialization should be in a constructor",
                "stateInitClassProp": "State initialization should be in a class property"
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ]
            }
          },
          "static-property-placement": {
            "meta": {
              "docs": {
                "description": "Enforces where React component static properties should be positioned.",
                "category": "Stylistic Issues",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md"
              },
              "fixable": null,
              "messages": {
                "notStaticClassProp": "'{{name}}' should be declared as a static class property.",
                "notGetterClassFunc": "'{{name}}' should be declared as a static getter class function.",
                "declareOutsideClass": "'{{name}}' should be declared outside the class body."
              },
              "schema": [
                {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "propTypes": {
                      "enum": "[Circular Reference]"
                    },
                    "defaultProps": {
                      "enum": "[Circular Reference]"
                    },
                    "childContextTypes": {
                      "enum": "[Circular Reference]"
                    },
                    "contextTypes": {
                      "enum": "[Circular Reference]"
                    },
                    "contextType": {
                      "enum": "[Circular Reference]"
                    },
                    "displayName": {
                      "enum": "[Circular Reference]"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "style-prop-object": {
            "meta": {
              "docs": {
                "description": "Enforce style prop value is an object",
                "category": "Possible Errors",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md"
              },
              "messages": {
                "stylePropNotObject": "Style prop value must be an object"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allow": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "additionalItems": false,
                      "uniqueItems": true
                    }
                  }
                }
              ]
            }
          },
          "void-dom-elements-no-children": {
            "meta": {
              "docs": {
                "description": "Disallow void DOM elements (e.g. `<img />`, `<br />`) from receiving children",
                "category": "Best Practices",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md"
              },
              "messages": {
                "noChildrenInVoidEl": "Void DOM element <{{element}} /> cannot receive children."
              },
              "schema": []
            }
          }
        },
        "configs": {
          "recommended": {
            "plugins": [
              "react"
            ],
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true
              }
            },
            "rules": {
              "react/display-name": 2,
              "react/jsx-key": 2,
              "react/jsx-no-comment-textnodes": 2,
              "react/jsx-no-duplicate-props": 2,
              "react/jsx-no-target-blank": 2,
              "react/jsx-no-undef": 2,
              "react/jsx-uses-react": 2,
              "react/jsx-uses-vars": 2,
              "react/no-children-prop": 2,
              "react/no-danger-with-children": 2,
              "react/no-deprecated": 2,
              "react/no-direct-mutation-state": 2,
              "react/no-find-dom-node": 2,
              "react/no-is-mounted": 2,
              "react/no-render-return-value": 2,
              "react/no-string-refs": 2,
              "react/no-unescaped-entities": 2,
              "react/no-unknown-property": 2,
              "react/no-unsafe": 0,
              "react/prop-types": 2,
              "react/react-in-jsx-scope": 2,
              "react/require-render-return": 2
            }
          },
          "all": {
            "plugins": "[Circular Reference]",
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true
              }
            },
            "rules": {
              "react/boolean-prop-naming": 2,
              "react/button-has-type": 2,
              "react/checked-requires-onchange-or-readonly": 2,
              "react/default-props-match-prop-types": 2,
              "react/destructuring-assignment": 2,
              "react/display-name": 2,
              "react/forbid-component-props": 2,
              "react/forbid-dom-props": 2,
              "react/forbid-elements": 2,
              "react/forbid-foreign-prop-types": 2,
              "react/forbid-prop-types": 2,
              "react/forward-ref-uses-ref": 2,
              "react/function-component-definition": 2,
              "react/hook-use-state": 2,
              "react/iframe-missing-sandbox": 2,
              "react/jsx-boolean-value": 2,
              "react/jsx-child-element-spacing": 2,
              "react/jsx-closing-bracket-location": 2,
              "react/jsx-closing-tag-location": 2,
              "react/jsx-curly-spacing": 2,
              "react/jsx-curly-newline": 2,
              "react/jsx-equals-spacing": 2,
              "react/jsx-filename-extension": 2,
              "react/jsx-first-prop-new-line": 2,
              "react/jsx-handler-names": 2,
              "react/jsx-indent": 2,
              "react/jsx-indent-props": 2,
              "react/jsx-key": 2,
              "react/jsx-max-depth": 2,
              "react/jsx-max-props-per-line": 2,
              "react/jsx-newline": 2,
              "react/jsx-no-bind": 2,
              "react/jsx-no-comment-textnodes": 2,
              "react/jsx-no-constructed-context-values": 2,
              "react/jsx-no-duplicate-props": 2,
              "react/jsx-no-leaked-render": 2,
              "react/jsx-no-literals": 2,
              "react/jsx-no-script-url": 2,
              "react/jsx-no-target-blank": 2,
              "react/jsx-no-useless-fragment": 2,
              "react/jsx-one-expression-per-line": 2,
              "react/jsx-no-undef": 2,
              "react/jsx-curly-brace-presence": 2,
              "react/jsx-pascal-case": 2,
              "react/jsx-fragments": 2,
              "react/jsx-props-no-multi-spaces": 2,
              "react/jsx-props-no-spreading": 2,
              "react/jsx-props-no-spread-multi": 2,
              "react/jsx-sort-props": 2,
              "react/jsx-tag-spacing": 2,
              "react/jsx-uses-react": 2,
              "react/jsx-uses-vars": 2,
              "react/jsx-wrap-multilines": 2,
              "react/no-invalid-html-attribute": 2,
              "react/no-access-state-in-setstate": 2,
              "react/no-adjacent-inline-elements": 2,
              "react/no-array-index-key": 2,
              "react/no-arrow-function-lifecycle": 2,
              "react/no-children-prop": 2,
              "react/no-danger": 2,
              "react/no-danger-with-children": 2,
              "react/no-deprecated": 2,
              "react/no-did-mount-set-state": 2,
              "react/no-did-update-set-state": 2,
              "react/no-direct-mutation-state": 2,
              "react/no-find-dom-node": 2,
              "react/no-is-mounted": 2,
              "react/no-multi-comp": 2,
              "react/no-namespace": 2,
              "react/no-set-state": 2,
              "react/no-string-refs": 2,
              "react/no-redundant-should-component-update": 2,
              "react/no-render-return-value": 2,
              "react/no-this-in-sfc": 2,
              "react/no-typos": 2,
              "react/no-unescaped-entities": 2,
              "react/no-unknown-property": 2,
              "react/no-unsafe": 2,
              "react/no-unstable-nested-components": 2,
              "react/no-unused-class-component-methods": 2,
              "react/no-unused-prop-types": 2,
              "react/no-unused-state": 2,
              "react/no-object-type-as-default-prop": 2,
              "react/no-will-update-set-state": 2,
              "react/prefer-es6-class": 2,
              "react/prefer-exact-props": 2,
              "react/prefer-read-only-props": 2,
              "react/prefer-stateless-function": 2,
              "react/prop-types": 2,
              "react/react-in-jsx-scope": 2,
              "react/require-default-props": 2,
              "react/require-optimization": 2,
              "react/require-render-return": 2,
              "react/self-closing-comp": 2,
              "react/sort-comp": 2,
              "react/sort-default-props": 2,
              "react/sort-prop-types": 2,
              "react/state-in-constructor": 2,
              "react/static-property-placement": 2,
              "react/style-prop-object": 2,
              "react/void-dom-elements-no-children": 2
            }
          },
          "jsx-runtime": {
            "plugins": "[Circular Reference]",
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true
              },
              "jsxPragma": null
            },
            "rules": {
              "react/react-in-jsx-scope": 0,
              "react/jsx-uses-react": 0
            }
          },
          "flat": {
            "recommended": {
              "plugins": {
                "react": "[Circular Reference]"
              },
              "rules": "[Circular Reference]",
              "languageOptions": {
                "parserOptions": "[Circular Reference]"
              }
            },
            "all": {
              "plugins": {
                "react": "[Circular Reference]"
              },
              "rules": "[Circular Reference]",
              "languageOptions": {
                "parserOptions": "[Circular Reference]"
              }
            },
            "jsx-runtime": {
              "plugins": {
                "react": "[Circular Reference]"
              },
              "rules": "[Circular Reference]",
              "languageOptions": {
                "parserOptions": "[Circular Reference]"
              }
            }
          }
        }
      },
      "jsx-a11y": {
        "meta": {
          "name": "eslint-plugin-jsx-a11y",
          "version": "6.10.2"
        },
        "rules": {
          "accessible-emoji": {
            "meta": {
              "docs": {
                "description": "Enforce emojis are wrapped in `<span>` and provide screen reader access.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md"
              },
              "deprecated": true,
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "alt-text": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
                "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "elements": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "additionalItems": false
                    },
                    "img": "[Circular Reference]",
                    "object": "[Circular Reference]",
                    "area": "[Circular Reference]",
                    "input[type=\"image\"]": "[Circular Reference]"
                  }
                }
              ]
            }
          },
          "anchor-ambiguous-text": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-ambiguous-text.md",
                "description": "Enforce `<a>` text to not exactly match \"click here\", \"here\", \"link\", or \"a link\"."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "words": "[Circular Reference]"
                  }
                }
              ]
            }
          },
          "anchor-has-content": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
                "description": "Enforce all anchors to contain accessible content."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "components": "[Circular Reference]"
                  }
                }
              ]
            }
          },
          "anchor-is-valid": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
                "description": "Enforce all anchors are valid, navigable elements."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "components": "[Circular Reference]",
                    "specialLink": "[Circular Reference]",
                    "aspects": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "noHref",
                          "invalidHref",
                          "preferButton"
                        ]
                      },
                      "uniqueItems": true,
                      "additionalItems": false,
                      "minItems": 1
                    }
                  }
                }
              ]
            }
          },
          "aria-activedescendant-has-tabindex": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
                "description": "Enforce elements with aria-activedescendant are tabbable."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "aria-props": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
                "description": "Enforce all `aria-*` props are valid."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "aria-proptypes": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
                "description": "Enforce ARIA state and property values are valid."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "aria-role": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
                "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowedInvalidRoles": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "ignoreNonDOM": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ]
            }
          },
          "aria-unsupported-elements": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
                "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "autocomplete-valid": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
                "description": "Enforce that autocomplete attributes are used correctly."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "inputComponents": "[Circular Reference]"
                  }
                }
              ]
            }
          },
          "click-events-have-key-events": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
                "description": "Enforce a clickable non-interactive element has at least one keyboard event listener."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "control-has-associated-label": {
            "meta": {
              "docs": {
                "description": "Enforce that a control (an interactive element) has a text label.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "labelAttributes": "[Circular Reference]",
                    "controlComponents": "[Circular Reference]",
                    "ignoreElements": "[Circular Reference]",
                    "ignoreRoles": "[Circular Reference]",
                    "depth": {
                      "description": "JSX tree depth limit to check for accessible label",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          },
          "heading-has-content": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
                "description": "Enforce heading (`h1`, `h2`, etc) elements contain accessible content."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "components": "[Circular Reference]"
                  }
                }
              ]
            }
          },
          "html-has-lang": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
                "description": "Enforce `<html>` element has `lang` prop."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "iframe-has-title": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
                "description": "Enforce iframe elements have a title attribute."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "img-redundant-alt": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
                "description": "Enforce `<img>` alt prop does not contain the word \"image\", \"picture\", or \"photo\"."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "components": "[Circular Reference]",
                    "words": "[Circular Reference]"
                  }
                }
              ]
            }
          },
          "interactive-supports-focus": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
                "description": "Enforce that elements with interactive handlers like `onClick` must be focusable."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "tabbable": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "button",
                          "checkbox",
                          "columnheader",
                          "combobox",
                          "grid",
                          "gridcell",
                          "link",
                          "listbox",
                          "menu",
                          "menubar",
                          "menuitem",
                          "menuitemcheckbox",
                          "menuitemradio",
                          "option",
                          "progressbar",
                          "radio",
                          "radiogroup",
                          "row",
                          "rowheader",
                          "scrollbar",
                          "searchbox",
                          "slider",
                          "spinbutton",
                          "switch",
                          "tab",
                          "tablist",
                          "textbox",
                          "tree",
                          "treegrid",
                          "treeitem",
                          "doc-backlink",
                          "doc-biblioref",
                          "doc-glossref",
                          "doc-noteref"
                        ]
                      },
                      "uniqueItems": true,
                      "additionalItems": false,
                      "minItems": 0
                    }
                  }
                }
              ]
            }
          },
          "label-has-associated-control": {
            "meta": {
              "docs": {
                "description": "Enforce that a `label` tag has a text label and an associated control.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "labelComponents": "[Circular Reference]",
                    "labelAttributes": "[Circular Reference]",
                    "controlComponents": "[Circular Reference]",
                    "assert": {
                      "description": "Assert that the label has htmlFor, a nested label, both or either",
                      "type": "string",
                      "enum": [
                        "htmlFor",
                        "nesting",
                        "both",
                        "either"
                      ]
                    },
                    "depth": {
                      "description": "JSX tree depth limit to check for accessible label",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          },
          "label-has-for": {
            "meta": {
              "deprecated": true,
              "replacedBy": [
                "label-has-associated-control"
              ],
              "docs": {
                "description": "Enforce that `<label>` elements have the `htmlFor` prop.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "components": "[Circular Reference]",
                    "required": {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "nesting",
                            "id"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "some": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": "[Circular Reference]"
                              },
                              "uniqueItems": true,
                              "additionalItems": false,
                              "minItems": 0
                            }
                          },
                          "required": [
                            "some"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "every": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": "[Circular Reference]"
                              },
                              "uniqueItems": true,
                              "additionalItems": false,
                              "minItems": 0
                            }
                          },
                          "required": [
                            "every"
                          ]
                        }
                      ]
                    },
                    "allowChildren": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "lang": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
                "description": "Enforce lang attribute has a valid value."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "media-has-caption": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
                "description": "Enforces that `<audio>` and `<video>` elements must have a `<track>` for captions."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "audio": "[Circular Reference]",
                    "video": "[Circular Reference]",
                    "track": "[Circular Reference]"
                  }
                }
              ]
            }
          },
          "mouse-events-have-key-events": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
                "description": "Enforce that `onMouseOver`/`onMouseOut` are accompanied by `onFocus`/`onBlur` for keyboard-only users."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "hoverInHandlers": {
                      "type": "array",
                      "items": "[Circular Reference]",
                      "uniqueItems": true,
                      "additionalItems": false,
                      "description": "An array of events that need to be accompanied by `onFocus`"
                    },
                    "hoverOutHandlers": {
                      "type": "array",
                      "items": "[Circular Reference]",
                      "uniqueItems": true,
                      "additionalItems": false,
                      "description": "An array of events that need to be accompanied by `onBlur`"
                    }
                  }
                }
              ]
            }
          },
          "no-access-key": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
                "description": "Enforce that the `accessKey` prop is not used on any element to avoid complications with keyboard commands used by a screen reader."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "no-aria-hidden-on-focusable": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-aria-hidden-on-focusable.md",
                "description": "Disallow `aria-hidden=\"true\"` from being set on focusable elements."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "no-autofocus": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
                "description": "Enforce autoFocus prop is not used."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreNonDOM": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ]
            }
          },
          "no-distracting-elements": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
                "description": "Enforce distracting elements are not used."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "elements": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "marquee",
                          "blink"
                        ]
                      },
                      "uniqueItems": true,
                      "additionalItems": false,
                      "minItems": 0
                    }
                  }
                }
              ]
            }
          },
          "no-interactive-element-to-noninteractive-role": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
                "description": "Interactive elements should not be assigned non-interactive roles."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  }
                }
              ]
            }
          },
          "no-noninteractive-element-interactions": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
                "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "handlers": "[Circular Reference]"
                  }
                }
              ]
            }
          },
          "no-noninteractive-element-to-interactive-role": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
                "description": "Non-interactive elements should not be assigned interactive roles."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  }
                }
              ]
            }
          },
          "no-noninteractive-tabindex": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
                "description": "`tabIndex` should only be declared on interactive elements."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "roles": {
                      "type": "array",
                      "items": "[Circular Reference]",
                      "uniqueItems": true,
                      "additionalItems": false,
                      "description": "An array of ARIA roles"
                    },
                    "tags": {
                      "type": "array",
                      "items": "[Circular Reference]",
                      "uniqueItems": true,
                      "additionalItems": false,
                      "description": "An array of HTML tag names"
                    }
                  }
                }
              ]
            }
          },
          "no-onchange": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
                "description": "Enforce usage of `onBlur` over `onChange` on select menus for accessibility."
              },
              "deprecated": true,
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "no-redundant-roles": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
                "description": "Enforce explicit role property is not the same as implicit/default role property on element."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  }
                }
              ]
            }
          },
          "no-static-element-interactions": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
                "description": "Enforce that non-interactive, visible elements (such as `<div>`) that have click handlers use the role attribute."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "handlers": "[Circular Reference]"
                  }
                }
              ]
            }
          },
          "prefer-tag-over-role": {
            "meta": {
              "docs": {
                "description": "Enforces using semantic DOM elements over the ARIA `role` property.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/prefer-tag-over-role.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "role-has-required-aria-props": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
                "description": "Enforce that elements with ARIA roles must have all required attributes for that role."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "role-supports-aria-props": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
                "description": "Enforce that elements with explicit or implicit roles defined contain only `aria-*` properties supported by that `role`."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "scope": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
                "description": "Enforce `scope` prop is only used on `<th>` elements."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          },
          "tabindex-no-positive": {
            "meta": {
              "docs": {
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
                "description": "Enforce `tabIndex` value is not greater than zero."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {}
                }
              ]
            }
          }
        },
        "configs": {
          "recommended": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true
              }
            },
            "plugins": [
              "jsx-a11y"
            ],
            "rules": {
              "jsx-a11y/alt-text": "error",
              "jsx-a11y/anchor-ambiguous-text": "off",
              "jsx-a11y/anchor-has-content": "error",
              "jsx-a11y/anchor-is-valid": "error",
              "jsx-a11y/aria-activedescendant-has-tabindex": "error",
              "jsx-a11y/aria-props": "error",
              "jsx-a11y/aria-proptypes": "error",
              "jsx-a11y/aria-role": "error",
              "jsx-a11y/aria-unsupported-elements": "error",
              "jsx-a11y/autocomplete-valid": "error",
              "jsx-a11y/click-events-have-key-events": "error",
              "jsx-a11y/control-has-associated-label": [
                "off",
                {
                  "ignoreElements": [
                    "audio",
                    "canvas",
                    "embed",
                    "input",
                    "textarea",
                    "tr",
                    "video"
                  ],
                  "ignoreRoles": [
                    "grid",
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "row",
                    "tablist",
                    "toolbar",
                    "tree",
                    "treegrid"
                  ],
                  "includeRoles": [
                    "alert",
                    "dialog"
                  ]
                }
              ],
              "jsx-a11y/heading-has-content": "error",
              "jsx-a11y/html-has-lang": "error",
              "jsx-a11y/iframe-has-title": "error",
              "jsx-a11y/img-redundant-alt": "error",
              "jsx-a11y/interactive-supports-focus": [
                "error",
                {
                  "tabbable": [
                    "button",
                    "checkbox",
                    "link",
                    "searchbox",
                    "spinbutton",
                    "switch",
                    "textbox"
                  ]
                }
              ],
              "jsx-a11y/label-has-associated-control": "error",
              "jsx-a11y/label-has-for": "off",
              "jsx-a11y/media-has-caption": "error",
              "jsx-a11y/mouse-events-have-key-events": "error",
              "jsx-a11y/no-access-key": "error",
              "jsx-a11y/no-autofocus": "error",
              "jsx-a11y/no-distracting-elements": "error",
              "jsx-a11y/no-interactive-element-to-noninteractive-role": [
                "error",
                {
                  "tr": [
                    "none",
                    "presentation"
                  ],
                  "canvas": [
                    "img"
                  ]
                }
              ],
              "jsx-a11y/no-noninteractive-element-interactions": [
                "error",
                {
                  "handlers": [
                    "onClick",
                    "onError",
                    "onLoad",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp"
                  ],
                  "alert": [
                    "onKeyUp",
                    "onKeyDown",
                    "onKeyPress"
                  ],
                  "body": [
                    "onError",
                    "onLoad"
                  ],
                  "dialog": [
                    "onKeyUp",
                    "onKeyDown",
                    "onKeyPress"
                  ],
                  "iframe": [
                    "onError",
                    "onLoad"
                  ],
                  "img": [
                    "onError",
                    "onLoad"
                  ]
                }
              ],
              "jsx-a11y/no-noninteractive-element-to-interactive-role": [
                "error",
                {
                  "ul": [
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "tablist",
                    "tree",
                    "treegrid"
                  ],
                  "ol": [
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "tablist",
                    "tree",
                    "treegrid"
                  ],
                  "li": [
                    "menuitem",
                    "menuitemradio",
                    "menuitemcheckbox",
                    "option",
                    "row",
                    "tab",
                    "treeitem"
                  ],
                  "table": [
                    "grid"
                  ],
                  "td": [
                    "gridcell"
                  ],
                  "fieldset": [
                    "radiogroup",
                    "presentation"
                  ]
                }
              ],
              "jsx-a11y/no-noninteractive-tabindex": [
                "error",
                {
                  "tags": [],
                  "roles": [
                    "tabpanel"
                  ],
                  "allowExpressionValues": true
                }
              ],
              "jsx-a11y/no-redundant-roles": "error",
              "jsx-a11y/no-static-element-interactions": [
                "error",
                {
                  "allowExpressionValues": true,
                  "handlers": [
                    "onClick",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp"
                  ]
                }
              ],
              "jsx-a11y/role-has-required-aria-props": "error",
              "jsx-a11y/role-supports-aria-props": "error",
              "jsx-a11y/scope": "error",
              "jsx-a11y/tabindex-no-positive": "error"
            }
          },
          "strict": {
            "parserOptions": "[Circular Reference]",
            "plugins": [
              "jsx-a11y"
            ],
            "rules": {
              "jsx-a11y/alt-text": "error",
              "jsx-a11y/anchor-has-content": "error",
              "jsx-a11y/anchor-is-valid": "error",
              "jsx-a11y/aria-activedescendant-has-tabindex": "error",
              "jsx-a11y/aria-props": "error",
              "jsx-a11y/aria-proptypes": "error",
              "jsx-a11y/aria-role": "error",
              "jsx-a11y/aria-unsupported-elements": "error",
              "jsx-a11y/autocomplete-valid": "error",
              "jsx-a11y/click-events-have-key-events": "error",
              "jsx-a11y/control-has-associated-label": [
                "off",
                {
                  "ignoreElements": [
                    "audio",
                    "canvas",
                    "embed",
                    "input",
                    "textarea",
                    "tr",
                    "video"
                  ],
                  "ignoreRoles": [
                    "grid",
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "row",
                    "tablist",
                    "toolbar",
                    "tree",
                    "treegrid"
                  ],
                  "includeRoles": [
                    "alert",
                    "dialog"
                  ]
                }
              ],
              "jsx-a11y/heading-has-content": "error",
              "jsx-a11y/html-has-lang": "error",
              "jsx-a11y/iframe-has-title": "error",
              "jsx-a11y/img-redundant-alt": "error",
              "jsx-a11y/interactive-supports-focus": [
                "error",
                {
                  "tabbable": [
                    "button",
                    "checkbox",
                    "link",
                    "progressbar",
                    "searchbox",
                    "slider",
                    "spinbutton",
                    "switch",
                    "textbox"
                  ]
                }
              ],
              "jsx-a11y/label-has-for": "off",
              "jsx-a11y/label-has-associated-control": "error",
              "jsx-a11y/media-has-caption": "error",
              "jsx-a11y/mouse-events-have-key-events": "error",
              "jsx-a11y/no-access-key": "error",
              "jsx-a11y/no-autofocus": "error",
              "jsx-a11y/no-distracting-elements": "error",
              "jsx-a11y/no-interactive-element-to-noninteractive-role": "error",
              "jsx-a11y/no-noninteractive-element-interactions": [
                "error",
                {
                  "body": [
                    "onError",
                    "onLoad"
                  ],
                  "iframe": [
                    "onError",
                    "onLoad"
                  ],
                  "img": [
                    "onError",
                    "onLoad"
                  ]
                }
              ],
              "jsx-a11y/no-noninteractive-element-to-interactive-role": "error",
              "jsx-a11y/no-noninteractive-tabindex": "error",
              "jsx-a11y/no-redundant-roles": "error",
              "jsx-a11y/no-static-element-interactions": "error",
              "jsx-a11y/role-has-required-aria-props": "error",
              "jsx-a11y/role-supports-aria-props": "error",
              "jsx-a11y/scope": "error",
              "jsx-a11y/tabindex-no-positive": "error"
            }
          }
        },
        "flatConfigs": {
          "recommended": {
            "languageOptions": {
              "parserOptions": {
                "ecmaFeatures": {
                  "jsx": true
                }
              }
            },
            "name": "jsx-a11y/recommended",
            "plugins": {
              "jsx-a11y": {
                "meta": "[Circular Reference]",
                "rules": "[Circular Reference]"
              }
            },
            "rules": {
              "jsx-a11y/alt-text": "error",
              "jsx-a11y/anchor-ambiguous-text": "off",
              "jsx-a11y/anchor-has-content": "error",
              "jsx-a11y/anchor-is-valid": "error",
              "jsx-a11y/aria-activedescendant-has-tabindex": "error",
              "jsx-a11y/aria-props": "error",
              "jsx-a11y/aria-proptypes": "error",
              "jsx-a11y/aria-role": "error",
              "jsx-a11y/aria-unsupported-elements": "error",
              "jsx-a11y/autocomplete-valid": "error",
              "jsx-a11y/click-events-have-key-events": "error",
              "jsx-a11y/control-has-associated-label": "[Circular Reference]",
              "jsx-a11y/heading-has-content": "error",
              "jsx-a11y/html-has-lang": "error",
              "jsx-a11y/iframe-has-title": "error",
              "jsx-a11y/img-redundant-alt": "error",
              "jsx-a11y/interactive-supports-focus": "[Circular Reference]",
              "jsx-a11y/label-has-associated-control": "error",
              "jsx-a11y/label-has-for": "off",
              "jsx-a11y/media-has-caption": "error",
              "jsx-a11y/mouse-events-have-key-events": "error",
              "jsx-a11y/no-access-key": "error",
              "jsx-a11y/no-autofocus": "error",
              "jsx-a11y/no-distracting-elements": "error",
              "jsx-a11y/no-interactive-element-to-noninteractive-role": "[Circular Reference]",
              "jsx-a11y/no-noninteractive-element-interactions": "[Circular Reference]",
              "jsx-a11y/no-noninteractive-element-to-interactive-role": "[Circular Reference]",
              "jsx-a11y/no-noninteractive-tabindex": "[Circular Reference]",
              "jsx-a11y/no-redundant-roles": "error",
              "jsx-a11y/no-static-element-interactions": "[Circular Reference]",
              "jsx-a11y/role-has-required-aria-props": "error",
              "jsx-a11y/role-supports-aria-props": "error",
              "jsx-a11y/scope": "error",
              "jsx-a11y/tabindex-no-positive": "error"
            }
          },
          "strict": {
            "languageOptions": "[Circular Reference]",
            "name": "jsx-a11y/strict",
            "plugins": {
              "jsx-a11y": "[Circular Reference]"
            },
            "rules": {
              "jsx-a11y/alt-text": "error",
              "jsx-a11y/anchor-has-content": "error",
              "jsx-a11y/anchor-is-valid": "error",
              "jsx-a11y/aria-activedescendant-has-tabindex": "error",
              "jsx-a11y/aria-props": "error",
              "jsx-a11y/aria-proptypes": "error",
              "jsx-a11y/aria-role": "error",
              "jsx-a11y/aria-unsupported-elements": "error",
              "jsx-a11y/autocomplete-valid": "error",
              "jsx-a11y/click-events-have-key-events": "error",
              "jsx-a11y/control-has-associated-label": "[Circular Reference]",
              "jsx-a11y/heading-has-content": "error",
              "jsx-a11y/html-has-lang": "error",
              "jsx-a11y/iframe-has-title": "error",
              "jsx-a11y/img-redundant-alt": "error",
              "jsx-a11y/interactive-supports-focus": "[Circular Reference]",
              "jsx-a11y/label-has-for": "off",
              "jsx-a11y/label-has-associated-control": "error",
              "jsx-a11y/media-has-caption": "error",
              "jsx-a11y/mouse-events-have-key-events": "error",
              "jsx-a11y/no-access-key": "error",
              "jsx-a11y/no-autofocus": "error",
              "jsx-a11y/no-distracting-elements": "error",
              "jsx-a11y/no-interactive-element-to-noninteractive-role": "error",
              "jsx-a11y/no-noninteractive-element-interactions": "[Circular Reference]",
              "jsx-a11y/no-noninteractive-element-to-interactive-role": "error",
              "jsx-a11y/no-noninteractive-tabindex": "error",
              "jsx-a11y/no-redundant-roles": "error",
              "jsx-a11y/no-static-element-interactions": "error",
              "jsx-a11y/role-has-required-aria-props": "error",
              "jsx-a11y/role-supports-aria-props": "error",
              "jsx-a11y/scope": "error",
              "jsx-a11y/tabindex-no-positive": "error"
            }
          }
        }
      },
      "react-hooks": {
        "configs": {
          "recommended-legacy": {
            "plugins": [
              "react-hooks"
            ],
            "rules": {
              "react-hooks/rules-of-hooks": "error",
              "react-hooks/exhaustive-deps": "warn"
            }
          },
          "recommended": "[Circular Reference]",
          "recommended-latest": {
            "name": "react-hooks/recommended",
            "plugins": {
              "react-hooks": {
                "meta": {
                  "name": "eslint-plugin-react-hooks"
                },
                "rules": {
                  "rules-of-hooks": {
                    "meta": {
                      "type": "problem",
                      "docs": {
                        "description": "enforces the Rules of Hooks",
                        "recommended": true,
                        "url": "https://reactjs.org/docs/hooks-rules.html"
                      }
                    }
                  },
                  "exhaustive-deps": {
                    "meta": {
                      "type": "suggestion",
                      "docs": {
                        "description": "verifies the list of dependencies for Hooks like useEffect and similar",
                        "recommended": true,
                        "url": "https://github.com/facebook/react/issues/14920"
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "schema": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "enableDangerousAutofixThisMayCauseInfiniteLoops": false,
                          "properties": {
                            "additionalHooks": {
                              "type": "string"
                            },
                            "enableDangerousAutofixThisMayCauseInfiniteLoops": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "configs": "[Circular Reference]"
              }
            },
            "rules": "[Circular Reference]"
          }
        },
        "meta": "[Circular Reference]",
        "rules": "[Circular Reference]"
      },
      "react-compiler": {
        "configs": {
          "recommended": {
            "plugins": {
              "react-compiler": {
                "rules": {
                  "react-compiler": {
                    "meta": {
                      "type": "problem",
                      "docs": {
                        "description": "Surfaces diagnostics from React Forget",
                        "recommended": true
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "schema": [
                        {
                          "type": "object",
                          "additionalProperties": true
                        }
                      ]
                    }
                  }
                }
              }
            },
            "rules": {
              "react-compiler/react-compiler": "error"
            }
          }
        },
        "meta": {
          "name": "eslint-plugin-react-compiler"
        },
        "rules": {
          "react-compiler": "[Circular Reference]"
        }
      }
    },
    "rules": {
      "class-methods-use-this": [
        "error",
        {
          "exceptMethods": [
            "UNSAFE_componentWillMount",
            "UNSAFE_componentWillReceiveProps",
            "UNSAFE_componentWillUpdate",
            "componentDidCatch",
            "componentDidMount",
            "componentDidUpdate",
            "componentWillMount",
            "componentWillReceiveProps",
            "componentWillUnmount",
            "componentWillUpdate",
            "getChildContext",
            "getDefaultProps",
            "getInitialState",
            "getSnapshotBeforeUpdate",
            "render",
            "shouldComponentUpdate"
          ]
        }
      ],
      "react-compiler/react-compiler": "error",
      "react/display-name": [
        "off",
        {
          "ignoreTranspilerName": false
        }
      ],
      "react/forbid-prop-types": "off",
      "react/forbid-dom-props": [
        "off",
        {
          "forbid": []
        }
      ],
      "react/jsx-boolean-value": [
        "error",
        "always"
      ],
      "react/jsx-closing-bracket-location": [
        "error",
        "line-aligned"
      ],
      "react/jsx-closing-tag-location": "error",
      "react/jsx-curly-spacing": "off",
      "react/jsx-handler-names": [
        "error",
        {
          "eventHandlerPrefix": "handle",
          "eventHandlerPropPrefix": "on",
          "checkLocalVariables": true,
          "checkInlineFunction": false
        }
      ],
      "react/jsx-indent-props": "off",
      "react/jsx-key": [
        "error",
        {
          "checkFragmentShorthand": true,
          "checkKeyMustBeforeSpread": true,
          "warnOnDuplicates": true
        }
      ],
      "react/jsx-max-props-per-line": "off",
      "react/jsx-no-bind": [
        "error",
        {
          "ignoreRefs": true,
          "allowArrowFunctions": true,
          "allowFunctions": false,
          "allowBind": false,
          "ignoreDOMComponents": true
        }
      ],
      "react/jsx-no-duplicate-props": [
        "error",
        {
          "ignoreCase": true
        }
      ],
      "react/jsx-no-literals": [
        "off",
        {
          "noStrings": true
        }
      ],
      "react/jsx-no-undef": "error",
      "react/jsx-pascal-case": [
        "error",
        {
          "allowAllCaps": true,
          "ignore": []
        }
      ],
      "react/sort-prop-types": "off",
      "react/jsx-sort-prop-types": "off",
      "react/jsx-sort-props": [
        "error",
        {
          "ignoreCase": true,
          "callbacksLast": false,
          "shorthandFirst": false,
          "shorthandLast": false,
          "noSortAlphabetically": false,
          "reservedFirst": true
        }
      ],
      "react/jsx-uses-react": "off",
      "react/jsx-uses-vars": "error",
      "react/no-danger": "error",
      "react/no-deprecated": "error",
      "react/no-did-mount-set-state": "off",
      "react/no-did-update-set-state": "error",
      "react/no-will-update-set-state": "error",
      "react/no-direct-mutation-state": "off",
      "react/no-is-mounted": "error",
      "react/no-multi-comp": "off",
      "react/no-set-state": "off",
      "react/no-string-refs": "error",
      "react/no-unknown-property": "error",
      "react/prefer-es6-class": [
        "error",
        "always"
      ],
      "react/prefer-stateless-function": [
        "error",
        {
          "ignorePureComponents": true
        }
      ],
      "react/prop-types": "off",
      "react/react-in-jsx-scope": "off",
      "react/require-render-return": "error",
      "react/self-closing-comp": "error",
      "react/sort-comp": [
        "error",
        {
          "order": [
            "static-variables",
            "static-methods",
            "instance-variables",
            "lifecycle",
            "/^handle.+$/",
            "/^on.+$/",
            "getters",
            "setters",
            "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
            "instance-methods",
            "everything-else",
            "rendering"
          ],
          "groups": {
            "lifecycle": [
              "displayName",
              "propTypes",
              "contextTypes",
              "childContextTypes",
              "mixins",
              "statics",
              "defaultProps",
              "constructor",
              "getDefaultProps",
              "getInitialState",
              "state",
              "getChildContext",
              "getDerivedStateFromProps",
              "componentWillMount",
              "UNSAFE_componentWillMount",
              "componentDidMount",
              "componentWillReceiveProps",
              "UNSAFE_componentWillReceiveProps",
              "shouldComponentUpdate",
              "componentWillUpdate",
              "UNSAFE_componentWillUpdate",
              "getSnapshotBeforeUpdate",
              "componentDidUpdate",
              "componentDidCatch",
              "componentWillUnmount"
            ],
            "rendering": [
              "/^render.+$/",
              "render"
            ]
          }
        }
      ],
      "react/sort-default-props": [
        "error",
        {
          "ignoreCase": true
        }
      ],
      "react/jsx-wrap-multilines": [
        "error",
        {
          "declaration": "parens-new-line",
          "assignment": "parens-new-line",
          "return": "parens-new-line",
          "arrow": "parens-new-line",
          "condition": "parens-new-line",
          "logical": "parens-new-line",
          "prop": "parens-new-line"
        }
      ],
      "react/jsx-first-prop-new-line": [
        "error",
        "multiline-multiprop"
      ],
      "react/jsx-equals-spacing": [
        "error",
        "never"
      ],
      "react/jsx-indent": [
        "error",
        2
      ],
      "react/jsx-no-target-blank": [
        "error",
        {
          "enforceDynamicLinks": "always"
        }
      ],
      "react/jsx-filename-extension": [
        "error",
        {
          "extensions": [
            ".jsx",
            ".tsx"
          ]
        }
      ],
      "react/jsx-no-comment-textnodes": "error",
      "react/no-render-return-value": "error",
      "react/require-optimization": [
        "off",
        {
          "allowDecorators": []
        }
      ],
      "react/no-find-dom-node": "error",
      "react/forbid-component-props": [
        "off",
        {
          "forbid": []
        }
      ],
      "react/forbid-elements": [
        "off",
        {
          "forbid": []
        }
      ],
      "react/no-danger-with-children": "error",
      "react/no-unused-prop-types": "off",
      "react/style-prop-object": "error",
      "react/no-unescaped-entities": "error",
      "react/no-children-prop": "error",
      "react/jsx-tag-spacing": "off",
      "react/jsx-space-before-closing": [
        "off",
        "always"
      ],
      "react/no-array-index-key": "error",
      "react/require-default-props": "off",
      "react/forbid-foreign-prop-types": "off",
      "react/void-dom-elements-no-children": "error",
      "react/default-props-match-prop-types": "off",
      "react/no-redundant-should-component-update": "error",
      "react/no-unused-state": "error",
      "react/boolean-prop-naming": [
        "off",
        {
          "propTypeNames": [
            "bool",
            "mutuallyExclusiveTrueProps"
          ],
          "rule": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
          "message": ""
        }
      ],
      "react/no-typos": "error",
      "react/jsx-curly-brace-presence": [
        "error",
        {
          "props": "never",
          "children": "never"
        }
      ],
      "react/jsx-one-expression-per-line": [
        "off",
        {
          "allow": "single-child"
        }
      ],
      "react/destructuring-assignment": [
        "off",
        "always"
      ],
      "react/no-access-state-in-setstate": "error",
      "react/button-has-type": [
        "error",
        {
          "button": true,
          "submit": true,
          "reset": false
        }
      ],
      "react/jsx-child-element-spacing": "off",
      "react/no-this-in-sfc": "error",
      "react/jsx-max-depth": "off",
      "react/jsx-props-no-multi-spaces": "error",
      "react/no-unsafe": "off",
      "react/jsx-fragments": [
        "error",
        "syntax"
      ],
      "react/jsx-curly-newline": "off",
      "react/state-in-constructor": [
        "error",
        "never"
      ],
      "react/static-property-placement": [
        "error",
        "static public field"
      ],
      "react/jsx-props-no-spreading": "off",
      "react/prefer-read-only-props": "off",
      "react/jsx-no-script-url": [
        "error",
        [
          {
            "name": "Link",
            "props": [
              "to"
            ]
          }
        ]
      ],
      "react/jsx-no-useless-fragment": "error",
      "react/no-adjacent-inline-elements": "error",
      "react/function-component-definition": [
        "error",
        {
          "namedComponents": "arrow-function",
          "unnamedComponents": "arrow-function"
        }
      ],
      "react/jsx-newline": "off",
      "react/jsx-no-constructed-context-values": "error",
      "react/no-unstable-nested-components": [
        "error",
        {
          "allowAsProps": true
        }
      ],
      "react/no-namespace": "error",
      "react/prefer-exact-props": "error",
      "react/no-arrow-function-lifecycle": "error",
      "react/no-invalid-html-attribute": "error",
      "react/no-unused-class-component-methods": "error",
      "react/hook-use-state": "error",
      "react/iframe-missing-sandbox": "error",
      "react/jsx-no-leaked-render": "error",
      "react/checked-requires-onchange-or-readonly": "error",
      "react/no-object-type-as-default-prop": "off",
      "react/jsx-sort-default-props": "off",
      "react/forward-ref-uses-ref": "error",
      "react/jsx-props-no-spread-multi": "error",
      "jsx-a11y/accessible-emoji": "off",
      "jsx-a11y/alt-text": [
        "error",
        {
          "elements": [
            "img",
            "object",
            "area",
            "input[type=\"image\"]"
          ],
          "img": [],
          "object": [],
          "area": [],
          "input[type=\"image\"]": []
        }
      ],
      "jsx-a11y/anchor-has-content": [
        "error",
        {
          "components": []
        }
      ],
      "jsx-a11y/anchor-is-valid": [
        "error",
        {
          "components": [
            "Link"
          ],
          "specialLink": [
            "to"
          ],
          "aspects": [
            "noHref",
            "invalidHref",
            "preferButton"
          ]
        }
      ],
      "jsx-a11y/aria-activedescendant-has-tabindex": "error",
      "jsx-a11y/aria-props": "error",
      "jsx-a11y/aria-proptypes": "error",
      "jsx-a11y/aria-role": [
        "error",
        {
          "ignoreNonDOM": false
        }
      ],
      "jsx-a11y/aria-unsupported-elements": "error",
      "jsx-a11y/autocomplete-valid": [
        "off",
        {
          "inputComponents": []
        }
      ],
      "jsx-a11y/click-events-have-key-events": "error",
      "jsx-a11y/control-has-associated-label": [
        "error",
        {
          "labelAttributes": [
            "label"
          ],
          "controlComponents": [],
          "ignoreElements": [
            "audio",
            "canvas",
            "embed",
            "input",
            "textarea",
            "tr",
            "video"
          ],
          "ignoreRoles": [
            "grid",
            "listbox",
            "menu",
            "menubar",
            "radiogroup",
            "row",
            "tablist",
            "toolbar",
            "tree",
            "treegrid"
          ],
          "depth": 5
        }
      ],
      "jsx-a11y/heading-has-content": [
        "error",
        {
          "components": [
            ""
          ]
        }
      ],
      "jsx-a11y/html-has-lang": "error",
      "jsx-a11y/iframe-has-title": "error",
      "jsx-a11y/img-redundant-alt": "error",
      "jsx-a11y/interactive-supports-focus": "error",
      "jsx-a11y/label-has-associated-control": [
        "error",
        {
          "labelComponents": [],
          "labelAttributes": [],
          "controlComponents": [],
          "assert": "both",
          "depth": 25
        }
      ],
      "jsx-a11y/lang": "error",
      "jsx-a11y/media-has-caption": [
        "error",
        {
          "audio": [],
          "video": [],
          "track": []
        }
      ],
      "jsx-a11y/mouse-events-have-key-events": "error",
      "jsx-a11y/no-access-key": "error",
      "jsx-a11y/no-autofocus": [
        "error",
        {
          "ignoreNonDOM": true
        }
      ],
      "jsx-a11y/no-distracting-elements": [
        "error",
        {
          "elements": [
            "marquee",
            "blink"
          ]
        }
      ],
      "jsx-a11y/no-interactive-element-to-noninteractive-role": [
        "error",
        {
          "tr": [
            "none",
            "presentation"
          ]
        }
      ],
      "jsx-a11y/no-noninteractive-element-interactions": [
        "error",
        {
          "handlers": [
            "onClick",
            "onMouseDown",
            "onMouseUp",
            "onKeyPress",
            "onKeyDown",
            "onKeyUp"
          ]
        }
      ],
      "jsx-a11y/no-noninteractive-element-to-interactive-role": [
        "error",
        {
          "ul": [
            "listbox",
            "menu",
            "menubar",
            "radiogroup",
            "tablist",
            "tree",
            "treegrid"
          ],
          "ol": [
            "listbox",
            "menu",
            "menubar",
            "radiogroup",
            "tablist",
            "tree",
            "treegrid"
          ],
          "li": [
            "menuitem",
            "option",
            "row",
            "tab",
            "treeitem"
          ],
          "table": [
            "grid"
          ],
          "td": [
            "gridcell"
          ]
        }
      ],
      "jsx-a11y/no-noninteractive-tabindex": [
        "error",
        {
          "tags": [],
          "roles": [
            "tabpanel"
          ]
        }
      ],
      "jsx-a11y/no-onchange": "off",
      "jsx-a11y/no-redundant-roles": "error",
      "jsx-a11y/no-static-element-interactions": [
        "error",
        {
          "handlers": [
            "onClick",
            "onMouseDown",
            "onMouseUp",
            "onKeyPress",
            "onKeyDown",
            "onKeyUp"
          ]
        }
      ],
      "jsx-a11y/role-has-required-aria-props": "error",
      "jsx-a11y/role-supports-aria-props": "error",
      "jsx-a11y/scope": "error",
      "jsx-a11y/tabindex-no-positive": "error",
      "jsx-a11y/anchor-ambiguous-text": "error",
      "jsx-a11y/no-aria-hidden-on-focusable": "error",
      "jsx-a11y/prefer-tag-over-role": "off",
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "error"
    }
  }
]