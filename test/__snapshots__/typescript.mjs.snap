[
  {
    "languageOptions": {
      "parser": {
        "version": "8.28.0",
        "meta": {
          "name": "typescript-eslint/parser",
          "version": "8.28.0"
        }
      },
      "parserOptions": {
        "sourceType": "module",
        "project": "./tsconfig.json",
        "ecmaVersion": 2024
      },
      "globals": {
        "AggregateError": false,
        "Array": false,
        "ArrayBuffer": false,
        "Atomics": false,
        "BigInt": false,
        "BigInt64Array": false,
        "BigUint64Array": false,
        "Boolean": false,
        "DataView": false,
        "Date": false,
        "decodeURI": false,
        "decodeURIComponent": false,
        "encodeURI": false,
        "encodeURIComponent": false,
        "Error": false,
        "escape": false,
        "eval": false,
        "EvalError": false,
        "FinalizationRegistry": false,
        "Float32Array": false,
        "Float64Array": false,
        "Function": false,
        "globalThis": false,
        "Infinity": false,
        "Int16Array": false,
        "Int32Array": false,
        "Int8Array": false,
        "Intl": false,
        "isFinite": false,
        "isNaN": false,
        "JSON": false,
        "Map": false,
        "Math": false,
        "NaN": false,
        "Number": false,
        "Object": false,
        "parseFloat": false,
        "parseInt": false,
        "Promise": false,
        "Proxy": false,
        "RangeError": false,
        "ReferenceError": false,
        "Reflect": false,
        "RegExp": false,
        "Set": false,
        "SharedArrayBuffer": false,
        "String": false,
        "Symbol": false,
        "SyntaxError": false,
        "TypeError": false,
        "Uint16Array": false,
        "Uint32Array": false,
        "Uint8Array": false,
        "Uint8ClampedArray": false,
        "undefined": false,
        "unescape": false,
        "URIError": false,
        "WeakMap": false,
        "WeakRef": false,
        "WeakSet": false
      }
    },
    "plugins": {
      "@typescript-eslint": {
        "configs": {
          "all": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "class-methods-use-this": "off",
              "@typescript-eslint/class-methods-use-this": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "consistent-return": "off",
              "@typescript-eslint/consistent-return": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/consistent-type-exports": "error",
              "@typescript-eslint/consistent-type-imports": "error",
              "default-param-last": "off",
              "@typescript-eslint/default-param-last": "error",
              "dot-notation": "off",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/explicit-function-return-type": "error",
              "@typescript-eslint/explicit-member-accessibility": "error",
              "@typescript-eslint/explicit-module-boundary-types": "error",
              "init-declarations": "off",
              "@typescript-eslint/init-declarations": "error",
              "max-params": "off",
              "@typescript-eslint/max-params": "error",
              "@typescript-eslint/member-ordering": "error",
              "@typescript-eslint/method-signature-style": "error",
              "@typescript-eslint/naming-convention": "error",
              "no-array-constructor": "off",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "no-dupe-class-members": "off",
              "@typescript-eslint/no-dupe-class-members": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "no-empty-function": "off",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "no-implied-eval": "off",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-import-type-side-effects": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "no-invalid-this": "off",
              "@typescript-eslint/no-invalid-this": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "no-loop-func": "off",
              "@typescript-eslint/no-loop-func": "error",
              "no-magic-numbers": "off",
              "@typescript-eslint/no-magic-numbers": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "no-redeclare": "off",
              "@typescript-eslint/no-redeclare": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "no-restricted-imports": "off",
              "@typescript-eslint/no-restricted-imports": "error",
              "@typescript-eslint/no-restricted-types": "error",
              "no-shadow": "off",
              "@typescript-eslint/no-shadow": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
              "@typescript-eslint/no-unnecessary-qualifier": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-type-assertion": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "no-unused-expressions": "off",
              "@typescript-eslint/no-unused-expressions": "error",
              "no-unused-vars": "off",
              "@typescript-eslint/no-unused-vars": "error",
              "no-use-before-define": "off",
              "@typescript-eslint/no-use-before-define": "error",
              "no-useless-constructor": "off",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-useless-empty-export": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "no-throw-literal": "off",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/parameter-properties": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "prefer-destructuring": "off",
              "@typescript-eslint/prefer-destructuring": "error",
              "@typescript-eslint/prefer-enum-initializers": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "prefer-promise-reject-errors": "off",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-readonly": "error",
              "@typescript-eslint/prefer-readonly-parameter-types": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "@typescript-eslint/promise-function-async": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-array-sort-compare": "error",
              "require-await": "off",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "no-return-await": "off",
              "@typescript-eslint/return-await": "error",
              "@typescript-eslint/strict-boolean-expressions": "error",
              "@typescript-eslint/switch-exhaustiveness-check": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/typedef": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
            }
          },
          "base": {
            "parser": "@typescript-eslint/parser",
            "parserOptions": {
              "sourceType": "module"
            },
            "plugins": [
              "@typescript-eslint"
            ]
          },
          "disable-type-checked": {
            "parserOptions": {
              "program": null,
              "project": false,
              "projectService": false
            },
            "rules": {
              "@typescript-eslint/await-thenable": "off",
              "@typescript-eslint/consistent-return": "off",
              "@typescript-eslint/consistent-type-exports": "off",
              "@typescript-eslint/dot-notation": "off",
              "@typescript-eslint/naming-convention": "off",
              "@typescript-eslint/no-array-delete": "off",
              "@typescript-eslint/no-base-to-string": "off",
              "@typescript-eslint/no-confusing-void-expression": "off",
              "@typescript-eslint/no-deprecated": "off",
              "@typescript-eslint/no-duplicate-type-constituents": "off",
              "@typescript-eslint/no-floating-promises": "off",
              "@typescript-eslint/no-for-in-array": "off",
              "@typescript-eslint/no-implied-eval": "off",
              "@typescript-eslint/no-meaningless-void-operator": "off",
              "@typescript-eslint/no-misused-promises": "off",
              "@typescript-eslint/no-misused-spread": "off",
              "@typescript-eslint/no-mixed-enums": "off",
              "@typescript-eslint/no-redundant-type-constituents": "off",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
              "@typescript-eslint/no-unnecessary-condition": "off",
              "@typescript-eslint/no-unnecessary-qualifier": "off",
              "@typescript-eslint/no-unnecessary-template-expression": "off",
              "@typescript-eslint/no-unnecessary-type-arguments": "off",
              "@typescript-eslint/no-unnecessary-type-assertion": "off",
              "@typescript-eslint/no-unnecessary-type-parameters": "off",
              "@typescript-eslint/no-unsafe-argument": "off",
              "@typescript-eslint/no-unsafe-assignment": "off",
              "@typescript-eslint/no-unsafe-call": "off",
              "@typescript-eslint/no-unsafe-enum-comparison": "off",
              "@typescript-eslint/no-unsafe-member-access": "off",
              "@typescript-eslint/no-unsafe-return": "off",
              "@typescript-eslint/no-unsafe-type-assertion": "off",
              "@typescript-eslint/no-unsafe-unary-minus": "off",
              "@typescript-eslint/non-nullable-type-assertion-style": "off",
              "@typescript-eslint/only-throw-error": "off",
              "@typescript-eslint/prefer-destructuring": "off",
              "@typescript-eslint/prefer-find": "off",
              "@typescript-eslint/prefer-includes": "off",
              "@typescript-eslint/prefer-nullish-coalescing": "off",
              "@typescript-eslint/prefer-optional-chain": "off",
              "@typescript-eslint/prefer-promise-reject-errors": "off",
              "@typescript-eslint/prefer-readonly": "off",
              "@typescript-eslint/prefer-readonly-parameter-types": "off",
              "@typescript-eslint/prefer-reduce-type-parameter": "off",
              "@typescript-eslint/prefer-regexp-exec": "off",
              "@typescript-eslint/prefer-return-this-type": "off",
              "@typescript-eslint/prefer-string-starts-ends-with": "off",
              "@typescript-eslint/promise-function-async": "off",
              "@typescript-eslint/related-getter-setter-pairs": "off",
              "@typescript-eslint/require-array-sort-compare": "off",
              "@typescript-eslint/require-await": "off",
              "@typescript-eslint/restrict-plus-operands": "off",
              "@typescript-eslint/restrict-template-expressions": "off",
              "@typescript-eslint/return-await": "off",
              "@typescript-eslint/strict-boolean-expressions": "off",
              "@typescript-eslint/switch-exhaustiveness-check": "off",
              "@typescript-eslint/unbound-method": "off",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "off"
            }
          },
          "eslint-recommended": {
            "overrides": [
              {
                "files": [
                  "*.ts",
                  "*.tsx",
                  "*.mts",
                  "*.cts"
                ],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-symbol": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                }
              }
            ]
          },
          "recommended": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "@typescript-eslint/ban-ts-comment": "error",
              "no-array-constructor": "off",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "no-unused-expressions": "off",
              "@typescript-eslint/no-unused-expressions": "error",
              "no-unused-vars": "off",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error"
            }
          },
          "recommended-requiring-type-checking": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "no-array-constructor": "off",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "no-implied-eval": "off",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "no-unused-expressions": "off",
              "@typescript-eslint/no-unused-expressions": "error",
              "no-unused-vars": "off",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "no-throw-literal": "off",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "prefer-promise-reject-errors": "off",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "require-await": "off",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error"
            }
          },
          "recommended-type-checked": "[Circular Reference]",
          "recommended-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "no-implied-eval": "off",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "no-throw-literal": "off",
              "@typescript-eslint/only-throw-error": "error",
              "prefer-promise-reject-errors": "off",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "require-await": "off",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/unbound-method": "error"
            }
          },
          "strict": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10
                }
              ],
              "no-array-constructor": "off",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "no-unused-expressions": "off",
              "@typescript-eslint/no-unused-expressions": "error",
              "no-unused-vars": "off",
              "@typescript-eslint/no-unused-vars": "error",
              "no-useless-constructor": "off",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unified-signatures": "error"
            }
          },
          "strict-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10
                }
              ],
              "no-array-constructor": "off",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "no-implied-eval": "off",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "no-unused-expressions": "off",
              "@typescript-eslint/no-unused-expressions": "error",
              "no-unused-vars": "off",
              "@typescript-eslint/no-unused-vars": "error",
              "no-useless-constructor": "off",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "no-throw-literal": "off",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "prefer-promise-reject-errors": "off",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "require-await": "off",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false
                }
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false
                }
              ],
              "no-return-await": "off",
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only"
              ],
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
            }
          },
          "strict-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "no-implied-eval": "off",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "no-throw-literal": "off",
              "@typescript-eslint/only-throw-error": "error",
              "prefer-promise-reject-errors": "off",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "require-await": "off",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false
                }
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false
                }
              ],
              "no-return-await": "off",
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only"
              ],
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
            }
          },
          "stylistic": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "no-empty-function": "off",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error"
            }
          },
          "stylistic-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "dot-notation": "off",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "no-empty-function": "off",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error"
            }
          },
          "stylistic-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended"
            ],
            "rules": {
              "dot-notation": "off",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error"
            }
          }
        },
        "meta": {
          "name": "@typescript-eslint/eslint-plugin",
          "version": "8.28.0"
        },
        "rules": {
          "adjacent-overload-signatures": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require that function overload signatures be consecutive",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures"
              },
              "messages": {
                "adjacentSignature": "All {{name}} signatures should be adjacent."
              },
              "schema": []
            }
          },
          "array-type": {
            "defaultOptions": [
              {
                "default": "array"
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/array-type"
              },
              "fixable": "code",
              "messages": {
                "errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                "errorStringArrayReadonly": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}' instead.",
                "errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                "errorStringArraySimpleReadonly": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}' instead.",
                "errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
                "errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead."
              },
              "schema": [
                {
                  "type": "object",
                  "$defs": {
                    "arrayOption": {
                      "type": "string",
                      "enum": [
                        "array",
                        "generic",
                        "array-simple"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "properties": {
                    "default": {
                      "$ref": "#/items/0/$defs/arrayOption",
                      "description": "The array type expected for mutable cases."
                    },
                    "readonly": {
                      "$ref": "#/items/0/$defs/arrayOption",
                      "description": "The array type expected for readonly cases. If omitted, the value for `default` will be used."
                    }
                  }
                }
              ]
            }
          },
          "await-thenable": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow awaiting a value that is not a Thenable",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/await-thenable"
              },
              "hasSuggestions": true,
              "messages": {
                "await": "Unexpected `await` of a non-Promise (non-\"Thenable\") value.",
                "awaitUsingOfNonAsyncDisposable": "Unexpected `await using` of a value that is not async disposable.",
                "convertToOrdinaryFor": "Convert to an ordinary `for...of` loop.",
                "forAwaitOfNonAsyncIterable": "Unexpected `for await...of` of a value that is not async iterable.",
                "removeAwait": "Remove unnecessary `await`."
              },
              "schema": []
            }
          },
          "ban-ts-comment": {
            "defaultOptions": [
              {
                "minimumDescriptionLength": 3,
                "ts-check": false,
                "ts-expect-error": "allow-with-description",
                "ts-ignore": true,
                "ts-nocheck": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "minimumDescriptionLength": 10
                    }
                  ]
                },
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              },
              "hasSuggestions": true,
              "messages": {
                "replaceTsIgnoreWithTsExpectError": "Replace \"@ts-ignore\" with \"@ts-expect-error\".",
                "tsDirectiveComment": "Do not use \"@ts-{{directive}}\" because it alters compilation errors.",
                "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the \"@ts-{{directive}}\" directive must match the {{format}} format.",
                "tsDirectiveCommentRequiresDescription": "Include a description after the \"@ts-{{directive}}\" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
                "tsIgnoreInsteadOfExpectError": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free."
              },
              "schema": [
                {
                  "type": "object",
                  "$defs": {
                    "directiveConfigSchema": {
                      "oneOf": [
                        {
                          "type": "boolean",
                          "default": true
                        },
                        {
                          "type": "string",
                          "enum": [
                            "allow-with-description"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "descriptionFormat": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "properties": {
                    "minimumDescriptionLength": {
                      "type": "number",
                      "default": 3,
                      "description": "A minimum character length for descriptions when `allow-with-description` is enabled."
                    },
                    "ts-check": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema"
                    },
                    "ts-expect-error": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema"
                    },
                    "ts-ignore": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema"
                    },
                    "ts-nocheck": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema"
                    }
                  }
                }
              ]
            }
          },
          "ban-tslint-comment": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow `// tslint:<rule-flag>` comments",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/ban-tslint-comment"
              },
              "fixable": "code",
              "messages": {
                "commentDetected": "tslint comment detected: \"{{ text }}\""
              },
              "schema": []
            }
          },
          "class-literal-property-style": {
            "defaultOptions": [
              "fields"
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce that literals on classes are exposed in a consistent style",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/class-literal-property-style"
              },
              "hasSuggestions": true,
              "messages": {
                "preferFieldStyle": "Literals should be exposed using readonly fields.",
                "preferFieldStyleSuggestion": "Replace the literals with readonly fields.",
                "preferGetterStyle": "Literals should be exposed using getters.",
                "preferGetterStyleSuggestion": "Replace the literals with getters."
              },
              "schema": [
                {
                  "type": "string",
                  "description": "Which literal class member syntax to prefer.",
                  "enum": [
                    "fields",
                    "getters"
                  ]
                }
              ]
            }
          },
          "class-methods-use-this": {
            "defaultOptions": [
              {
                "enforceForClassFields": true,
                "exceptMethods": [],
                "ignoreClassesThatImplementAnInterface": false,
                "ignoreOverrideMethods": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce that class methods utilize `this`",
                "extendsBaseRule": true,
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/class-methods-use-this"
              },
              "messages": {
                "missingThis": "Expected 'this' to be used by class {{name}}."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enforceForClassFields": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enforces that functions used as instance field initializers utilize `this`."
                    },
                    "exceptMethods": {
                      "type": "array",
                      "description": "Allows specified method names to be ignored with this rule.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "ignoreClassesThatImplementAnInterface": {
                      "description": "Whether to ignore class members that are defined within a class that `implements` a type.",
                      "oneOf": [
                        {
                          "type": "boolean",
                          "description": "Ignore all classes that implement an interface"
                        },
                        {
                          "type": "string",
                          "description": "Ignore only the public fields of classes that implement an interface",
                          "enum": [
                            "public-fields"
                          ]
                        }
                      ]
                    },
                    "ignoreOverrideMethods": {
                      "type": "boolean",
                      "description": "Whether to ignore members marked with the `override` modifier."
                    }
                  }
                }
              ]
            }
          },
          "consistent-generic-constructors": {
            "defaultOptions": [
              "constructor"
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-generic-constructors"
              },
              "fixable": "code",
              "messages": {
                "preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments.",
                "preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation."
              },
              "schema": [
                {
                  "type": "string",
                  "description": "Which constructor call syntax to prefer.",
                  "enum": [
                    "type-annotation",
                    "constructor"
                  ]
                }
              ]
            }
          },
          "consistent-indexed-object-style": {
            "defaultOptions": [
              "record"
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require or disallow the `Record` type",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "preferIndexSignature": "An index signature is preferred over a record.",
                "preferIndexSignatureSuggestion": "Change into an index signature instead of a record.",
                "preferRecord": "A record is preferred over an index signature."
              },
              "schema": [
                {
                  "type": "string",
                  "description": "Which indexed object syntax to prefer.",
                  "enum": [
                    "record",
                    "index-signature"
                  ]
                }
              ]
            }
          },
          "consistent-return": {
            "defaultOptions": [
              {
                "treatUndefinedAsUnspecified": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "defaultOptions": "[Circular Reference]",
              "docs": {
                "description": "Require `return` statements to either always or never specify values",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/consistent-return"
              },
              "messages": {
                "missingReturn": "Expected to return a value at the end of {{name}}.",
                "missingReturnValue": "{{name}} expected a return value.",
                "unexpectedReturnValue": "{{name}} expected no return value."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "treatUndefinedAsUnspecified": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "consistent-type-assertions": {
            "defaultOptions": [
              {
                "arrayLiteralTypeAssertions": "allow",
                "assertionStyle": "as",
                "objectLiteralTypeAssertions": "allow"
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce consistent usage of type assertions",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-type-assertions"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
                "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
                "never": "Do not use any type assertions.",
                "replaceArrayTypeAssertionWithAnnotation": "Use const x: {{cast}} = [ ... ] instead.",
                "replaceArrayTypeAssertionWithSatisfies": "Use const x = [ ... ] satisfies {{cast}} instead.",
                "replaceObjectTypeAssertionWithAnnotation": "Use const x: {{cast}} = { ... } instead.",
                "replaceObjectTypeAssertionWithSatisfies": "Use const x = { ... } satisfies {{cast}} instead.",
                "unexpectedArrayTypeAssertion": "Always prefer const x: T[] = [ ... ].",
                "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }."
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "assertionStyle": {
                          "type": "string",
                          "description": "The expected assertion style to enforce.",
                          "enum": [
                            "never"
                          ]
                        }
                      },
                      "required": [
                        "assertionStyle"
                      ]
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "arrayLiteralTypeAssertions": {
                          "type": "string",
                          "description": "Whether to always prefer type declarations for array literals used as variable initializers, rather than type assertions.",
                          "enum": [
                            "allow",
                            "allow-as-parameter",
                            "never"
                          ]
                        },
                        "assertionStyle": {
                          "type": "string",
                          "description": "The expected assertion style to enforce.",
                          "enum": [
                            "as",
                            "angle-bracket"
                          ]
                        },
                        "objectLiteralTypeAssertions": {
                          "type": "string",
                          "description": "Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions.",
                          "enum": [
                            "allow",
                            "allow-as-parameter",
                            "never"
                          ]
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "consistent-type-definitions": {
            "defaultOptions": [
              "interface"
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce type definitions to consistently use either `interface` or `type`",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
              },
              "fixable": "code",
              "messages": {
                "interfaceOverType": "Use an `interface` instead of a `type`.",
                "typeOverInterface": "Use a `type` instead of an `interface`."
              },
              "schema": [
                {
                  "type": "string",
                  "description": "Which type definition syntax to prefer.",
                  "enum": [
                    "interface",
                    "type"
                  ]
                }
              ]
            }
          },
          "consistent-type-exports": {
            "defaultOptions": [
              {
                "fixMixedExportsWithInlineTypeSpecifier": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce consistent usage of type exports",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/consistent-type-exports"
              },
              "fixable": "code",
              "messages": {
                "multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using `export type`.",
                "singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using `export type`.",
                "typeOverValue": "All exports in the declaration are only used as types. Use `export type`."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "fixMixedExportsWithInlineTypeSpecifier": {
                      "type": "boolean",
                      "description": "Whether the rule will autofix \"mixed\" export cases using TS inline type specifiers."
                    }
                  }
                }
              ]
            }
          },
          "consistent-type-imports": {
            "defaultOptions": [
              {
                "disallowTypeAnnotations": true,
                "fixStyle": "separate-type-imports",
                "prefer": "type-imports"
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce consistent usage of type imports",
                "url": "https://typescript-eslint.io/rules/consistent-type-imports"
              },
              "fixable": "code",
              "messages": {
                "avoidImportType": "Use an `import` instead of an `import type`.",
                "noImportTypeAnnotations": "`import()` type annotations are forbidden.",
                "someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as type.",
                "typeOverValue": "All imports in the declaration are only used as types. Use `import type`."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "disallowTypeAnnotations": {
                      "type": "boolean",
                      "description": "Whether to disallow type imports in type annotations (`import()`)."
                    },
                    "fixStyle": {
                      "type": "string",
                      "description": "The expected type modifier to be added when an import is detected as used only in the type position.",
                      "enum": [
                        "separate-type-imports",
                        "inline-type-imports"
                      ]
                    },
                    "prefer": {
                      "type": "string",
                      "description": "The expected import kind for type-only imports.",
                      "enum": [
                        "type-imports",
                        "no-type-imports"
                      ]
                    }
                  }
                }
              ]
            }
          },
          "default-param-last": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce default parameters to be last",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/default-param-last"
              },
              "messages": {
                "shouldBeLast": "Default parameters should be last."
              },
              "schema": []
            }
          },
          "dot-notation": {
            "defaultOptions": [
              {
                "allowIndexSignaturePropertyAccess": false,
                "allowKeywords": true,
                "allowPattern": "",
                "allowPrivateClassPropertyAccess": false,
                "allowProtectedClassPropertyAccess": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "defaultOptions": "[Circular Reference]",
              "docs": {
                "description": "Enforce dot notation whenever possible",
                "extendsBaseRule": true,
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/dot-notation"
              },
              "fixable": "code",
              "messages": {
                "useDot": "[{{key}}] is better written in dot notation.",
                "useBrackets": ".{{key}} is a syntax error."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowIndexSignaturePropertyAccess": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to allow accessing properties matching an index signature with array notation."
                    },
                    "allowKeywords": {
                      "type": "boolean",
                      "default": true,
                      "description": "Whether to allow keywords such as [\"class\"]`."
                    },
                    "allowPattern": {
                      "type": "string",
                      "default": "",
                      "description": "Regular expression of names to allow."
                    },
                    "allowPrivateClassPropertyAccess": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to allow accessing class members marked as `private` with array notation."
                    },
                    "allowProtectedClassPropertyAccess": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to allow accessing class members marked as `protected` with array notation."
                    }
                  }
                }
              ]
            }
          },
          "explicit-function-return-type": {
            "defaultOptions": [
              {
                "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
                "allowDirectConstAssertionInArrowFunctions": true,
                "allowedNames": [],
                "allowExpressions": false,
                "allowFunctionsWithoutTypeParameters": false,
                "allowHigherOrderFunctions": true,
                "allowIIFEs": false,
                "allowTypedFunctionExpressions": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require explicit return types on functions and class methods",
                "url": "https://typescript-eslint.io/rules/explicit-function-return-type"
              },
              "messages": {
                "missingReturnType": "Missing return type on function."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                      "type": "boolean",
                      "description": "Whether to allow arrow functions that start with the `void` keyword."
                    },
                    "allowDirectConstAssertionInArrowFunctions": {
                      "type": "boolean",
                      "description": "Whether to ignore arrow functions immediately returning a `as const` value."
                    },
                    "allowedNames": {
                      "type": "array",
                      "description": "An array of function/method names that will not have their arguments or return values checked.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "allowExpressions": {
                      "type": "boolean",
                      "description": "Whether to ignore function expressions (functions which are not part of a declaration)."
                    },
                    "allowFunctionsWithoutTypeParameters": {
                      "type": "boolean",
                      "description": "Whether to ignore functions that don't have generic type parameters."
                    },
                    "allowHigherOrderFunctions": {
                      "type": "boolean",
                      "description": "Whether to ignore functions immediately returning another function expression."
                    },
                    "allowIIFEs": {
                      "type": "boolean",
                      "description": "Whether to ignore immediately invoked function expressions (IIFEs)."
                    },
                    "allowTypedFunctionExpressions": {
                      "type": "boolean",
                      "description": "Whether to ignore type annotations on the variable of function expressions."
                    }
                  }
                }
              ]
            }
          },
          "explicit-member-accessibility": {
            "defaultOptions": [
              {
                "accessibility": "explicit"
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require explicit accessibility modifiers on class properties and methods",
                "url": "https://typescript-eslint.io/rules/explicit-member-accessibility"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier",
                "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
                "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}."
              },
              "schema": [
                {
                  "type": "object",
                  "$defs": {
                    "accessibilityLevel": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Always require an accessor.",
                          "enum": [
                            "explicit"
                          ]
                        },
                        {
                          "type": "string",
                          "description": "Require an accessor except when public.",
                          "enum": [
                            "no-public"
                          ]
                        },
                        {
                          "type": "string",
                          "description": "Never check whether there is an accessor.",
                          "enum": [
                            "off"
                          ]
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "properties": {
                    "accessibility": {
                      "$ref": "#/items/0/$defs/accessibilityLevel",
                      "description": "Which accessibility modifier is required to exist or not exist."
                    },
                    "ignoredMethodNames": {
                      "type": "array",
                      "description": "Specific method names that may be ignored.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "overrides": {
                      "type": "object",
                      "additionalProperties": false,
                      "description": "Changes to required accessibility modifiers for specific kinds of class members.",
                      "properties": {
                        "accessors": {
                          "$ref": "#/items/0/$defs/accessibilityLevel"
                        },
                        "constructors": {
                          "$ref": "#/items/0/$defs/accessibilityLevel"
                        },
                        "methods": {
                          "$ref": "#/items/0/$defs/accessibilityLevel"
                        },
                        "parameterProperties": {
                          "$ref": "#/items/0/$defs/accessibilityLevel"
                        },
                        "properties": {
                          "$ref": "#/items/0/$defs/accessibilityLevel"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "explicit-module-boundary-types": {
            "defaultOptions": [
              {
                "allowArgumentsExplicitlyTypedAsAny": false,
                "allowDirectConstAssertionInArrowFunctions": true,
                "allowedNames": [],
                "allowHigherOrderFunctions": true,
                "allowOverloadFunctions": false,
                "allowTypedFunctionExpressions": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
                "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types"
              },
              "messages": {
                "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
                "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type.",
                "missingArgType": "Argument '{{name}}' should be typed.",
                "missingArgTypeUnnamed": "{{type}} argument should be typed.",
                "missingReturnType": "Missing return type on function."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowArgumentsExplicitlyTypedAsAny": {
                      "type": "boolean",
                      "description": "Whether to ignore arguments that are explicitly typed as `any`."
                    },
                    "allowDirectConstAssertionInArrowFunctions": {
                      "type": "boolean",
                      "description": "Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.\nYou must still type the parameters of the function."
                    },
                    "allowedNames": {
                      "type": "array",
                      "description": "An array of function/method names that will not have their arguments or return values checked.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "allowHigherOrderFunctions": {
                      "type": "boolean",
                      "description": "Whether to ignore return type annotations on functions immediately returning another function expression.\nYou must still type the parameters of the function."
                    },
                    "allowOverloadFunctions": {
                      "type": "boolean",
                      "description": "Whether to ignore return type annotations on functions with overload signatures."
                    },
                    "allowTypedFunctionExpressions": {
                      "type": "boolean",
                      "description": "Whether to ignore type annotations on the variable of a function expression."
                    }
                  }
                }
              ]
            }
          },
          "init-declarations": {
            "defaultOptions": [
              "always"
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require or disallow initialization in variable declarations",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/init-declarations"
              },
              "messages": {
                "initialized": "Variable '{{idName}}' should be initialized on declaration.",
                "notInitialized": "Variable '{{idName}}' should not be initialized on declaration."
              },
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": [
                          "always"
                        ]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": [
                          "never"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "ignoreForLoopInit": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              }
            }
          },
          "max-params": {
            "defaultOptions": [
              {
                "countVoidThis": false,
                "max": 3
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce a maximum number of parameters in function definitions",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/max-params"
              },
              "messages": {
                "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "countVoidThis": {
                      "type": "boolean",
                      "description": "Whether to count a `this` declaration when the type is `void`."
                    },
                    "max": {
                      "type": "integer",
                      "description": "A maximum number of parameters in function definitions.",
                      "minimum": 0
                    },
                    "maximum": {
                      "type": "integer",
                      "description": "(deprecated) A maximum number of parameters in function definitions.",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          },
          "member-ordering": {
            "defaultOptions": [
              {
                "default": {
                  "memberTypes": [
                    "signature",
                    "call-signature",
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "#private-static-field",
                    "public-decorated-field",
                    "protected-decorated-field",
                    "private-decorated-field",
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "#private-instance-field",
                    "public-abstract-field",
                    "protected-abstract-field",
                    "public-field",
                    "protected-field",
                    "private-field",
                    "#private-field",
                    "static-field",
                    "instance-field",
                    "abstract-field",
                    "decorated-field",
                    "field",
                    "static-initialization",
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "constructor",
                    "public-static-accessor",
                    "protected-static-accessor",
                    "private-static-accessor",
                    "#private-static-accessor",
                    "public-decorated-accessor",
                    "protected-decorated-accessor",
                    "private-decorated-accessor",
                    "public-instance-accessor",
                    "protected-instance-accessor",
                    "private-instance-accessor",
                    "#private-instance-accessor",
                    "public-abstract-accessor",
                    "protected-abstract-accessor",
                    "public-accessor",
                    "protected-accessor",
                    "private-accessor",
                    "#private-accessor",
                    "static-accessor",
                    "instance-accessor",
                    "abstract-accessor",
                    "decorated-accessor",
                    "accessor",
                    "public-static-get",
                    "protected-static-get",
                    "private-static-get",
                    "#private-static-get",
                    "public-decorated-get",
                    "protected-decorated-get",
                    "private-decorated-get",
                    "public-instance-get",
                    "protected-instance-get",
                    "private-instance-get",
                    "#private-instance-get",
                    "public-abstract-get",
                    "protected-abstract-get",
                    "public-get",
                    "protected-get",
                    "private-get",
                    "#private-get",
                    "static-get",
                    "instance-get",
                    "abstract-get",
                    "decorated-get",
                    "get",
                    "public-static-set",
                    "protected-static-set",
                    "private-static-set",
                    "#private-static-set",
                    "public-decorated-set",
                    "protected-decorated-set",
                    "private-decorated-set",
                    "public-instance-set",
                    "protected-instance-set",
                    "private-instance-set",
                    "#private-instance-set",
                    "public-abstract-set",
                    "protected-abstract-set",
                    "public-set",
                    "protected-set",
                    "private-set",
                    "#private-set",
                    "static-set",
                    "instance-set",
                    "abstract-set",
                    "decorated-set",
                    "set",
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "#private-static-method",
                    "public-decorated-method",
                    "protected-decorated-method",
                    "private-decorated-method",
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method",
                    "#private-instance-method",
                    "public-abstract-method",
                    "protected-abstract-method",
                    "public-method",
                    "protected-method",
                    "private-method",
                    "#private-method",
                    "static-method",
                    "instance-method",
                    "abstract-method",
                    "decorated-method",
                    "method"
                  ]
                }
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require a consistent member declaration order",
                "url": "https://typescript-eslint.io/rules/member-ordering"
              },
              "messages": {
                "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
                "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
                "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members."
              },
              "schema": [
                {
                  "type": "object",
                  "$defs": {
                    "allItems": {
                      "type": "string",
                      "enum": [
                        "readonly-signature",
                        "signature",
                        "readonly-field",
                        "public-readonly-field",
                        "public-decorated-readonly-field",
                        "decorated-readonly-field",
                        "static-readonly-field",
                        "public-static-readonly-field",
                        "instance-readonly-field",
                        "public-instance-readonly-field",
                        "abstract-readonly-field",
                        "public-abstract-readonly-field",
                        "protected-readonly-field",
                        "protected-decorated-readonly-field",
                        "protected-static-readonly-field",
                        "protected-instance-readonly-field",
                        "protected-abstract-readonly-field",
                        "private-readonly-field",
                        "private-decorated-readonly-field",
                        "private-static-readonly-field",
                        "private-instance-readonly-field",
                        "#private-readonly-field",
                        "#private-static-readonly-field",
                        "#private-instance-readonly-field",
                        "field",
                        "public-field",
                        "public-decorated-field",
                        "decorated-field",
                        "static-field",
                        "public-static-field",
                        "instance-field",
                        "public-instance-field",
                        "abstract-field",
                        "public-abstract-field",
                        "protected-field",
                        "protected-decorated-field",
                        "protected-static-field",
                        "protected-instance-field",
                        "protected-abstract-field",
                        "private-field",
                        "private-decorated-field",
                        "private-static-field",
                        "private-instance-field",
                        "#private-field",
                        "#private-static-field",
                        "#private-instance-field",
                        "method",
                        "public-method",
                        "public-decorated-method",
                        "decorated-method",
                        "static-method",
                        "public-static-method",
                        "instance-method",
                        "public-instance-method",
                        "abstract-method",
                        "public-abstract-method",
                        "protected-method",
                        "protected-decorated-method",
                        "protected-static-method",
                        "protected-instance-method",
                        "protected-abstract-method",
                        "private-method",
                        "private-decorated-method",
                        "private-static-method",
                        "private-instance-method",
                        "#private-method",
                        "#private-static-method",
                        "#private-instance-method",
                        "call-signature",
                        "constructor",
                        "public-constructor",
                        "protected-constructor",
                        "private-constructor",
                        "accessor",
                        "public-accessor",
                        "public-decorated-accessor",
                        "decorated-accessor",
                        "static-accessor",
                        "public-static-accessor",
                        "instance-accessor",
                        "public-instance-accessor",
                        "abstract-accessor",
                        "public-abstract-accessor",
                        "protected-accessor",
                        "protected-decorated-accessor",
                        "protected-static-accessor",
                        "protected-instance-accessor",
                        "protected-abstract-accessor",
                        "private-accessor",
                        "private-decorated-accessor",
                        "private-static-accessor",
                        "private-instance-accessor",
                        "#private-accessor",
                        "#private-static-accessor",
                        "#private-instance-accessor",
                        "get",
                        "public-get",
                        "public-decorated-get",
                        "decorated-get",
                        "static-get",
                        "public-static-get",
                        "instance-get",
                        "public-instance-get",
                        "abstract-get",
                        "public-abstract-get",
                        "protected-get",
                        "protected-decorated-get",
                        "protected-static-get",
                        "protected-instance-get",
                        "protected-abstract-get",
                        "private-get",
                        "private-decorated-get",
                        "private-static-get",
                        "private-instance-get",
                        "#private-get",
                        "#private-static-get",
                        "#private-instance-get",
                        "set",
                        "public-set",
                        "public-decorated-set",
                        "decorated-set",
                        "static-set",
                        "public-static-set",
                        "instance-set",
                        "public-instance-set",
                        "abstract-set",
                        "public-abstract-set",
                        "protected-set",
                        "protected-decorated-set",
                        "protected-static-set",
                        "protected-instance-set",
                        "protected-abstract-set",
                        "private-set",
                        "private-decorated-set",
                        "private-static-set",
                        "private-instance-set",
                        "#private-set",
                        "#private-static-set",
                        "#private-instance-set",
                        "static-initialization",
                        "static-static-initialization",
                        "public-static-static-initialization",
                        "instance-static-initialization",
                        "public-instance-static-initialization",
                        "abstract-static-initialization",
                        "public-abstract-static-initialization",
                        "protected-static-static-initialization",
                        "protected-instance-static-initialization",
                        "protected-abstract-static-initialization",
                        "private-static-static-initialization",
                        "private-instance-static-initialization",
                        "#private-static-static-initialization",
                        "#private-instance-static-initialization"
                      ]
                    },
                    "optionalityOrderOptions": {
                      "type": "string",
                      "enum": [
                        "optional-first",
                        "required-first"
                      ]
                    },
                    "orderOptions": {
                      "type": "string",
                      "enum": [
                        "alphabetically",
                        "alphabetically-case-insensitive",
                        "as-written",
                        "natural",
                        "natural-case-insensitive"
                      ]
                    },
                    "typeItems": {
                      "type": "string",
                      "enum": [
                        "readonly-signature",
                        "signature",
                        "readonly-field",
                        "field",
                        "method",
                        "constructor"
                      ]
                    },
                    "baseConfig": {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "never"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/items/0/$defs/allItems"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "$ref": "#/items/0/$defs/allItems"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "memberTypes": {
                              "oneOf": [
                                {
                                  "type": "array",
                                  "items": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/items/0/$defs/allItems"
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "$ref": "#/items/0/$defs/allItems"
                                        }
                                      }
                                    ]
                                  }
                                },
                                "[Circular Reference]"
                              ]
                            },
                            "optionalityOrder": {
                              "$ref": "#/items/0/$defs/optionalityOrderOptions"
                            },
                            "order": {
                              "$ref": "#/items/0/$defs/orderOptions"
                            }
                          }
                        }
                      ]
                    },
                    "typesConfig": {
                      "oneOf": [
                        "[Circular Reference]",
                        {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/items/0/$defs/typeItems"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "$ref": "#/items/0/$defs/typeItems"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "memberTypes": {
                              "oneOf": [
                                {
                                  "type": "array",
                                  "items": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/items/0/$defs/typeItems"
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "$ref": "#/items/0/$defs/typeItems"
                                        }
                                      }
                                    ]
                                  }
                                },
                                "[Circular Reference]"
                              ]
                            },
                            "optionalityOrder": {
                              "$ref": "#/items/0/$defs/optionalityOrderOptions"
                            },
                            "order": {
                              "$ref": "#/items/0/$defs/orderOptions"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "properties": {
                    "classes": {
                      "$ref": "#/items/0/$defs/baseConfig"
                    },
                    "classExpressions": {
                      "$ref": "#/items/0/$defs/baseConfig"
                    },
                    "default": {
                      "$ref": "#/items/0/$defs/baseConfig"
                    },
                    "interfaces": {
                      "$ref": "#/items/0/$defs/typesConfig"
                    },
                    "typeLiterals": {
                      "$ref": "#/items/0/$defs/typesConfig"
                    }
                  }
                }
              ]
            }
          },
          "method-signature-style": {
            "defaultOptions": [
              "property"
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce using a particular method signature syntax",
                "url": "https://typescript-eslint.io/rules/method-signature-style"
              },
              "fixable": "code",
              "messages": {
                "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
                "errorProperty": "Function property signature is forbidden. Use a method shorthand instead."
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "property",
                    "method"
                  ]
                }
              ]
            }
          },
          "naming-convention": {
            "defaultOptions": [
              {
                "format": [
                  "camelCase"
                ],
                "leadingUnderscore": "allow",
                "selector": "default",
                "trailingUnderscore": "allow"
              },
              {
                "format": [
                  "camelCase",
                  "PascalCase"
                ],
                "selector": "import"
              },
              {
                "format": [
                  "camelCase",
                  "UPPER_CASE"
                ],
                "leadingUnderscore": "allow",
                "selector": "variable",
                "trailingUnderscore": "allow"
              },
              {
                "format": [
                  "PascalCase"
                ],
                "selector": "typeLike"
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce naming conventions for everything across a codebase",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/naming-convention"
              },
              "messages": {
                "doesNotMatchFormat": "{{type}} name `{{name}}` must match one of the following formats: {{formats}}",
                "doesNotMatchFormatTrimmed": "{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}",
                "missingAffix": "{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}",
                "missingUnderscore": "{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).",
                "satisfyCustom": "{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}",
                "unexpectedUnderscore": "{{type}} name `{{name}}` must not have a {{position}} underscore."
              },
              "schema": {
                "$defs": {
                  "predefinedFormats": {
                    "enum": [
                      "camelCase",
                      "strictCamelCase",
                      "PascalCase",
                      "StrictPascalCase",
                      "snake_case",
                      "UPPER_CASE"
                    ],
                    "type": "string"
                  },
                  "typeModifiers": {
                    "enum": [
                      "boolean",
                      "string",
                      "number",
                      "function",
                      "array"
                    ],
                    "type": "string"
                  },
                  "underscoreOptions": {
                    "enum": [
                      "forbid",
                      "allow",
                      "require",
                      "requireDouble",
                      "allowDouble",
                      "allowSingleOrDouble"
                    ],
                    "type": "string"
                  },
                  "formatOptionsConfig": {
                    "oneOf": [
                      {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/predefinedFormats"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "matchRegexConfig": {
                    "additionalProperties": false,
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ],
                    "type": "object"
                  },
                  "prefixSuffixConfig": {
                    "additionalItems": false,
                    "items": {
                      "minLength": 1,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "additionalItems": false,
                "items": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "description": "Multiple selectors in one config",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig"
                        },
                        "failureMessage": {
                          "type": "string"
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig"
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions"
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig"
                        },
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "readonly",
                              "static",
                              "public",
                              "protected",
                              "private",
                              "#private",
                              "abstract",
                              "destructured",
                              "global",
                              "exported",
                              "unused",
                              "requiresQuotes",
                              "override",
                              "async",
                              "default",
                              "namespace"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "selector": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "default",
                              "variableLike",
                              "memberLike",
                              "typeLike",
                              "method",
                              "property",
                              "accessor",
                              "variable",
                              "function",
                              "parameter",
                              "parameterProperty",
                              "classicAccessor",
                              "enumMember",
                              "classMethod",
                              "objectLiteralMethod",
                              "typeMethod",
                              "classProperty",
                              "objectLiteralProperty",
                              "typeProperty",
                              "autoAccessor",
                              "class",
                              "interface",
                              "typeAlias",
                              "enum",
                              "typeParameter",
                              "import"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'default'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "default"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "readonly",
                              "static",
                              "public",
                              "protected",
                              "private",
                              "#private",
                              "abstract",
                              "destructured",
                              "global",
                              "exported",
                              "unused",
                              "requiresQuotes",
                              "override",
                              "async",
                              "default",
                              "namespace"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'variableLike'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "variableLike"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "unused",
                              "async"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'variable'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "variable"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "destructured",
                              "exported",
                              "global",
                              "unused",
                              "async"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'function'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "function"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "global",
                              "unused",
                              "async"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'parameter'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "parameter"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "destructured",
                              "unused"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'memberLike'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "memberLike"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classProperty'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "classProperty"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'objectLiteralProperty'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "objectLiteralProperty"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeProperty'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "typeProperty"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "readonly",
                              "requiresQuotes"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'parameterProperty'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "parameterProperty"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "private",
                              "protected",
                              "public",
                              "readonly"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'property'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "property"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classMethod'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "classMethod"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'objectLiteralMethod'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "objectLiteralMethod"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                              "async"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeMethod'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "typeMethod"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'method'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "method"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classicAccessor'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "classicAccessor"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'autoAccessor'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "autoAccessor"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'accessor'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "accessor"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'enumMember'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "enumMember"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "requiresQuotes"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeLike'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "typeLike"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "exported",
                              "unused"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'class'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "class"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "exported",
                              "unused"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'interface'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "interface"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeAlias'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "typeAlias"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'enum'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "enum"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeParameter'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "typeParameter"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "unused"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'import'",
                      "properties": {
                        "custom": "[Circular Reference]",
                        "failureMessage": "[Circular Reference]",
                        "format": "[Circular Reference]",
                        "leadingUnderscore": "[Circular Reference]",
                        "prefix": "[Circular Reference]",
                        "suffix": "[Circular Reference]",
                        "trailingUnderscore": "[Circular Reference]",
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string"
                            },
                            "[Circular Reference]"
                          ]
                        },
                        "selector": {
                          "enum": [
                            "import"
                          ],
                          "type": "string"
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "default",
                              "namespace"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "selector",
                        "format"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              }
            }
          },
          "no-array-constructor": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow generic `Array` constructors",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-array-constructor"
              },
              "fixable": "code",
              "messages": {
                "useLiteral": "The array literal notation [] is preferable."
              },
              "schema": []
            }
          },
          "no-array-delete": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow using the `delete` operator on array values",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-array-delete"
              },
              "hasSuggestions": true,
              "messages": {
                "noArrayDelete": "Using the `delete` operator with an array expression is unsafe.",
                "useSplice": "Use `array.splice()` instead."
              },
              "schema": []
            }
          },
          "no-base-to-string": {
            "defaultOptions": [
              {
                "ignoredTypeNames": [
                  "Error",
                  "RegExp",
                  "URL",
                  "URLSearchParams"
                ]
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require `.toString()` and `.toLocaleString()` to only be called on objects which provide useful information when stringified",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-base-to-string"
              },
              "messages": {
                "baseArrayJoin": "Using `join()` for {{name}} {{certainty}} use Object's default stringification format ('[object Object]') when stringified.",
                "baseToString": "'{{name}}' {{certainty}} use Object's default stringification format ('[object Object]') when stringified."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ignoredTypeNames": {
                      "type": "array",
                      "description": "Stringified regular expressions of type names to ignore.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "no-confusing-non-null-assertion": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow non-null assertion in locations that may be confusing",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion"
              },
              "hasSuggestions": true,
              "messages": {
                "confusingAssign": "Confusing combination of non-null assertion and assignment like `a! = b`, which looks very similar to `a != b`.",
                "confusingEqual": "Confusing combination of non-null assertion and equality test like `a! == b`, which looks very similar to `a !== b`.",
                "confusingOperator": "Confusing combination of non-null assertion and `{{operator}}` operator like `a! {{operator}} b`, which might be misinterpreted as `!(a {{operator}} b)`.",
                "notNeedInAssign": "Remove unnecessary non-null assertion (!) in assignment left-hand side.",
                "notNeedInEqualTest": "Remove unnecessary non-null assertion (!) in equality test.",
                "notNeedInOperator": "Remove possibly unnecessary non-null assertion (!) in the left operand of the `{{operator}}` operator.",
                "wrapUpLeft": "Wrap the left-hand side in parentheses to avoid confusion with \"{{operator}}\" operator."
              },
              "schema": []
            }
          },
          "no-confusing-void-expression": {
            "defaultOptions": [
              {
                "ignoreArrowShorthand": false,
                "ignoreVoidOperator": false,
                "ignoreVoidReturningFunctions": false
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require expressions of type void to appear in statement position",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-confusing-void-expression"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
                "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
                "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the `void` operator.",
                "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the `return` statement.",
                "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the `return` statement.",
                "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the `void` operator.",
                "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the `void` operator.",
                "voidExprWrapVoid": "Mark with an explicit `void` operator."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ignoreArrowShorthand": {
                      "type": "boolean",
                      "description": "Whether to ignore \"shorthand\" `() =>` arrow functions: those without `{ ... }` braces."
                    },
                    "ignoreVoidOperator": {
                      "type": "boolean",
                      "description": "Whether to ignore returns that start with the `void` operator."
                    },
                    "ignoreVoidReturningFunctions": {
                      "type": "boolean",
                      "description": "Whether to ignore returns from functions with explicit `void` return types and functions with contextual `void` return types."
                    }
                  }
                }
              ]
            }
          },
          "no-deprecated": {
            "defaultOptions": [
              {
                "allow": []
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow using code marked as `@deprecated`",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-deprecated"
              },
              "messages": {
                "deprecated": "`{{name}}` is deprecated.",
                "deprecatedWithReason": "`{{name}}` is deprecated. {{reason}}"
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "items": {
                                      "type": "string"
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true
                                  }
                                ]
                              },
                              "path": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "from",
                              "name"
                            ],
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "items": {
                                      "type": "string"
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true
                                  }
                                ]
                              }
                            },
                            "required": [
                              "from",
                              "name"
                            ],
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "items": {
                                      "type": "string"
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true
                                  }
                                ]
                              },
                              "package": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "from",
                              "name",
                              "package"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array",
                      "description": "Type specifiers that can be allowed."
                    }
                  }
                }
              ]
            }
          },
          "no-dupe-class-members": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow duplicate class members",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-dupe-class-members"
              },
              "messages": {
                "unexpected": "Duplicate name '{{name}}'."
              },
              "schema": []
            }
          },
          "no-duplicate-enum-values": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow duplicate enum member values",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values"
              },
              "hasSuggestions": false,
              "messages": {
                "duplicateValue": "Duplicate enum member value {{value}}."
              },
              "schema": []
            }
          },
          "no-duplicate-type-constituents": {
            "defaultOptions": [
              {
                "ignoreIntersections": false,
                "ignoreUnions": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow duplicate constituents of union or intersection types",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents"
              },
              "fixable": "code",
              "messages": {
                "duplicate": "{{type}} type constituent is duplicated with {{previous}}.",
                "unnecessary": "Explicit undefined is unnecessary on an optional parameter."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ignoreIntersections": {
                      "type": "boolean",
                      "description": "Whether to ignore `&` intersections."
                    },
                    "ignoreUnions": {
                      "type": "boolean",
                      "description": "Whether to ignore `|` unions."
                    }
                  }
                }
              ]
            }
          },
          "no-dynamic-delete": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow using the `delete` operator on computed key expressions",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-dynamic-delete"
              },
              "fixable": "code",
              "messages": {
                "dynamicDelete": "Do not delete dynamically computed property keys."
              },
              "schema": []
            }
          },
          "no-empty-function": {
            "defaultOptions": [
              {
                "allow": []
              }
            ],
            "meta": {
              "type": "suggestion",
              "defaultOptions": "[Circular Reference]",
              "docs": {
                "description": "Disallow empty functions",
                "extendsBaseRule": true,
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-empty-function"
              },
              "messages": {
                "unexpected": "Unexpected empty {{name}}."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allow": {
                      "type": "array",
                      "items": {
                        "enum": [
                          "functions",
                          "arrowFunctions",
                          "generatorFunctions",
                          "methods",
                          "generatorMethods",
                          "getters",
                          "setters",
                          "constructors",
                          "private-constructors",
                          "protected-constructors",
                          "asyncFunctions",
                          "asyncMethods",
                          "decoratedFunctions",
                          "overrideMethods"
                        ],
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "Locations and kinds of functions that are allowed to be empty."
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-empty-interface": {
            "defaultOptions": [
              {
                "allowSingleExtends": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "deprecated": {
                "deprecatedSince": "8.0.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "@typescript-eslint/no-empty-object-type",
                      "url": "https://typescript-eslint.io/rules/no-empty-object-type"
                    }
                  }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8977"
              },
              "docs": {
                "description": "Disallow the declaration of empty interfaces",
                "url": "https://typescript-eslint.io/rules/no-empty-interface"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "noEmpty": "An empty interface is equivalent to `{}`.",
                "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype."
              },
              "replacedBy": [
                "@typescript-eslint/no-empty-object-type"
              ],
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleExtends": {
                      "type": "boolean",
                      "description": "Whether to allow empty interfaces that extend a single other interface."
                    }
                  }
                }
              ]
            }
          },
          "no-empty-object-type": {
            "defaultOptions": [
              {
                "allowInterfaces": "never",
                "allowObjectTypes": "never"
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow accidentally using the \"empty object\" type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-empty-object-type"
              },
              "hasSuggestions": true,
              "messages": {
                "noEmptyInterface": "An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
                "noEmptyInterfaceWithSuper": "An interface declaring no members is equivalent to its supertype.",
                "noEmptyObject": "The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
                "replaceEmptyInterface": "Replace empty interface with `{{replacement}}`.",
                "replaceEmptyInterfaceWithSuper": "Replace empty interface with a type alias.",
                "replaceEmptyObjectType": "Replace `{}` with `{{replacement}}`."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowInterfaces": {
                      "type": "string",
                      "description": "Whether to allow empty interfaces.",
                      "enum": [
                        "always",
                        "never",
                        "with-single-extends"
                      ]
                    },
                    "allowObjectTypes": {
                      "type": "string",
                      "description": "Whether to allow empty object type literals.",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    "allowWithName": {
                      "type": "string",
                      "description": "A stringified regular expression to allow interfaces and object type aliases with the configured name."
                    }
                  }
                }
              ]
            }
          },
          "no-explicit-any": {
            "defaultOptions": [
              {
                "fixToUnknown": false,
                "ignoreRestArgs": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow the `any` type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-explicit-any"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "suggestNever": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
                "suggestUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
                "unexpectedAny": "Unexpected any. Specify a different type."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "fixToUnknown": {
                      "type": "boolean",
                      "description": "Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type."
                    },
                    "ignoreRestArgs": {
                      "type": "boolean",
                      "description": "Whether to ignore rest parameter arrays."
                    }
                  }
                }
              ]
            }
          },
          "no-extra-non-null-assertion": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow extra non-null assertions",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion"
              },
              "fixable": "code",
              "messages": {
                "noExtraNonNullAssertion": "Forbidden extra non-null assertion."
              },
              "schema": []
            }
          },
          "no-extraneous-class": {
            "defaultOptions": [
              {
                "allowConstructorOnly": false,
                "allowEmpty": false,
                "allowStaticOnly": false,
                "allowWithDecorator": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow classes used as namespaces",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-extraneous-class"
              },
              "messages": {
                "empty": "Unexpected empty class.",
                "onlyConstructor": "Unexpected class with only a constructor.",
                "onlyStatic": "Unexpected class with only static properties."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowConstructorOnly": {
                      "type": "boolean",
                      "description": "Whether to allow extraneous classes that contain only a constructor."
                    },
                    "allowEmpty": {
                      "type": "boolean",
                      "description": "Whether to allow extraneous classes that have no body (i.e. are empty)."
                    },
                    "allowStaticOnly": {
                      "type": "boolean",
                      "description": "Whether to allow extraneous classes that only contain static members."
                    },
                    "allowWithDecorator": {
                      "type": "boolean",
                      "description": "Whether to allow extraneous classes that include a decorator."
                    }
                  }
                }
              ]
            }
          },
          "no-floating-promises": {
            "defaultOptions": [
              {
                "allowForKnownSafeCalls": [],
                "allowForKnownSafePromises": "[Circular Reference]",
                "checkThenables": false,
                "ignoreIIFE": false,
                "ignoreVoid": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require Promise-like statements to be handled appropriately",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-floating-promises"
              },
              "hasSuggestions": true,
              "messages": {
                "floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
                "floatingFixAwait": "Add await operator.",
                "floatingFixVoid": "Add void operator to ignore.",
                "floatingPromiseArray": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar.",
                "floatingPromiseArrayVoid": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the `void` operator.",
                "floatingUselessRejectionHandler": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
                "floatingUselessRejectionHandlerVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator. A rejection handler that is not a function will be ignored.",
                "floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowForKnownSafeCalls": {
                      "items": "[Circular Reference]",
                      "type": "array",
                      "description": "Type specifiers of functions whose calls are safe to float."
                    },
                    "allowForKnownSafePromises": {
                      "items": "[Circular Reference]",
                      "type": "array",
                      "description": "Type specifiers that are known to be safe to float."
                    },
                    "checkThenables": {
                      "type": "boolean",
                      "description": "Whether to check all \"Thenable\"s, not just the built-in Promise type."
                    },
                    "ignoreIIFE": {
                      "type": "boolean",
                      "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions)."
                    },
                    "ignoreVoid": {
                      "type": "boolean",
                      "description": "Whether to ignore `void` expressions."
                    }
                  }
                }
              ]
            }
          },
          "no-for-in-array": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow iterating over an array with a for-in loop",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-for-in-array"
              },
              "messages": {
                "forInViolation": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead."
              },
              "schema": []
            }
          },
          "no-implied-eval": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow the use of `eval()`-like functions",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-implied-eval"
              },
              "messages": {
                "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions.",
                "noImpliedEvalError": "Implied eval. Consider passing a function."
              },
              "schema": []
            }
          },
          "no-import-type-side-effects": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
                "url": "https://typescript-eslint.io/rules/no-import-type-side-effects"
              },
              "fixable": "code",
              "messages": {
                "useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import."
              },
              "schema": []
            }
          },
          "no-inferrable-types": {
            "defaultOptions": [
              {
                "ignoreParameters": false,
                "ignoreProperties": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-inferrable-types"
              },
              "fixable": "code",
              "messages": {
                "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ignoreParameters": {
                      "type": "boolean",
                      "description": "Whether to ignore function parameters."
                    },
                    "ignoreProperties": {
                      "type": "boolean",
                      "description": "Whether to ignore class properties."
                    }
                  }
                }
              ]
            }
          },
          "no-invalid-this": {
            "defaultOptions": [
              {
                "capIsConstructor": true
              }
            ],
            "meta": {
              "type": "suggestion",
              "defaultOptions": "[Circular Reference]",
              "docs": {
                "description": "Disallow `this` keywords outside of classes or class-like objects",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-invalid-this"
              },
              "messages": {
                "unexpectedThis": "Unexpected 'this'."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "capIsConstructor": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-invalid-void-type": {
            "defaultOptions": [
              {
                "allowAsThisParameter": false,
                "allowInGenericTypeArguments": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow `void` type outside of generic or return types",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-invalid-void-type"
              },
              "messages": {
                "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
                "invalidVoidNotReturn": "void is only valid as a return type.",
                "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
                "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of `this` parameter.",
                "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a `this` parameter.",
                "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type"
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowAsThisParameter": {
                      "type": "boolean",
                      "description": "Whether a `this` parameter of a function may be `void`."
                    },
                    "allowInGenericTypeArguments": {
                      "description": "Whether `void` can be used as a valid value for generic type parameters.",
                      "oneOf": [
                        {
                          "type": "boolean",
                          "description": "Whether `void` can be used as a valid value for all generic type parameters."
                        },
                        {
                          "type": "array",
                          "description": "Allowlist of types that may accept `void` as a generic type parameter.",
                          "items": {
                            "type": "string"
                          },
                          "minItems": 1
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "no-loop-func": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow function declarations that contain unsafe references inside loop statements",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-loop-func"
              },
              "messages": {
                "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
              },
              "schema": []
            }
          },
          "no-loss-of-precision": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "deprecated": {
                "deprecatedSince": "8.0.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "no-loss-of-precision",
                      "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
                    }
                  }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
              },
              "docs": {
                "description": "Disallow literal numbers that lose precision",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-loss-of-precision"
              },
              "messages": {
                "noLossOfPrecision": "This number literal will lose precision at runtime."
              },
              "schema": []
            }
          },
          "no-magic-numbers": {
            "defaultOptions": [
              {
                "detectObjects": false,
                "enforceConst": false,
                "ignore": [],
                "ignoreArrayIndexes": false,
                "ignoreEnums": false,
                "ignoreNumericLiteralTypes": false,
                "ignoreReadonlyClassProperties": false,
                "ignoreTypeIndexes": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow magic numbers",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-magic-numbers"
              },
              "messages": {
                "useConst": "Number constants declarations must use 'const'.",
                "noMagic": "No magic number: {{raw}}."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "detectObjects": {
                      "type": "boolean",
                      "default": false
                    },
                    "enforceConst": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignore": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "string",
                            "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
                          }
                        ]
                      },
                      "uniqueItems": true
                    },
                    "ignoreArrayIndexes": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignoreDefaultValues": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignoreClassFieldInitialValues": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignoreEnums": {
                      "type": "boolean",
                      "description": "Whether enums used in TypeScript are considered okay."
                    },
                    "ignoreNumericLiteralTypes": {
                      "type": "boolean",
                      "description": "Whether numbers used in TypeScript numeric literal types are considered okay."
                    },
                    "ignoreReadonlyClassProperties": {
                      "type": "boolean",
                      "description": "Whether `readonly` class properties are considered okay."
                    },
                    "ignoreTypeIndexes": {
                      "type": "boolean",
                      "description": "Whether numbers used to index types are okay."
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-meaningless-void-operator": {
            "defaultOptions": [
              {
                "checkNever": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow the `void` operator except when used to discard a value",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
                "removeVoid": "Remove 'void'"
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "checkNever": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to suggest removing `void` when the argument has type `never`."
                    }
                  }
                }
              ]
            }
          },
          "no-misused-new": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce valid definition of `new` and `constructor`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-misused-new"
              },
              "messages": {
                "errorMessageClass": "Class cannot have method named `new`.",
                "errorMessageInterface": "Interfaces cannot be constructed, only classes."
              },
              "schema": []
            }
          },
          "no-misused-promises": {
            "defaultOptions": [
              {
                "checksConditionals": true,
                "checksSpreads": true,
                "checksVoidReturn": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow Promises in places not designed to handle them",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-misused-promises"
              },
              "messages": {
                "conditional": "Expected non-Promise value in a boolean conditional.",
                "predicate": "Expected a non-Promise value to be returned.",
                "spread": "Expected a non-Promise value to be spreaded in an object.",
                "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
                "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
                "voidReturnInheritedMethod": "Promise-returning method provided where a void return was expected by extended/implemented type '{{ heritageTypeName }}'.",
                "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
                "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
                "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "checksConditionals": {
                      "type": "boolean",
                      "description": "Whether to warn when a Promise is provided to conditional statements."
                    },
                    "checksSpreads": {
                      "type": "boolean",
                      "description": "Whether to warn when `...` spreading a `Promise`."
                    },
                    "checksVoidReturn": {
                      "description": "Whether to warn when a Promise is returned from a function typed as returning `void`.",
                      "oneOf": [
                        {
                          "type": "boolean",
                          "description": "Whether to disable checking all asynchronous functions."
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "description": "Which forms of functions may have checking disabled.",
                          "properties": {
                            "arguments": {
                              "type": "boolean",
                              "description": "Disables checking an asynchronous function passed as argument where the parameter type expects a function that returns `void`."
                            },
                            "attributes": {
                              "type": "boolean",
                              "description": "Disables checking an asynchronous function passed as a JSX attribute expected to be a function that returns `void`."
                            },
                            "inheritedMethods": {
                              "type": "boolean",
                              "description": "Disables checking an asynchronous method in a type that extends or implements another type expecting that method to return `void`."
                            },
                            "properties": {
                              "type": "boolean",
                              "description": "Disables checking an asynchronous function passed as an object property expected to be a function that returns `void`."
                            },
                            "returns": {
                              "type": "boolean",
                              "description": "Disables checking an asynchronous function returned in a function whose return type is a function that returns `void`."
                            },
                            "variables": {
                              "type": "boolean",
                              "description": "Disables checking an asynchronous function used as a variable whose return type is a function that returns `void`."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "no-misused-spread": {
            "defaultOptions": [
              {
                "allow": []
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow using the spread operator when it might cause unexpected behavior",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-misused-spread"
              },
              "hasSuggestions": true,
              "messages": {
                "addAwait": "Add await operator.",
                "noArraySpreadInObject": "Using the spread operator on an array in an object will result in a list of indices.",
                "noClassDeclarationSpreadInObject": "Using the spread operator on class declarations will spread only their static properties, and will lose their class prototype.",
                "noClassInstanceSpreadInObject": "Using the spread operator on class instances will lose their class prototype.",
                "noFunctionSpreadInObject": "Using the spread operator on a function without additional properties can cause unexpected behavior. Did you forget to call the function?",
                "noIterableSpreadInObject": "Using the spread operator on an Iterable in an object can cause unexpected behavior.",
                "noMapSpreadInObject": "Using the spread operator on a Map in an object will result in an empty object. Did you mean to use `Object.fromEntries(map)` instead?",
                "noPromiseSpreadInObject": "Using the spread operator on Promise in an object can cause unexpected behavior. Did you forget to await the promise?",
                "noStringSpread": "Using the spread operator on a string can mishandle special characters, as can `.split(\"\")`.\n- `...` produces Unicode code points, which will decompose complex emojis into individual emojis\n- .split(\"\") produces UTF-16 code units, which breaks rich characters in many languages\nConsider using `Intl.Segmenter` for locale-aware string decomposition.\nOtherwise, if you don't need to preserve emojis or other non-Ascii characters, disable this lint rule on this line or configure the 'allow' rule option.",
                "replaceMapSpreadInObject": "Replace map spread in object with `Object.fromEntries()`"
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": "[Circular Reference]",
                      "type": "array",
                      "description": "An array of type specifiers that are known to be safe to spread."
                    }
                  }
                }
              ]
            }
          },
          "no-mixed-enums": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow enums from having both number and string members",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-mixed-enums"
              },
              "messages": {
                "mixed": "Mixing number and string enums can be confusing."
              },
              "schema": []
            }
          },
          "no-namespace": {
            "defaultOptions": [
              {
                "allowDeclarations": false,
                "allowDefinitionFiles": true
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow TypeScript namespaces",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-namespace"
              },
              "messages": {
                "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowDeclarations": {
                      "type": "boolean",
                      "description": "Whether to allow `declare` with custom TypeScript namespaces."
                    },
                    "allowDefinitionFiles": {
                      "type": "boolean",
                      "description": "Whether to allow `declare` with custom TypeScript namespaces inside definition files."
                    }
                  }
                }
              ]
            }
          },
          "no-non-null-asserted-nullish-coalescing": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing"
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
                "suggestRemovingNonNull": "Remove the non-null assertion."
              },
              "schema": []
            }
          },
          "no-non-null-asserted-optional-chain": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow non-null assertions after an optional chain expression",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain"
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
                "suggestRemovingNonNull": "You should remove the non-null assertion."
              },
              "schema": []
            }
          },
          "no-non-null-assertion": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow non-null assertions using the `!` postfix operator",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-non-null-assertion"
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNull": "Forbidden non-null assertion.",
                "suggestOptionalChain": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
              },
              "schema": []
            }
          },
          "no-redeclare": {
            "defaultOptions": [
              {
                "builtinGlobals": true,
                "ignoreDeclarationMerge": true
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow variable redeclaration",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-redeclare"
              },
              "messages": {
                "redeclared": "'{{id}}' is already defined.",
                "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "builtinGlobals": {
                      "type": "boolean",
                      "description": "Whether to report shadowing of built-in global variables."
                    },
                    "ignoreDeclarationMerge": {
                      "type": "boolean",
                      "description": "Whether to ignore declaration merges between certain TypeScript declaration types."
                    }
                  }
                }
              ]
            }
          },
          "no-redundant-type-constituents": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow members of unions and intersections that do nothing or override type information",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents"
              },
              "messages": {
                "errorTypeOverrides": "'{{typeName}}' is an 'error' type that acts as 'any' and overrides all other types in this {{container}} type.",
                "literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
                "overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
                "overrides": "'{{typeName}}' overrides all other types in this {{container}} type.",
                "primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type."
              },
              "schema": []
            }
          },
          "no-require-imports": {
            "defaultOptions": [
              {
                "allow": [],
                "allowAsImport": false
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow invocation of `require()`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              },
              "messages": {
                "noRequireImports": "A `require()` style import is forbidden."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "type": "array",
                      "description": "Patterns of import paths to allow requiring from.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "allowAsImport": {
                      "type": "boolean",
                      "description": "Allows `require` statements in import declarations."
                    }
                  }
                }
              ]
            }
          },
          "no-restricted-imports": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow specified modules when loaded by `import`",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-restricted-imports"
              },
              "messages": {
                "path": "'{{importSource}}' import is restricted from being used.",
                "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
                "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
                "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
                "patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
                "patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                "patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
                "patternAndEverythingWithRegexImportName": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
                "patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                "patternAndEverythingWithRegexImportNameAndCustomMessage": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
                "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
                "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
                "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
                "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
                "allowedImportName": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
                "allowedImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}",
                "everythingWithAllowImportNames": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
                "everythingWithAllowImportNamesAndCustomMessage": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}",
                "allowedImportNamePattern": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
                "allowedImportNamePatternWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}",
                "everythingWithAllowedImportNamePattern": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
                "everythingWithAllowedImportNamePatternWithCustomMessage": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}"
              },
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string",
                              "minLength": 1
                            },
                            "importNames": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowImportNames": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowTypeImports": {
                              "type": "boolean",
                              "description": "Whether to allow type-only imports for a path."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      ]
                    },
                    "uniqueItems": true
                  },
                  {
                    "type": "array",
                    "additionalItems": false,
                    "items": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "paths": "[Circular Reference]",
                          "patterns": {
                            "anyOf": [
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "uniqueItems": true
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "importNames": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minItems": 1,
                                      "uniqueItems": true
                                    },
                                    "allowImportNames": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minItems": 1,
                                      "uniqueItems": true
                                    },
                                    "group": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minItems": 1,
                                      "uniqueItems": true
                                    },
                                    "regex": {
                                      "type": "string"
                                    },
                                    "importNamePattern": {
                                      "type": "string"
                                    },
                                    "allowImportNamePattern": {
                                      "type": "string"
                                    },
                                    "message": {
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "caseSensitive": {
                                      "type": "boolean"
                                    },
                                    "allowTypeImports": "[Circular Reference]"
                                  }
                                },
                                "uniqueItems": true
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "no-restricted-types": {
            "defaultOptions": [
              {}
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow certain types",
                "url": "https://typescript-eslint.io/rules/no-restricted-types"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "bannedTypeMessage": "Don't use `{{name}}` as a type.{{customMessage}}",
                "bannedTypeReplacement": "Replace `{{name}}` with `{{replacement}}`."
              },
              "schema": [
                {
                  "type": "object",
                  "$defs": {
                    "banConfig": {
                      "oneOf": [
                        {
                          "type": "boolean",
                          "description": "Bans the type with the default message.",
                          "enum": [
                            true
                          ]
                        },
                        {
                          "type": "string",
                          "description": "Bans the type with a custom message."
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "description": "Bans a type.",
                          "properties": {
                            "fixWith": {
                              "type": "string",
                              "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option."
                            },
                            "message": {
                              "type": "string",
                              "description": "Custom error message."
                            },
                            "suggest": {
                              "type": "array",
                              "description": "Types to suggest replacing with.",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "properties": {
                    "types": {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/items/0/$defs/banConfig"
                      },
                      "description": "An object whose keys are the types you want to ban, and the values are error messages."
                    }
                  }
                }
              ]
            }
          },
          "no-shadow": {
            "defaultOptions": [
              {
                "allow": [],
                "builtinGlobals": false,
                "hoist": "functions-and-types",
                "ignoreFunctionTypeParameterNameValueShadow": true,
                "ignoreOnInitialization": false,
                "ignoreTypeValueShadow": true
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-shadow"
              },
              "messages": {
                "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
                "noShadowGlobal": "'{{name}}' is already a global variable."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "type": "array",
                      "description": "Identifier names for which shadowing is allowed.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "builtinGlobals": {
                      "type": "boolean",
                      "description": "Whether to report shadowing of built-in global variables."
                    },
                    "hoist": {
                      "type": "string",
                      "description": "Whether to report shadowing before outer functions or variables are defined.",
                      "enum": [
                        "all",
                        "functions",
                        "functions-and-types",
                        "never",
                        "types"
                      ]
                    },
                    "ignoreFunctionTypeParameterNameValueShadow": {
                      "type": "boolean",
                      "description": "Whether to ignore function parameters named the same as a variable."
                    },
                    "ignoreOnInitialization": {
                      "type": "boolean",
                      "description": "Whether to ignore the variable initializers when the shadowed variable is presumably still unitialized."
                    },
                    "ignoreTypeValueShadow": {
                      "type": "boolean",
                      "description": "Whether to ignore types named the same as a variable."
                    }
                  }
                }
              ]
            }
          },
          "no-this-alias": {
            "defaultOptions": [
              {
                "allowDestructuring": true,
                "allowedNames": []
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow aliasing `this`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-this-alias"
              },
              "messages": {
                "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
                "thisDestructure": "Unexpected aliasing of members of 'this' to local variables."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowDestructuring": {
                      "type": "boolean",
                      "description": "Whether to ignore destructurings, such as `const { props, state } = this`."
                    },
                    "allowedNames": {
                      "type": "array",
                      "description": "Names to ignore, such as [\"self\"] for `const self = this;`.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "no-type-alias": {
            "defaultOptions": [
              {
                "allowAliases": "never",
                "allowCallbacks": "never",
                "allowConditionalTypes": "never",
                "allowConstructors": "never",
                "allowGenerics": "never",
                "allowLiterals": "never",
                "allowMappedTypes": "never",
                "allowTupleTypes": "never"
              }
            ],
            "meta": {
              "type": "suggestion",
              "deprecated": {
                "deprecatedSince": "6.0.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "@typescript-eslint/consistent-type-definitions",
                      "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
                    }
                  }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/6229"
              },
              "docs": {
                "description": "Disallow type aliases",
                "url": "https://typescript-eslint.io/rules/no-type-alias"
              },
              "messages": {
                "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed.",
                "noTypeAlias": "Type {{alias}} are not allowed."
              },
              "schema": [
                {
                  "type": "object",
                  "$defs": {
                    "expandedOptions": {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "in-unions",
                        "in-intersections",
                        "in-unions-and-intersections"
                      ]
                    },
                    "simpleOptions": {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "properties": {
                    "allowAliases": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow direct one-to-one type aliases."
                    },
                    "allowCallbacks": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases for callbacks."
                    },
                    "allowConditionalTypes": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases for conditional types."
                    },
                    "allowConstructors": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases with constructors."
                    },
                    "allowGenerics": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases with generic types."
                    },
                    "allowLiterals": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with object literal types."
                    },
                    "allowMappedTypes": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with mapped types."
                    },
                    "allowTupleTypes": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with tuple types."
                    }
                  }
                }
              ]
            }
          },
          "no-unnecessary-boolean-literal-compare": {
            "defaultOptions": [
              {
                "allowComparingNullableBooleansToFalse": true,
                "allowComparingNullableBooleansToTrue": true,
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow unnecessary equality comparisons against boolean literals",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare"
              },
              "fixable": "code",
              "messages": {
                "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.",
                "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
                "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
                "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
                "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
                "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowComparingNullableBooleansToFalse": {
                      "type": "boolean",
                      "description": "Whether to allow comparisons between nullable boolean variables and `false`."
                    },
                    "allowComparingNullableBooleansToTrue": {
                      "type": "boolean",
                      "description": "Whether to allow comparisons between nullable boolean variables and `true`."
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "type": "boolean",
                      "description": "Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`."
                    }
                  }
                }
              ]
            }
          },
          "no-unnecessary-condition": {
            "defaultOptions": [
              {
                "allowConstantLoopConditions": "never",
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "checkTypePredicates": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow conditionals where the type is always truthy or always falsy",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-condition"
              },
              "fixable": "code",
              "messages": {
                "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
                "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
                "alwaysNullish": "Unnecessary conditional, left-hand side of `??` operator is always `null` or `undefined`.",
                "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
                "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
                "comparisonBetweenLiteralTypes": "Unnecessary conditional, comparison is always {{trueOrFalse}}, since `{{left}} {{operator}} {{right}}` is {{trueOrFalse}}.",
                "never": "Unnecessary conditional, value is `never`.",
                "neverNullish": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
                "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
                "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
                "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
                "typeGuardAlreadyIsType": "Unnecessary conditional, expression already has the type being checked by the {{typeGuardOrAssertionFunction}}."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowConstantLoopConditions": {
                      "description": "Whether to ignore constant loop conditions, such as `while (true)`.",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "only-allowed-literals"
                          ]
                        }
                      ]
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "type": "boolean",
                      "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned."
                    },
                    "checkTypePredicates": {
                      "type": "boolean",
                      "description": "Whether to check the asserted argument of a type predicate function for unnecessary conditions"
                    }
                  }
                }
              ]
            }
          },
          "no-unnecessary-parameter-property-assignment": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow unnecessary assignment of constructor property parameter",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment"
              },
              "messages": {
                "unnecessaryAssign": "This assignment is unnecessary since it is already assigned by a parameter property."
              },
              "schema": []
            }
          },
          "no-unnecessary-qualifier": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow unnecessary namespace qualifiers",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier"
              },
              "fixable": "code",
              "messages": {
                "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope."
              },
              "schema": []
            }
          },
          "no-unnecessary-template-expression": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow unnecessary template expressions",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression"
              },
              "fixable": "code",
              "messages": {
                "noUnnecessaryTemplateExpression": "Template literal expression is unnecessary and can be simplified."
              },
              "schema": []
            }
          },
          "no-unnecessary-type-arguments": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow type arguments that are equal to the default",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments"
              },
              "fixable": "code",
              "messages": {
                "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted."
              },
              "schema": []
            }
          },
          "no-unnecessary-type-assertion": {
            "defaultOptions": [
              {}
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow type assertions that do not change the type of an expression",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion"
              },
              "fixable": "code",
              "messages": {
                "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression.",
                "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "typesToIgnore": {
                      "type": "array",
                      "description": "A list of type names to ignore.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "no-unnecessary-type-constraint": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow unnecessary constraints on generic types",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint"
              },
              "hasSuggestions": true,
              "messages": {
                "removeUnnecessaryConstraint": "Remove the unnecessary `{{constraint}}` constraint.",
                "unnecessaryConstraint": "Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary."
              },
              "schema": []
            }
          },
          "no-unnecessary-type-parameters": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow type parameters that aren't used multiple times",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters"
              },
              "hasSuggestions": true,
              "messages": {
                "replaceUsagesWithConstraint": "Replace all usages of type parameter with its constraint.",
                "sole": "Type parameter {{name}} is {{uses}} in the {{descriptor}} signature."
              },
              "schema": []
            }
          },
          "no-unsafe-argument": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow calling a function with a value with type `any`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-argument"
              },
              "messages": {
                "unsafeArgument": "Unsafe argument of type {{sender}} assigned to a parameter of type {{receiver}}.",
                "unsafeArraySpread": "Unsafe spread of an {{sender}} array type.",
                "unsafeSpread": "Unsafe spread of an {{sender}} type.",
                "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is {{sender}} and is assigned to a parameter of type {{receiver}}."
              },
              "schema": []
            }
          },
          "no-unsafe-assignment": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow assigning a value with type `any` to variables and properties",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-assignment"
              },
              "messages": {
                "anyAssignment": "Unsafe assignment of an {{sender}} value.",
                "anyAssignmentThis": "Unsafe assignment of an {{sender}} value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
                "unsafeArrayPattern": "Unsafe array destructuring of an {{sender}} array value.",
                "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an {{sender}} value.",
                "unsafeArraySpread": "Unsafe spread of an {{sender}} value in an array.",
                "unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}."
              },
              "schema": []
            }
          },
          "no-unsafe-call": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow calling a value with type `any`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-call"
              },
              "messages": {
                "unsafeCall": "Unsafe call of a(n) {{type}} typed value.",
                "unsafeCallThis": "Unsafe call of a(n) {{type}} typed value. `this` is typed as {{type}}.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
                "unsafeNew": "Unsafe construction of a(n) {{type}} typed value.",
                "unsafeTemplateTag": "Unsafe use of a(n) {{type}} typed template tag."
              },
              "schema": []
            }
          },
          "no-unsafe-declaration-merging": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow unsafe declaration merging",
                "recommended": "recommended",
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging"
              },
              "messages": {
                "unsafeMerging": "Unsafe declaration merging between classes and interfaces."
              },
              "schema": []
            }
          },
          "no-unsafe-enum-comparison": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow comparing an enum value with a non-enum value",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison"
              },
              "hasSuggestions": true,
              "messages": {
                "mismatchedCase": "The case statement does not have a shared enum type with the switch predicate.",
                "mismatchedCondition": "The two values in this comparison do not have a shared enum type.",
                "replaceValueWithEnum": "Replace with an enum value comparison."
              },
              "schema": []
            }
          },
          "no-unsafe-function-type": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow using the unsafe built-in Function type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unsafe-function-type"
              },
              "messages": {
                "bannedFunctionType": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type."
              },
              "schema": []
            }
          },
          "no-unsafe-member-access": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow member access on a value with type `any`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-member-access"
              },
              "messages": {
                "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an {{type}} value.",
                "unsafeMemberExpression": "Unsafe member access {{property}} on an {{type}} value.",
                "unsafeThisMemberExpression": "Unsafe member access {{property}} on an `any` value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function."
              },
              "schema": []
            }
          },
          "no-unsafe-return": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow returning a value with type `any` from a function",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-return"
              },
              "messages": {
                "unsafeReturn": "Unsafe return of a value of type {{type}}.",
                "unsafeReturnAssignment": "Unsafe return of type `{{sender}}` from function with return type `{{receiver}}`.",
                "unsafeReturnThis": "Unsafe return of a value of type `{{type}}`. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function."
              },
              "schema": []
            }
          },
          "no-unsafe-type-assertion": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow type assertions that narrow a type",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-type-assertion"
              },
              "messages": {
                "unsafeOfAnyTypeAssertion": "Unsafe assertion from {{type}} detected: consider using type guards or a safer assertion.",
                "unsafeToAnyTypeAssertion": "Unsafe assertion to {{type}} detected: consider using a more specific type to ensure safety.",
                "unsafeToUnconstrainedTypeAssertion": "Unsafe type assertion: '{{type}}' could be instantiated with an arbitrary type which could be unrelated to the original type.",
                "unsafeTypeAssertion": "Unsafe type assertion: type '{{type}}' is more narrow than the original type.",
                "unsafeTypeAssertionAssignableToConstraint": "Unsafe type assertion: the original type is assignable to the constraint of type '{{type}}', but '{{type}}' could be instantiated with a different subtype of its constraint."
              },
              "schema": []
            }
          },
          "no-unsafe-unary-minus": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require unary negation to take a number",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus"
              },
              "messages": {
                "unaryMinus": "Argument of unary negation should be assignable to number | bigint but is {{type}} instead."
              },
              "schema": []
            }
          },
          "no-unused-expressions": {
            "defaultOptions": [
              {
                "allowShortCircuit": false,
                "allowTaggedTemplates": false,
                "allowTernary": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "defaultOptions": "[Circular Reference]",
              "docs": {
                "description": "Disallow unused expressions",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unused-expressions"
              },
              "messages": {
                "unusedExpression": "Expected an assignment or function call and instead saw an expression."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowShortCircuit": {
                      "type": "boolean"
                    },
                    "allowTernary": {
                      "type": "boolean"
                    },
                    "allowTaggedTemplates": {
                      "type": "boolean"
                    },
                    "enforceForJSX": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-unused-vars": {
            "defaultOptions": [
              {}
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unused-vars"
              },
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
                "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}."
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "all",
                        "local"
                      ]
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "type": "string",
                          "description": "Whether to check all, some, or no arguments.",
                          "enum": [
                            "all",
                            "after-used",
                            "none"
                          ]
                        },
                        "argsIgnorePattern": {
                          "type": "string",
                          "description": "Regular expressions of argument names to not check for usage."
                        },
                        "caughtErrors": {
                          "type": "string",
                          "description": "Whether to check catch block arguments.",
                          "enum": [
                            "all",
                            "none"
                          ]
                        },
                        "caughtErrorsIgnorePattern": {
                          "type": "string",
                          "description": "Regular expressions of catch block argument names to not check for usage."
                        },
                        "destructuredArrayIgnorePattern": {
                          "type": "string",
                          "description": "Regular expressions of destructured array variable names to not check for usage."
                        },
                        "ignoreClassWithStaticInitBlock": {
                          "type": "boolean",
                          "description": "Whether to ignore classes with at least one static initialization block."
                        },
                        "ignoreRestSiblings": {
                          "type": "boolean",
                          "description": "Whether to ignore sibling properties in `...` destructurings."
                        },
                        "reportUsedIgnorePattern": {
                          "type": "boolean",
                          "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used."
                        },
                        "vars": {
                          "type": "string",
                          "description": "Whether to check all variables or only locally-declared variables.",
                          "enum": [
                            "all",
                            "local"
                          ]
                        },
                        "varsIgnorePattern": {
                          "type": "string",
                          "description": "Regular expressions of variable names to not check for usage."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "no-use-before-define": {
            "defaultOptions": [
              {
                "allowNamedExports": false,
                "classes": true,
                "enums": true,
                "functions": true,
                "ignoreTypeReferences": true,
                "typedefs": true,
                "variables": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow the use of variables before they are defined",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-use-before-define"
              },
              "messages": {
                "noUseBeforeDefine": "'{{name}}' was used before it was defined."
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "nofunc"
                      ]
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "allowNamedExports": {
                          "type": "boolean",
                          "description": "Whether to ignore named exports."
                        },
                        "classes": {
                          "type": "boolean",
                          "description": "Whether to ignore references to class declarations."
                        },
                        "enums": {
                          "type": "boolean",
                          "description": "Whether to check references to enums."
                        },
                        "functions": {
                          "type": "boolean",
                          "description": "Whether to ignore references to function declarations."
                        },
                        "ignoreTypeReferences": {
                          "type": "boolean",
                          "description": "Whether to ignore type references, such as in type annotations and assertions."
                        },
                        "typedefs": {
                          "type": "boolean",
                          "description": "Whether to check references to types."
                        },
                        "variables": {
                          "type": "boolean",
                          "description": "Whether to ignore references to variables."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "no-useless-constructor": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow unnecessary constructors",
                "extendsBaseRule": true,
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-useless-constructor"
              },
              "hasSuggestions": true,
              "messages": {
                "noUselessConstructor": "Useless constructor.",
                "removeConstructor": "Remove the constructor."
              },
              "schema": []
            }
          },
          "no-useless-empty-export": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow empty exports that don't change anything in a module file",
                "url": "https://typescript-eslint.io/rules/no-useless-empty-export"
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "uselessExport": "Empty export does nothing and can be removed."
              },
              "schema": []
            }
          },
          "no-var-requires": {
            "defaultOptions": [
              {
                "allow": []
              }
            ],
            "meta": {
              "type": "problem",
              "deprecated": {
                "deprecatedSince": "8.0.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "@typescript-eslint/no-require-imports",
                      "url": "https://typescript-eslint.io/rules/no-require-imports"
                    }
                  }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
              },
              "docs": {
                "description": "Disallow `require` statements except in import statements",
                "url": "https://typescript-eslint.io/rules/no-var-requires"
              },
              "messages": {
                "noVarReqs": "Require statement not part of import statement."
              },
              "replacedBy": [
                "@typescript-eslint/no-require-imports"
              ],
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "type": "array",
                      "description": "Patterns of import paths to allow requiring from.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "no-wrapper-object-types": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow using confusing built-in primitive class wrappers",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-wrapper-object-types"
              },
              "fixable": "code",
              "messages": {
                "bannedClassType": "Prefer using the primitive `{{preferred}}` as a type name, rather than the upper-cased `{{typeName}}`."
              },
              "schema": []
            }
          },
          "non-nullable-type-assertion-style": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce non-null assertions over explicit type assertions",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style"
              },
              "fixable": "code",
              "messages": {
                "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type."
              },
              "schema": []
            }
          },
          "only-throw-error": {
            "defaultOptions": [
              {
                "allow": [],
                "allowThrowingAny": true,
                "allowThrowingUnknown": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow throwing non-`Error` values as exceptions",
                "extendsBaseRule": "no-throw-literal",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/only-throw-error"
              },
              "messages": {
                "object": "Expected an error object to be thrown.",
                "undef": "Do not throw undefined."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": "[Circular Reference]",
                      "type": "array",
                      "description": "Type specifiers that can be thrown."
                    },
                    "allowThrowingAny": {
                      "type": "boolean",
                      "description": "Whether to always allow throwing values typed as `any`."
                    },
                    "allowThrowingUnknown": {
                      "type": "boolean",
                      "description": "Whether to always allow throwing values typed as `unknown`."
                    }
                  }
                }
              ]
            }
          },
          "parameter-properties": {
            "defaultOptions": [
              {
                "allow": [],
                "prefer": "class-property"
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require or disallow parameter properties in class constructors",
                "url": "https://typescript-eslint.io/rules/parameter-properties"
              },
              "messages": {
                "preferClassProperty": "Property {{parameter}} should be declared as a class property.",
                "preferParameterProperty": "Property {{parameter}} should be declared as a parameter property."
              },
              "schema": [
                {
                  "type": "object",
                  "$defs": {
                    "modifier": {
                      "type": "string",
                      "enum": [
                        "readonly",
                        "private",
                        "protected",
                        "public",
                        "private readonly",
                        "protected readonly",
                        "public readonly"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "type": "array",
                      "description": "Whether to allow certain kinds of properties to be ignored.",
                      "items": {
                        "$ref": "#/items/0/$defs/modifier"
                      }
                    },
                    "prefer": {
                      "type": "string",
                      "description": "Whether to prefer class properties or parameter properties.",
                      "enum": [
                        "class-property",
                        "parameter-property"
                      ]
                    }
                  }
                }
              ]
            }
          },
          "prefer-as-const": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce the use of `as const` over literal type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/prefer-as-const"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "preferConstAssertion": "Expected a `const` instead of a literal type assertion.",
                "variableConstAssertion": "Expected a `const` assertion instead of a literal type annotation.",
                "variableSuggest": "You should use `as const` instead of type annotation."
              },
              "schema": []
            }
          },
          "prefer-destructuring": {
            "defaultOptions": [
              {
                "AssignmentExpression": {
                  "array": true,
                  "object": true
                },
                "VariableDeclarator": {
                  "array": true,
                  "object": true
                }
              },
              {}
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require destructuring from arrays and/or objects",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-destructuring"
              },
              "fixable": "code",
              "messages": {
                "preferDestructuring": "Use {{type}} destructuring."
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "AssignmentExpression": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "array": {
                              "type": "boolean"
                            },
                            "object": {
                              "type": "boolean"
                            }
                          }
                        },
                        "VariableDeclarator": "[Circular Reference]"
                      }
                    },
                    "[Circular Reference]"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "enforceForDeclarationWithTypeAnnotation": {
                      "type": "boolean",
                      "description": "Whether to enforce destructuring on variable declarations with type annotations."
                    },
                    "enforceForRenamedProperties": {
                      "type": "boolean",
                      "description": "Whether to enforce destructuring that use a different variable name than the property name."
                    }
                  }
                }
              ]
            }
          },
          "prefer-enum-initializers": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require each enum member value to be explicitly initialized",
                "url": "https://typescript-eslint.io/rules/prefer-enum-initializers"
              },
              "hasSuggestions": true,
              "messages": {
                "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
                "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}"
              },
              "schema": []
            }
          },
          "prefer-find": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-find"
              },
              "hasSuggestions": true,
              "messages": {
                "preferFind": "Prefer .find(...) instead of .filter(...)[0].",
                "preferFindSuggestion": "Use .find(...) instead of .filter(...)[0]."
              },
              "schema": []
            }
          },
          "prefer-for-of": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/prefer-for-of"
              },
              "messages": {
                "preferForOf": "Expected a `for-of` loop instead of a `for` loop with this simple iteration."
              },
              "schema": []
            }
          },
          "prefer-function-type": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce using function types instead of interfaces with call signatures",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/prefer-function-type"
              },
              "fixable": "code",
              "messages": {
                "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
                "unexpectedThisOnFunctionOnlyInterface": "`this` refers to the function type '{{ interfaceName }}', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?"
              },
              "schema": []
            }
          },
          "prefer-includes": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce `includes` method over `indexOf` method",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-includes"
              },
              "fixable": "code",
              "messages": {
                "preferIncludes": "Use 'includes()' method instead.",
                "preferStringIncludes": "Use `String#includes()` method with a string instead."
              },
              "schema": []
            }
          },
          "prefer-literal-enum-member": {
            "defaultOptions": [
              {
                "allowBitwiseExpressions": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require all enum members to be literal values",
                "recommended": "strict",
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member"
              },
              "messages": {
                "notLiteral": "Explicit enum value must only be a literal value (string or number).",
                "notLiteralOrBitwiseExpression": "Explicit enum value must only be a literal value (string or number) or a bitwise expression."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowBitwiseExpressions": {
                      "type": "boolean",
                      "description": "Whether to allow using bitwise expressions in enum initializers."
                    }
                  }
                }
              ]
            }
          },
          "prefer-namespace-keyword": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword"
              },
              "fixable": "code",
              "messages": {
                "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules."
              },
              "schema": []
            }
          },
          "prefer-nullish-coalescing": {
            "defaultOptions": [
              {
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "ignoreBooleanCoercion": false,
                "ignoreConditionalTests": true,
                "ignoreMixedLogicalExpressions": false,
                "ignorePrimitives": {
                  "bigint": false,
                  "boolean": false,
                  "number": false,
                  "string": false
                },
                "ignoreTernaryTests": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing"
              },
              "hasSuggestions": true,
              "messages": {
                "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
                "preferNullishOverAssignment": "Prefer using nullish coalescing operator (`??{{ equals }}`) instead of an assignment expression, as it is simpler to read.",
                "preferNullishOverOr": "Prefer using nullish coalescing operator (`??{{ equals }}`) instead of a logical {{ description }} (`||{{ equals }}`), as it is a safer operator.",
                "preferNullishOverTernary": "Prefer using nullish coalescing operator (`??{{ equals }}`) instead of a ternary expression, as it is simpler to read.",
                "suggestNullish": "Fix to nullish coalescing operator (`??{{ equals }}`)."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "type": "boolean",
                      "description": "Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`."
                    },
                    "ignoreBooleanCoercion": {
                      "type": "boolean",
                      "description": "Whether to ignore arguments to the `Boolean` constructor"
                    },
                    "ignoreConditionalTests": {
                      "type": "boolean",
                      "description": "Whether to ignore cases that are located within a conditional test."
                    },
                    "ignoreMixedLogicalExpressions": {
                      "type": "boolean",
                      "description": "Whether to ignore any logical or expressions that are part of a mixed logical expression (with `&&`)."
                    },
                    "ignorePrimitives": {
                      "description": "Whether to ignore all (`true`) or some (an object with properties) primitive types.",
                      "oneOf": [
                        {
                          "type": "object",
                          "description": "Which primitives types may be ignored.",
                          "properties": {
                            "bigint": {
                              "type": "boolean",
                              "description": "Ignore bigint primitive types."
                            },
                            "boolean": {
                              "type": "boolean",
                              "description": "Ignore boolean primitive types."
                            },
                            "number": {
                              "type": "boolean",
                              "description": "Ignore number primitive types."
                            },
                            "string": {
                              "type": "boolean",
                              "description": "Ignore string primitive types."
                            }
                          }
                        },
                        {
                          "type": "boolean",
                          "description": "Ignore all primitive types.",
                          "enum": [
                            true
                          ]
                        }
                      ]
                    },
                    "ignoreTernaryTests": {
                      "type": "boolean",
                      "description": "Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator."
                    }
                  }
                }
              ]
            }
          },
          "prefer-optional-chain": {
            "defaultOptions": [
              {
                "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": false,
                "checkAny": true,
                "checkBigInt": true,
                "checkBoolean": true,
                "checkNumber": true,
                "checkString": true,
                "checkUnknown": true,
                "requireNullish": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-optional-chain"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "optionalChainSuggest": "Change to an optional chain.",
                "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                      "type": "boolean",
                      "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build."
                    },
                    "checkAny": {
                      "type": "boolean",
                      "description": "Check operands that are typed as `any` when inspecting \"loose boolean\" operands."
                    },
                    "checkBigInt": {
                      "type": "boolean",
                      "description": "Check operands that are typed as `bigint` when inspecting \"loose boolean\" operands."
                    },
                    "checkBoolean": {
                      "type": "boolean",
                      "description": "Check operands that are typed as `boolean` when inspecting \"loose boolean\" operands."
                    },
                    "checkNumber": {
                      "type": "boolean",
                      "description": "Check operands that are typed as `number` when inspecting \"loose boolean\" operands."
                    },
                    "checkString": {
                      "type": "boolean",
                      "description": "Check operands that are typed as `string` when inspecting \"loose boolean\" operands."
                    },
                    "checkUnknown": {
                      "type": "boolean",
                      "description": "Check operands that are typed as `unknown` when inspecting \"loose boolean\" operands."
                    },
                    "requireNullish": {
                      "type": "boolean",
                      "description": "Skip operands that are not typed with `null` and/or `undefined` when inspecting \"loose boolean\" operands."
                    }
                  }
                }
              ]
            }
          },
          "prefer-promise-reject-errors": {
            "defaultOptions": [
              {
                "allowEmptyReject": false,
                "allowThrowingAny": false,
                "allowThrowingUnknown": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require using Error objects as Promise rejection reasons",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors"
              },
              "messages": {
                "rejectAnError": "Expected the Promise rejection reason to be an Error."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowEmptyReject": {
                      "type": "boolean",
                      "description": "Whether to allow calls to `Promise.reject()` with no arguments."
                    },
                    "allowThrowingAny": {
                      "type": "boolean",
                      "description": "Whether to always allow throwing values typed as `any`."
                    },
                    "allowThrowingUnknown": {
                      "type": "boolean",
                      "description": "Whether to always allow throwing values typed as `unknown`."
                    }
                  }
                }
              ]
            }
          },
          "prefer-readonly": {
            "defaultOptions": [
              {
                "onlyInlineLambdas": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-readonly"
              },
              "fixable": "code",
              "messages": {
                "preferReadonly": "Member '{{name}}' is never reassigned; mark it as `readonly`."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "onlyInlineLambdas": {
                      "type": "boolean",
                      "description": "Whether to restrict checking only to members immediately assigned a lambda value."
                    }
                  }
                }
              ]
            }
          },
          "prefer-readonly-parameter-types": {
            "defaultOptions": [
              {
                "allow": "[Circular Reference]",
                "checkParameterProperties": true,
                "ignoreInferredTypes": false,
                "treatMethodsAsReadonly": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types"
              },
              "messages": {
                "shouldBeReadonly": "Parameter should be a read only type."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": "[Circular Reference]",
                      "type": "array",
                      "description": "An array of type specifiers to ignore."
                    },
                    "checkParameterProperties": {
                      "type": "boolean",
                      "description": "Whether to check class parameter properties."
                    },
                    "ignoreInferredTypes": {
                      "type": "boolean",
                      "description": "Whether to ignore parameters which don't explicitly specify a type."
                    },
                    "treatMethodsAsReadonly": {
                      "type": "boolean",
                      "description": "Whether to treat all mutable methods as though they are readonly."
                    }
                  }
                }
              ]
            }
          },
          "prefer-reduce-type-parameter": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce using type parameter when calling `Array#reduce` instead of using a type assertion",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter"
              },
              "fixable": "code",
              "messages": {
                "preferTypeParameter": "Unnecessary assertion: Array#reduce accepts a type parameter for the default value."
              },
              "schema": []
            }
          },
          "prefer-regexp-exec": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-regexp-exec"
              },
              "fixable": "code",
              "messages": {
                "regExpExecOverStringMatch": "Use the `RegExp#exec()` method instead."
              },
              "schema": []
            }
          },
          "prefer-return-this-type": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce that `this` is used when only `this` type is returned",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-return-this-type"
              },
              "fixable": "code",
              "messages": {
                "useThisType": "Use `this` type instead."
              },
              "schema": []
            }
          },
          "prefer-string-starts-ends-with": {
            "defaultOptions": [
              {
                "allowSingleElementEquality": "never"
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with"
              },
              "fixable": "code",
              "messages": {
                "preferEndsWith": "Use the 'String#endsWith' method instead.",
                "preferStartsWith": "Use 'String#startsWith' method instead."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleElementEquality": {
                      "type": "string",
                      "description": "Whether to allow equality checks against the first or last element of a string.",
                      "enum": [
                        "always",
                        "never"
                      ]
                    }
                  }
                }
              ]
            }
          },
          "prefer-ts-expect-error": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "deprecated": {
                "deprecatedSince": "7.11.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "@typescript-eslint/ban-ts-comment",
                      "url": "https://typescript-eslint.io/rules/ban-ts-comment"
                    }
                  }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
              },
              "docs": {
                "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
                "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error"
              },
              "fixable": "code",
              "messages": {
                "preferExpectErrorComment": "Use \"@ts-expect-error\" to ensure an error is actually being suppressed."
              },
              "replacedBy": [
                "@typescript-eslint/ban-ts-comment"
              ],
              "schema": []
            }
          },
          "promise-function-async": {
            "defaultOptions": [
              {
                "allowAny": true,
                "allowedPromiseNames": [],
                "checkArrowFunctions": true,
                "checkFunctionDeclarations": true,
                "checkFunctionExpressions": true,
                "checkMethodDeclarations": true
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require any function or method that returns a Promise to be marked async",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/promise-function-async"
              },
              "fixable": "code",
              "messages": {
                "missingAsync": "Functions that return promises must be async."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "type": "boolean",
                      "description": "Whether to consider `any` and `unknown` to be Promises."
                    },
                    "allowedPromiseNames": {
                      "type": "array",
                      "description": "Any extra names of classes or interfaces to be considered Promises.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "checkArrowFunctions": {
                      "type": "boolean",
                      "description": "Whether to check arrow functions."
                    },
                    "checkFunctionDeclarations": {
                      "type": "boolean",
                      "description": "Whether to check standalone function declarations."
                    },
                    "checkFunctionExpressions": {
                      "type": "boolean",
                      "description": "Whether to check inline function expressions"
                    },
                    "checkMethodDeclarations": {
                      "type": "boolean",
                      "description": "Whether to check methods on classes and object literals."
                    }
                  }
                }
              ]
            }
          },
          "related-getter-setter-pairs": {
            "defaultOptions": [],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce that `get()` types should be assignable to their equivalent `set()` type",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/related-getter-setter-pairs"
              },
              "messages": {
                "mismatch": "`get()` type should be assignable to its equivalent `set()` type."
              },
              "schema": []
            }
          },
          "require-array-sort-compare": {
            "defaultOptions": [
              {
                "ignoreStringArrays": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/require-array-sort-compare"
              },
              "messages": {
                "requireCompare": "Require 'compare' argument."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStringArrays": {
                      "type": "boolean",
                      "description": "Whether to ignore arrays in which all elements are strings."
                    }
                  }
                }
              ]
            }
          },
          "require-await": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow async functions which do not return promises and have no `await` expression",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/require-await"
              },
              "hasSuggestions": true,
              "messages": {
                "missingAwait": "{{name}} has no 'await' expression.",
                "removeAsync": "Remove 'async'."
              },
              "schema": []
            }
          },
          "restrict-plus-operands": {
            "defaultOptions": [
              {
                "allowAny": true,
                "allowBoolean": true,
                "allowNullish": true,
                "allowNumberAndString": true,
                "allowRegExp": true,
                "skipCompoundAssignments": false
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNullish": false,
                      "allowNumberAndString": false,
                      "allowRegExp": false
                    }
                  ]
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/restrict-plus-operands"
              },
              "messages": {
                "bigintAndNumber": "Numeric '+' operations must either be both bigints or both numbers. Got `{{left}}` + `{{right}}`.",
                "invalid": "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got `{{type}}`.",
                "mismatched": "Operands of '+' operations must be a number or {{stringLike}}. Got `{{left}}` + `{{right}}`."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "type": "boolean",
                      "description": "Whether to allow `any` typed values."
                    },
                    "allowBoolean": {
                      "type": "boolean",
                      "description": "Whether to allow `boolean` typed values."
                    },
                    "allowNullish": {
                      "type": "boolean",
                      "description": "Whether to allow potentially `null` or `undefined` typed values."
                    },
                    "allowNumberAndString": {
                      "type": "boolean",
                      "description": "Whether to allow `bigint`/`number` typed values and `string` typed values to be added together."
                    },
                    "allowRegExp": {
                      "type": "boolean",
                      "description": "Whether to allow `regexp` typed values."
                    },
                    "skipCompoundAssignments": {
                      "type": "boolean",
                      "description": "Whether to skip compound assignments such as `+=`."
                    }
                  }
                }
              ]
            }
          },
          "restrict-template-expressions": {
            "defaultOptions": [
              {
                "allow": [
                  {
                    "name": [
                      "Error",
                      "URL",
                      "URLSearchParams"
                    ],
                    "from": "lib"
                  }
                ],
                "allowAny": true,
                "allowBoolean": true,
                "allowNullish": true,
                "allowNumber": true,
                "allowRegExp": true
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce template literal expressions to be of `string` type",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNever": false,
                      "allowNullish": false,
                      "allowNumber": false,
                      "allowRegExp": false
                    }
                  ]
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/restrict-template-expressions"
              },
              "messages": {
                "invalidType": "Invalid type \"{{type}}\" of template literal expression."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "type": "boolean",
                      "description": "Whether to allow `any` typed values in template expressions."
                    },
                    "allowArray": {
                      "type": "boolean",
                      "description": "Whether to allow `array` typed values in template expressions."
                    },
                    "allowBoolean": {
                      "type": "boolean",
                      "description": "Whether to allow `boolean` typed values in template expressions."
                    },
                    "allowNullish": {
                      "type": "boolean",
                      "description": "Whether to allow `nullish` typed values in template expressions."
                    },
                    "allowNumber": {
                      "type": "boolean",
                      "description": "Whether to allow `number` typed values in template expressions."
                    },
                    "allowRegExp": {
                      "type": "boolean",
                      "description": "Whether to allow `regexp` typed values in template expressions."
                    },
                    "allowNever": {
                      "type": "boolean",
                      "description": "Whether to allow `never` typed values in template expressions."
                    },
                    "allow": {
                      "description": "Types to allow in template expressions.",
                      "items": "[Circular Reference]",
                      "type": "array"
                    }
                  }
                }
              ]
            }
          },
          "return-await": {
            "defaultOptions": [
              "in-try-catch"
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce consistent awaiting of returned promises",
                "recommended": {
                  "strict": [
                    "error-handling-correctness-only"
                  ]
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/return-await"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
                "disallowedPromiseAwaitSuggestion": "Remove `await` before the expression. Use caution as this may impact control flow.",
                "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
                "requiredPromiseAwait": "Returning an awaited promise is required in this context.",
                "requiredPromiseAwaitSuggestion": "Add `await` before the expression. Use caution as this may impact control flow."
              },
              "schema": [
                {
                  "type": "string",
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Requires that all returned promises be awaited.",
                      "enum": [
                        "always"
                      ]
                    },
                    {
                      "type": "string",
                      "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule does not enforce any particular behavior around whether returned promises are awaited.",
                      "enum": [
                        "error-handling-correctness-only"
                      ]
                    },
                    {
                      "type": "string",
                      "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule enforces that returned promises _must not_ be awaited.",
                      "enum": [
                        "in-try-catch"
                      ]
                    },
                    {
                      "type": "string",
                      "description": "Disallows awaiting any returned promises.",
                      "enum": [
                        "never"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "sort-type-constituents": {
            "defaultOptions": [
              {
                "caseSensitive": false,
                "checkIntersections": true,
                "checkUnions": true,
                "groupOrder": [
                  "named",
                  "keyword",
                  "operator",
                  "literal",
                  "function",
                  "import",
                  "conditional",
                  "object",
                  "tuple",
                  "intersection",
                  "union",
                  "nullish"
                ]
              }
            ],
            "meta": {
              "type": "suggestion",
              "deprecated": {
                "deprecatedSince": "7.13.0",
                "replacedBy": [
                  {
                    "plugin": {
                      "name": "eslint-plugin-perfectionist",
                      "url": "https://perfectionist.dev"
                    },
                    "rule": {
                      "name": "perfectionist/sort-intersection-types",
                      "url": "https://perfectionist.dev/rules/sort-intersection-types"
                    }
                  },
                  {
                    "plugin": {
                      "name": "eslint-plugin-perfectionist",
                      "url": "https://perfectionist.dev"
                    },
                    "rule": {
                      "name": "perfectionist/sort-union-types",
                      "url": "https://perfectionist.dev/rules/sort-union-types"
                    }
                  }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9253"
              },
              "docs": {
                "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
                "url": "https://typescript-eslint.io/rules/sort-type-constituents"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "notSorted": "{{type}} type constituents must be sorted.",
                "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
                "suggestFix": "Sort constituents of type (removes all comments)."
              },
              "replacedBy": [
                "perfectionist/sort-intersection-types",
                "perfectionist/sort-union-types"
              ],
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "caseSensitive": {
                      "type": "boolean",
                      "description": "Whether to sort using case sensitive string comparisons."
                    },
                    "checkIntersections": {
                      "type": "boolean",
                      "description": "Whether to check intersection types (`&`)."
                    },
                    "checkUnions": {
                      "type": "boolean",
                      "description": "Whether to check union types (`|`)."
                    },
                    "groupOrder": {
                      "type": "array",
                      "description": "Ordering of the groups.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "conditional",
                          "function",
                          "import",
                          "intersection",
                          "keyword",
                          "nullish",
                          "literal",
                          "named",
                          "object",
                          "operator",
                          "tuple",
                          "union"
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "strict-boolean-expressions": {
            "defaultOptions": [
              {
                "allowAny": false,
                "allowNullableBoolean": false,
                "allowNullableEnum": false,
                "allowNullableNumber": false,
                "allowNullableObject": true,
                "allowNullableString": false,
                "allowNumber": true,
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "allowString": true
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow certain types in boolean expressions",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/strict-boolean-expressions"
              },
              "hasSuggestions": true,
              "messages": {
                "conditionErrorAny": "Unexpected any value in {{context}}. An explicit comparison or type conversion is required.",
                "conditionErrorNullableBoolean": "Unexpected nullable boolean value in {{context}}. Please handle the nullish case explicitly.",
                "conditionErrorNullableEnum": "Unexpected nullable enum value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
                "conditionErrorNullableNumber": "Unexpected nullable number value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
                "conditionErrorNullableObject": "Unexpected nullable object value in {{context}}. An explicit null check is required.",
                "conditionErrorNullableString": "Unexpected nullable string value in {{context}}. Please handle the nullish/empty cases explicitly.",
                "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
                "conditionErrorNumber": "Unexpected number value in {{context}}. An explicit zero/NaN check is required.",
                "conditionErrorObject": "Unexpected object value in {{context}}. The condition is always true.",
                "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
                "conditionErrorString": "Unexpected string value in {{context}}. An explicit empty string check is required.",
                "conditionFixCastBoolean": "Explicitly convert value to a boolean (`Boolean(value)`)",
                "conditionFixCompareArrayLengthNonzero": "Change condition to check array's length (`value.length > 0`)",
                "conditionFixCompareArrayLengthZero": "Change condition to check array's length (`value.length === 0`)",
                "conditionFixCompareEmptyString": "Change condition to check for empty string (`value !== \"\"`)",
                "conditionFixCompareFalse": "Change condition to check if false (`value === false`)",
                "conditionFixCompareNaN": "Change condition to check for NaN (`!Number.isNaN(value)`)",
                "conditionFixCompareNullish": "Change condition to check for null/undefined (`value != null`)",
                "conditionFixCompareStringLength": "Change condition to check string's length (`value.length !== 0`)",
                "conditionFixCompareTrue": "Change condition to check if true (`value === true`)",
                "conditionFixCompareZero": "Change condition to check for 0 (`value !== 0`)",
                "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)",
                "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (`value ?? false`)",
                "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (`value ?? 0`)",
                "explicitBooleanReturnType": "Add an explicit `boolean` return type annotation.",
                "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
                "predicateCannotBeAsync": "Predicate function should not be 'async'; expected a boolean return type."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "type": "boolean",
                      "description": "Whether to allow `any`s in a boolean context."
                    },
                    "allowNullableBoolean": {
                      "type": "boolean",
                      "description": "Whether to allow nullable `boolean`s in a boolean context."
                    },
                    "allowNullableEnum": {
                      "type": "boolean",
                      "description": "Whether to allow nullable `enum`s in a boolean context."
                    },
                    "allowNullableNumber": {
                      "type": "boolean",
                      "description": "Whether to allow nullable `number`s in a boolean context."
                    },
                    "allowNullableObject": {
                      "type": "boolean",
                      "description": "Whether to allow nullable `object`s, `symbol`s, and functions in a boolean context."
                    },
                    "allowNullableString": {
                      "type": "boolean",
                      "description": "Whether to allow nullable `string`s in a boolean context."
                    },
                    "allowNumber": {
                      "type": "boolean",
                      "description": "Whether to allow `number`s in a boolean context."
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "type": "boolean",
                      "description": "Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`."
                    },
                    "allowString": {
                      "type": "boolean",
                      "description": "Whether to allow `string`s in a boolean context."
                    }
                  }
                }
              ]
            }
          },
          "switch-exhaustiveness-check": {
            "defaultOptions": [
              {
                "allowDefaultCaseForExhaustiveSwitch": true,
                "considerDefaultExhaustiveForUnions": false,
                "requireDefaultForNonUnion": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require switch-case statements to be exhaustive",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check"
              },
              "hasSuggestions": true,
              "messages": {
                "addMissingCases": "Add branches for missing cases.",
                "dangerousDefaultCase": "The switch statement is exhaustive, so the default case is unnecessary.",
                "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}"
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "allowDefaultCaseForExhaustiveSwitch": {
                      "type": "boolean",
                      "description": "If 'true', allow 'default' cases on switch statements with exhaustive cases."
                    },
                    "considerDefaultExhaustiveForUnions": {
                      "type": "boolean",
                      "description": "If 'true', the 'default' clause is used to determine whether the switch statement is exhaustive for union type"
                    },
                    "defaultCaseCommentPattern": {
                      "type": "string",
                      "description": "Regular expression for a comment that can indicate an intentionally omitted default case."
                    },
                    "requireDefaultForNonUnion": {
                      "type": "boolean",
                      "description": "If 'true', require a 'default' clause for switches on non-union types."
                    }
                  }
                }
              ]
            }
          },
          "triple-slash-reference": {
            "defaultOptions": [
              {
                "lib": "always",
                "path": "never",
                "types": "prefer-import"
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/triple-slash-reference"
              },
              "messages": {
                "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use `import` style instead."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "lib": {
                      "type": "string",
                      "description": "What to enforce for `/// <reference lib=\"...\" />` references.",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "description": "What to enforce for `/// <reference path=\"...\" />` references.",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    "types": {
                      "type": "string",
                      "description": "What to enforce for `/// <reference types=\"...\" />` references.",
                      "enum": [
                        "always",
                        "never",
                        "prefer-import"
                      ]
                    }
                  }
                }
              ]
            }
          },
          "typedef": {
            "defaultOptions": [
              {
                "arrayDestructuring": false,
                "arrowParameter": false,
                "memberVariableDeclaration": false,
                "objectDestructuring": false,
                "parameter": false,
                "propertyDeclaration": false,
                "variableDeclaration": false,
                "variableDeclarationIgnoreFunction": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require type annotations in certain places",
                "url": "https://typescript-eslint.io/rules/typedef"
              },
              "messages": {
                "expectedTypedef": "Expected a type annotation.",
                "expectedTypedefNamed": "Expected {{name}} to have a type annotation."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "arrayDestructuring": {
                      "type": "boolean",
                      "description": "Whether to enforce type annotations on variables declared using array destructuring."
                    },
                    "arrowParameter": {
                      "type": "boolean",
                      "description": "Whether to enforce type annotations for parameters of arrow functions."
                    },
                    "memberVariableDeclaration": {
                      "type": "boolean",
                      "description": "Whether to enforce type annotations on member variables of classes."
                    },
                    "objectDestructuring": {
                      "type": "boolean",
                      "description": "Whether to enforce type annotations on variables declared using object destructuring."
                    },
                    "parameter": {
                      "type": "boolean",
                      "description": "Whether to enforce type annotations for parameters of functions and methods."
                    },
                    "propertyDeclaration": {
                      "type": "boolean",
                      "description": "Whether to enforce type annotations for properties of interfaces and types."
                    },
                    "variableDeclaration": {
                      "type": "boolean",
                      "description": "Whether to enforce type annotations for variable declarations, excluding array and object destructuring."
                    },
                    "variableDeclarationIgnoreFunction": {
                      "type": "boolean",
                      "description": "Whether to ignore variable declarations for non-arrow and arrow functions."
                    }
                  }
                }
              ]
            }
          },
          "unbound-method": {
            "defaultOptions": [
              {
                "ignoreStatic": false
              }
            ],
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce unbound methods are called with their expected scope",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/unbound-method"
              },
              "messages": {
                "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.",
                "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStatic": {
                      "type": "boolean",
                      "description": "Whether to skip checking whether `static` methods are correctly bound."
                    }
                  }
                }
              ]
            }
          },
          "unified-signatures": {
            "defaultOptions": [
              {
                "ignoreDifferentlyNamedParameters": false,
                "ignoreOverloadsWithDifferentJSDoc": false
              }
            ],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/unified-signatures"
              },
              "messages": {
                "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
                "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
                "singleParameterDifference": "{{failureStringStart}} taking `{{type1}} | {{type2}}`."
              },
              "schema": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ignoreDifferentlyNamedParameters": {
                      "type": "boolean",
                      "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same."
                    },
                    "ignoreOverloadsWithDifferentJSDoc": {
                      "type": "boolean",
                      "description": "Whether two overloads with different JSDoc comments should be considered different even if their parameter and return types are the same."
                    }
                  }
                }
              ]
            }
          },
          "use-unknown-in-catch-callback-variable": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce typing arguments in Promise rejection callbacks as `unknown`",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable"
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "addUnknownRestTypeAnnotationSuggestion": "Add an explicit `: [unknown]` type annotation to the rejection callback rest variable.",
                "addUnknownTypeAnnotationSuggestion": "Add an explicit `: unknown` type annotation to the rejection callback variable.",
                "useUnknown": "Prefer the safe `: unknown` for a `{{method}}`{{append}} callback variable.",
                "useUnknownArrayDestructuringPattern": "Prefer the safe `: unknown` for a `{{method}}`{{append}} callback variable. The thrown error may not be iterable.",
                "useUnknownObjectDestructuringPattern": "Prefer the safe `: unknown` for a `{{method}}`{{append}} callback variable. The thrown error may be nullable, or may not have the expected shape.",
                "wrongRestTypeAnnotationSuggestion": "Change existing type annotation to `: [unknown]`.",
                "wrongTypeAnnotationSuggestion": "Change existing type annotation to `: unknown`."
              },
              "schema": []
            }
          }
        }
      },
      "@stylistic": {
        "rules": {
          "array-bracket-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce linebreaks after opening and before closing array brackets",
                "url": "https://eslint.style/rules/js/array-bracket-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "consistent"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "boolean"
                        },
                        "minItems": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "missingClosingLinebreak": "A linebreak is required before ']'."
              }
            }
          },
          "array-bracket-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside array brackets",
                "url": "https://eslint.style/rules/js/array-bracket-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "singleValue": {
                      "type": "boolean"
                    },
                    "objectsInArrays": {
                      "type": "boolean"
                    },
                    "arraysInArrays": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'."
              }
            }
          },
          "array-element-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce line breaks after each array element",
                "url": "https://eslint.style/rules/js/array-element-newline"
              },
              "fixable": "whitespace",
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "always",
                          "never",
                          "consistent"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "consistent": {
                            "type": "boolean"
                          },
                          "multiline": {
                            "type": "boolean"
                          },
                          "minItems": {
                            "type": [
                              "integer",
                              "null"
                            ],
                            "minimum": 0
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/basicConfig"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "ArrayExpression": {
                            "$ref": "#/definitions/basicConfig"
                          },
                          "ArrayPattern": {
                            "$ref": "#/definitions/basicConfig"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  }
                ]
              },
              "messages": {
                "unexpectedLineBreak": "There should be no linebreak here.",
                "missingLineBreak": "There should be a linebreak after this element."
              }
            }
          },
          "arrow-parens": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require parentheses around arrow function arguments",
                "url": "https://eslint.style/rules/js/arrow-parens"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "as-needed"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "requireForBlockBody": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedParens": "Unexpected parentheses around single function argument.",
                "expectedParens": "Expected parentheses around arrow function argument.",
                "unexpectedParensInline": "Unexpected parentheses around single function argument having a body with no curly braces.",
                "expectedParensBlock": "Expected parentheses around arrow function argument having a body with curly braces."
              }
            }
          },
          "arrow-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after the arrow in arrow functions",
                "url": "https://eslint.style/rules/js/arrow-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": true
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expectedBefore": "Missing space before =>.",
                "unexpectedBefore": "Unexpected space before =>.",
                "expectedAfter": "Missing space after =>.",
                "unexpectedAfter": "Unexpected space after =>."
              }
            }
          },
          "block-spacing": {
            "defaultOptions": [
              "always"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
                "url": "https://eslint.style/rules/ts/block-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "missing": "Requires a space {{location}} '{{token}}'.",
                "extra": "Unexpected space(s) {{location}} '{{token}}'."
              }
            }
          },
          "brace-style": {
            "defaultOptions": [
              "1tbs"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent brace style for blocks",
                "url": "https://eslint.style/rules/ts/brace-style"
              },
              "messages": {
                "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                "blockSameLine": "Statement inside of curly braces should be on next line.",
                "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "1tbs",
                    "stroustrup",
                    "allman"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "allowSingleLine": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "comma-dangle": {
            "defaultOptions": [
              "never"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow trailing commas",
                "url": "https://eslint.style/rules/ts/comma-dangle"
              },
              "schema": {
                "$defs": {
                  "value": {
                    "type": "string",
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline"
                    ]
                  },
                  "valueWithIgnore": {
                    "type": "string",
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline",
                      "ignore"
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/value"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "arrays": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "objects": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "imports": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "exports": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "functions": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "importAttributes": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "dynamicImports": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "enums": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "generics": {
                            "$ref": "#/$defs/valueWithIgnore"
                          },
                          "tuples": {
                            "$ref": "#/$defs/valueWithIgnore"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                ],
                "additionalItems": false
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected trailing comma.",
                "missing": "Missing trailing comma."
              }
            }
          },
          "comma-spacing": {
            "defaultOptions": [
              {
                "before": false,
                "after": true
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after commas",
                "url": "https://eslint.style/rules/ts/comma-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpected": "There should be no space {{loc}} ','.",
                "missing": "A space is required {{loc}} ','."
              }
            }
          },
          "comma-style": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent comma style",
                "url": "https://eslint.style/rules/js/comma-style"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "first",
                    "last"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                "expectedCommaFirst": "',' should be placed first.",
                "expectedCommaLast": "',' should be placed last."
              }
            }
          },
          "computed-property-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside computed property brackets",
                "url": "https://eslint.style/rules/js/computed-property-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "enforceForClassMembers": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'."
              }
            }
          },
          "curly-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent line breaks after opening and before closing braces",
                "url": "https://eslint.style/rules/plus/curly-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "IfStatementConsequent": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "always",
                                "never"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multiline": {
                                  "type": "boolean"
                                },
                                "minElements": {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                "consistent": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "IfStatementAlternative": "[Circular Reference]",
                        "DoWhileStatement": "[Circular Reference]",
                        "ForInStatement": "[Circular Reference]",
                        "ForOfStatement": "[Circular Reference]",
                        "ForStatement": "[Circular Reference]",
                        "WhileStatement": "[Circular Reference]",
                        "SwitchStatement": "[Circular Reference]",
                        "SwitchCase": "[Circular Reference]",
                        "TryStatementBlock": "[Circular Reference]",
                        "TryStatementHandler": "[Circular Reference]",
                        "TryStatementFinalizer": "[Circular Reference]",
                        "BlockStatement": "[Circular Reference]",
                        "ArrowFunctionExpression": "[Circular Reference]",
                        "FunctionDeclaration": "[Circular Reference]",
                        "FunctionExpression": "[Circular Reference]",
                        "Property": "[Circular Reference]",
                        "ClassBody": "[Circular Reference]",
                        "StaticBlock": "[Circular Reference]",
                        "WithStatement": "[Circular Reference]",
                        "TSEnumBody": "[Circular Reference]",
                        "TSInterfaceBody": "[Circular Reference]",
                        "TSModuleBlock": "[Circular Reference]",
                        "multiline": "[Circular Reference]",
                        "minElements": "[Circular Reference]",
                        "consistent": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
              }
            }
          },
          "dot-location": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent newlines before and after dots",
                "url": "https://eslint.style/rules/js/dot-location"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "object",
                    "property"
                  ]
                }
              ],
              "fixable": "code",
              "messages": {
                "expectedDotAfterObject": "Expected dot to be on same line as object.",
                "expectedDotBeforeProperty": "Expected dot to be on same line as property."
              }
            }
          },
          "eol-last": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow newline at the end of files",
                "url": "https://eslint.style/rules/js/eol-last"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "unix",
                    "windows"
                  ]
                }
              ],
              "messages": {
                "missing": "Newline required at end of file but not found.",
                "unexpected": "Newline not allowed at end of file."
              }
            }
          },
          "func-call-spacing": {
            "defaultOptions": [
              "never",
              {}
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing between function identifiers and their invocations",
                "url": "https://eslint.style/rules/ts/function-call-spacing"
              },
              "fixable": "whitespace",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "never"
                        ]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "allowNewlines": {
                            "type": "boolean"
                          },
                          "optionalChain": {
                            "type": "object",
                            "properties": {
                              "before": {
                                "type": "boolean"
                              },
                              "after": {
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                "unexpectedNewline": "Unexpected newline between function name and paren.",
                "missing": "Missing space between function name and paren."
              }
            }
          },
          "function-call-argument-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce line breaks between arguments of a function call",
                "url": "https://eslint.style/rules/js/function-call-argument-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "consistent"
                  ]
                }
              ],
              "messages": {
                "unexpectedLineBreak": "There should be no line break here.",
                "missingLineBreak": "There should be a line break after this argument."
              }
            }
          },
          "function-call-spacing": "[Circular Reference]",
          "function-paren-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent line breaks inside function parentheses",
                "url": "https://eslint.style/rules/js/function-paren-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                        "multiline",
                        "multiline-arguments"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "minItems": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "expectedBefore": "Expected newline before ')'.",
                "expectedAfter": "Expected newline after '('.",
                "expectedBetween": "Expected newline between arguments/params.",
                "unexpectedBefore": "Unexpected newline before ')'.",
                "unexpectedAfter": "Unexpected newline after '('."
              }
            }
          },
          "generator-star-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing around `*` operators in generator functions",
                "url": "https://eslint.style/rules/js/generator-star-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "before",
                        "after",
                        "both",
                        "neither"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "before": {
                          "type": "boolean"
                        },
                        "after": {
                          "type": "boolean"
                        },
                        "named": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "before",
                                "after",
                                "both",
                                "neither"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "before": {
                                  "type": "boolean"
                                },
                                "after": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "anonymous": "[Circular Reference]",
                        "method": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "missingBefore": "Missing space before *.",
                "missingAfter": "Missing space after *.",
                "unexpectedBefore": "Unexpected space before *.",
                "unexpectedAfter": "Unexpected space after *."
              }
            }
          },
          "implicit-arrow-linebreak": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the location of arrow function bodies",
                "url": "https://eslint.style/rules/js/implicit-arrow-linebreak"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "beside",
                    "below"
                  ]
                }
              ],
              "messages": {
                "expected": "Expected a linebreak before this expression.",
                "unexpected": "Expected no linebreak before this expression."
              }
            }
          },
          "indent": {
            "defaultOptions": [
              4,
              {
                "SwitchCase": 1,
                "flatTernaryExpressions": false,
                "ignoredNodes": []
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent indentation",
                "url": "https://eslint.style/rules/ts/indent"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "tab"
                      ]
                    },
                    {
                      "type": "integer",
                      "minimum": 0
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "SwitchCase": {
                      "type": "integer",
                      "minimum": 0,
                      "default": 0
                    },
                    "VariableDeclarator": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "integer",
                              "minimum": 0
                            },
                            {
                              "type": "string",
                              "enum": [
                                "first",
                                "off"
                              ]
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "var": "[Circular Reference]",
                            "let": "[Circular Reference]",
                            "const": "[Circular Reference]"
                          },
                          "additionalProperties": false
                        }
                      ]
                    },
                    "outerIIFEBody": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "type": "string",
                          "enum": [
                            "off"
                          ]
                        }
                      ]
                    },
                    "MemberExpression": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "type": "string",
                          "enum": [
                            "off"
                          ]
                        }
                      ]
                    },
                    "FunctionDeclaration": {
                      "type": "object",
                      "properties": {
                        "parameters": "[Circular Reference]",
                        "body": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "FunctionExpression": {
                      "type": "object",
                      "properties": {
                        "parameters": "[Circular Reference]",
                        "body": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "StaticBlock": {
                      "type": "object",
                      "properties": {
                        "body": {
                          "type": "integer",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "CallExpression": {
                      "type": "object",
                      "properties": {
                        "arguments": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    },
                    "ArrayExpression": "[Circular Reference]",
                    "ObjectExpression": "[Circular Reference]",
                    "ImportDeclaration": "[Circular Reference]",
                    "flatTernaryExpressions": {
                      "type": "boolean",
                      "default": false
                    },
                    "offsetTernaryExpressions": {
                      "type": "boolean",
                      "default": false
                    },
                    "offsetTernaryExpressionsOffsetCallExpressions": {
                      "type": "boolean",
                      "default": true
                    },
                    "ignoredNodes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "not": {
                          "pattern": ":exit$"
                        }
                      }
                    },
                    "ignoreComments": {
                      "type": "boolean",
                      "default": false
                    },
                    "tabLength": {
                      "type": "number",
                      "default": 4
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
              }
            }
          },
          "indent-binary-ops": {
            "defaultOptions": [
              2
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Indentation for binary operators",
                "url": "https://eslint.style/rules/plus/indent-binary-ops"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "integer",
                      "minimum": 0
                    },
                    {
                      "type": "string",
                      "enum": [
                        "tab"
                      ]
                    }
                  ]
                }
              ],
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}}"
              }
            }
          },
          "jsx-child-element-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-child-element-spacing"
              },
              "messages": {
                "spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
                "spacingBeforeNext": "Ambiguous spacing before next element {{element}}"
              },
              "schema": []
            }
          },
          "jsx-closing-bracket-location": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce closing bracket location in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-closing-bracket-location"
              },
              "fixable": "code",
              "messages": {
                "bracketLocation": "The closing bracket must be {{location}}{{details}}"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nonEmpty": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned"
                              ]
                            },
                            {
                              "type": "boolean",
                              "enum": [
                                false
                              ]
                            }
                          ]
                        },
                        "selfClosing": {
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned"
                              ]
                            },
                            {
                              "type": "boolean",
                              "enum": [
                                false
                              ]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "jsx-closing-tag-location": {
            "defaultOptions": [
              "tag-aligned"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce closing tag location for multiline JSX",
                "url": "https://eslint.style/rules/jsx/jsx-closing-tag-location"
              },
              "fixable": "whitespace",
              "messages": {
                "onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
                "matchIndent": "Expected closing tag to match indentation of opening.",
                "alignWithOpening": "Expected closing tag to be aligned with the line containing the opening tag"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "tag-aligned",
                        "line-aligned"
                      ],
                      "default": "tag-aligned"
                    }
                  ]
                }
              ]
            }
          },
          "jsx-curly-brace-presence": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
                "url": "https://eslint.style/rules/jsx/jsx-curly-brace-presence"
              },
              "fixable": "code",
              "messages": {
                "unnecessaryCurly": "Curly braces are unnecessary here.",
                "missingCurly": "Need to wrap this literal in a JSX expression."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "props": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "ignore"
                          ]
                        },
                        "children": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        },
                        "propElementValues": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "string",
                      "enum": "[Circular Reference]"
                    }
                  ]
                }
              ]
            }
          },
          "jsx-curly-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-curly-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "consistent",
                        "never"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleline": {
                          "type": "string",
                          "enum": [
                            "consistent",
                            "require",
                            "forbid"
                          ]
                        },
                        "multiline": {
                          "type": "string",
                          "enum": [
                            "consistent",
                            "require",
                            "forbid"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "expectedBefore": "Expected newline before '}'.",
                "expectedAfter": "Expected newline after '{'.",
                "unexpectedBefore": "Unexpected newline before '}'.",
                "unexpectedAfter": "Unexpected newline after '{'."
              }
            }
          },
          "jsx-curly-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-curly-spacing"
              },
              "fixable": "code",
              "messages": {
                "noNewlineAfter": "There should be no newline after '{{token}}'",
                "noNewlineBefore": "There should be no newline before '{{token}}'",
                "noSpaceAfter": "There should be no space after '{{token}}'",
                "noSpaceBefore": "There should be no space before '{{token}}'",
                "spaceNeededAfter": "A space is required after '{{token}}'",
                "spaceNeededBefore": "A space is required before '{{token}}'"
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "type": "object",
                    "properties": {
                      "when": {
                        "type": "string",
                        "enum": [
                          "always",
                          "never"
                        ]
                      },
                      "allowMultiline": {
                        "type": "boolean"
                      },
                      "spacing": {
                        "type": "object",
                        "properties": {
                          "objectLiterals": {
                            "type": "string",
                            "enum": "[Circular Reference]"
                          }
                        }
                      }
                    }
                  },
                  "basicConfigOrBoolean": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/basicConfig"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                },
                "type": "array",
                "items": [
                  {
                    "anyOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/definitions/basicConfig"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "$ref": "#/definitions/basicConfigOrBoolean"
                              },
                              "children": {
                                "$ref": "#/definitions/basicConfigOrBoolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "type": "string",
                        "enum": "[Circular Reference]"
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean"
                      },
                      "spacing": {
                        "type": "object",
                        "properties": {
                          "objectLiterals": {
                            "type": "string",
                            "enum": "[Circular Reference]"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "jsx-equals-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow spaces around equal signs in JSX attributes",
                "url": "https://eslint.style/rules/jsx/jsx-equals-spacing"
              },
              "fixable": "code",
              "messages": {
                "noSpaceBefore": "There should be no space before '='",
                "noSpaceAfter": "There should be no space after '='",
                "needSpaceBefore": "A space is required before '='",
                "needSpaceAfter": "A space is required after '='"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ]
            }
          },
          "jsx-first-prop-new-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce proper position of the first property in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-first-prop-new-line"
              },
              "fixable": "code",
              "messages": {
                "propOnNewLine": "Property should be placed on a new line",
                "propOnSameLine": "Property should be placed on the same line as the component declaration"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "multiline",
                    "multiline-multiprop",
                    "multiprop"
                  ]
                }
              ]
            }
          },
          "jsx-function-call-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce line breaks before and after JSX elements when they are used as arguments to a function.",
                "url": "https://eslint.style/rules/jsx/jsx-function-call-newline"
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "Missing line break around JSX"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "multiline"
                  ]
                }
              ]
            }
          },
          "jsx-indent": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce JSX indentation. Deprecated, use `indent` rule instead.",
                "url": "https://eslint.style/rules/jsx/jsx-indent"
              },
              "deprecated": true,
              "fixable": "whitespace",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "tab"
                      ]
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "checkAttributes": {
                      "type": "boolean"
                    },
                    "indentLogicalExpressions": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-indent-props": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce props indentation in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-indent-props"
              },
              "fixable": "code",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}."
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "tab",
                        "first"
                      ]
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "indentMode": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "tab",
                                "first"
                              ]
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "ignoreTernaryOperator": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "jsx-max-props-per-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce maximum of props on a single line in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-max-props-per-line"
              },
              "fixable": "code",
              "messages": {
                "newLine": "Prop `{{prop}}` must be placed on a new line"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "maximum": {
                          "type": "object",
                          "properties": {
                            "single": {
                              "type": "integer",
                              "minimum": 1
                            },
                            "multi": {
                              "type": "integer",
                              "minimum": 1
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "maximum": {
                          "type": "number",
                          "minimum": 1
                        },
                        "when": {
                          "type": "string",
                          "enum": [
                            "always",
                            "multiline"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "jsx-newline": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or prevent a new line after jsx elements and expressions.",
                "url": "https://eslint.style/rules/jsx/jsx-newline"
              },
              "fixable": "code",
              "messages": {
                "require": "JSX element should start in a new line",
                "prevent": "JSX element should not start in a new line",
                "allowMultilines": "Multiline JSX elements should start in a new line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "prevent": {
                      "default": false,
                      "type": "boolean"
                    },
                    "allowMultilines": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false,
                  "if": {
                    "properties": {
                      "allowMultilines": {
                        "const": true
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "prevent": {
                        "const": true
                      }
                    },
                    "required": [
                      "prevent"
                    ]
                  }
                }
              ]
            }
          },
          "jsx-one-expression-per-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require one JSX element per line",
                "url": "https://eslint.style/rules/jsx/jsx-one-expression-per-line"
              },
              "fixable": "whitespace",
              "messages": {
                "moveToNewLine": "`{{descriptor}}` must be placed on a new line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allow": {
                      "type": "string",
                      "enum": [
                        "none",
                        "literal",
                        "single-child",
                        "single-line",
                        "non-jsx"
                      ]
                    }
                  },
                  "default": {
                    "allow": "none"
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-pascal-case": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce PascalCase for user-defined JSX components",
                "url": "https://eslint.style/rules/jsx/jsx-pascal-case"
              },
              "messages": {
                "usePascalCase": "Imported JSX component {{name}} must be in PascalCase",
                "usePascalOrSnakeCase": "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowAllCaps": {
                      "type": "boolean"
                    },
                    "allowLeadingUnderscore": {
                      "type": "boolean"
                    },
                    "allowNamespace": {
                      "type": "boolean"
                    },
                    "ignore": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-props-no-multi-spaces": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow multiple spaces between inline JSX props",
                "url": "https://eslint.style/rules/jsx/jsx-props-no-multi-spaces"
              },
              "fixable": "code",
              "messages": {
                "noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
                "onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”"
              },
              "schema": []
            }
          },
          "jsx-quotes": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
                "url": "https://eslint.style/rules/js/jsx-quotes"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "prefer-single",
                    "prefer-double"
                  ]
                }
              ],
              "messages": {
                "unexpected": "Unexpected usage of {{description}}."
              }
            }
          },
          "jsx-self-closing-comp": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow extra closing tags for components without children",
                "url": "https://eslint.style/rules/jsx/jsx-self-closing-comp"
              },
              "fixable": "code",
              "messages": {
                "notSelfClosing": "Empty components are self-closing"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "component": {
                      "default": true,
                      "type": "boolean"
                    },
                    "html": {
                      "default": true,
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-sort-props": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce props alphabetical sorting",
                "url": "https://eslint.style/rules/jsx/jsx-sort-props"
              },
              "fixable": "code",
              "messages": {
                "noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
                "listIsEmpty": "A customized reserved first list must not be empty",
                "listReservedPropsFirst": "Reserved props must be listed before all other props",
                "listCallbacksLast": "Callbacks must be listed after all other props",
                "listShorthandFirst": "Shorthand props must be listed before all other props",
                "listShorthandLast": "Shorthand props must be listed after all other props",
                "listMultilineFirst": "Multiline props must be listed before all other props",
                "listMultilineLast": "Multiline props must be listed after all other props",
                "sortPropsByAlpha": "Props should be sorted alphabetically"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "callbacksLast": {
                      "type": "boolean"
                    },
                    "shorthandFirst": {
                      "type": "boolean"
                    },
                    "shorthandLast": {
                      "type": "boolean"
                    },
                    "multiline": {
                      "type": "string",
                      "enum": [
                        "ignore",
                        "first",
                        "last"
                      ],
                      "default": "ignore"
                    },
                    "ignoreCase": {
                      "type": "boolean"
                    },
                    "noSortAlphabetically": {
                      "type": "boolean"
                    },
                    "reservedFirst": {
                      "type": [
                        "array",
                        "boolean"
                      ]
                    },
                    "locale": {
                      "type": "string",
                      "default": "auto"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-tag-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce whitespace in and around the JSX opening and closing brackets",
                "url": "https://eslint.style/rules/jsx/jsx-tag-spacing"
              },
              "fixable": "whitespace",
              "messages": {
                "selfCloseSlashNoSpace": "Whitespace is forbidden between `/` and `>`; write `/>`",
                "selfCloseSlashNeedSpace": "Whitespace is required between `/` and `>`; write `/ >`",
                "closeSlashNoSpace": "Whitespace is forbidden between `<` and `/`; write `</`",
                "closeSlashNeedSpace": "Whitespace is required between `<` and `/`; write `< /`",
                "beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeSelfCloseNeedSpace": "A space is required before closing bracket",
                "beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
                "afterOpenNoSpace": "A space is forbidden after opening bracket",
                "afterOpenNeedSpace": "A space is required after opening bracket",
                "beforeCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeCloseNeedSpace": "Whitespace is required before closing bracket",
                "beforeCloseNeedNewline": "A newline is required before closing bracket"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "closingSlash": {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "allow"
                      ]
                    },
                    "beforeSelfClosing": {
                      "type": "string",
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow"
                      ]
                    },
                    "afterOpening": {
                      "type": "string",
                      "enum": [
                        "always",
                        "allow-multiline",
                        "never",
                        "allow"
                      ]
                    },
                    "beforeClosing": {
                      "type": "string",
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow"
                      ]
                    }
                  },
                  "default": {
                    "closingSlash": "never",
                    "beforeSelfClosing": "always",
                    "afterOpening": "never",
                    "beforeClosing": "allow"
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "jsx-wrap-multilines": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow missing parentheses around multiline JSX",
                "url": "https://eslint.style/rules/jsx/jsx-wrap-multilines"
              },
              "fixable": "code",
              "messages": {
                "missingParens": "Missing parentheses around multilines JSX",
                "parensOnNewLines": "Parentheses around JSX should be on separate lines"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "declaration": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "assignment": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "return": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "arrow": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "condition": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "logical": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "prop": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    },
                    "propertyValue": {
                      "type": [
                        "string",
                        "boolean"
                      ],
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "key-spacing": {
            "defaultOptions": [
              {}
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
                "url": "https://eslint.style/rules/ts/key-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "align": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "colon",
                                "value"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "mode": {
                                  "type": "string",
                                  "enum": [
                                    "strict",
                                    "minimum"
                                  ]
                                },
                                "on": {
                                  "type": "string",
                                  "enum": [
                                    "colon",
                                    "value"
                                  ]
                                },
                                "beforeColon": {
                                  "type": "boolean"
                                },
                                "afterColon": {
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "mode": {
                          "type": "string",
                          "enum": [
                            "strict",
                            "minimum"
                          ]
                        },
                        "beforeColon": {
                          "type": "boolean"
                        },
                        "afterColon": {
                          "type": "boolean"
                        },
                        "ignoredNodes": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "ObjectExpression",
                              "ObjectPattern",
                              "ImportDeclaration",
                              "ExportNamedDeclaration",
                              "ExportAllDeclaration",
                              "TSTypeLiteral",
                              "TSInterfaceBody",
                              "ClassBody"
                            ]
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleLine": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "multiLine": {
                          "type": "object",
                          "properties": {
                            "align": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "enum": [
                                    "colon",
                                    "value"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "mode": {
                                      "type": "string",
                                      "enum": [
                                        "strict",
                                        "minimum"
                                      ]
                                    },
                                    "on": {
                                      "type": "string",
                                      "enum": [
                                        "colon",
                                        "value"
                                      ]
                                    },
                                    "beforeColon": {
                                      "type": "boolean"
                                    },
                                    "afterColon": {
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              ]
                            },
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "singleLine": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "multiLine": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "align": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": [
                                "strict",
                                "minimum"
                              ]
                            },
                            "on": {
                              "type": "string",
                              "enum": [
                                "colon",
                                "value"
                              ]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
              }
            }
          },
          "keyword-spacing": {
            "defaultOptions": [
              {}
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after keywords",
                "url": "https://eslint.style/rules/ts/keyword-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": true
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    },
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "abstract": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "as": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "async": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "await": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "boolean": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "break": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "byte": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "case": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "catch": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "char": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "class": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "const": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "continue": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "debugger": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "default": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "do": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "double": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "else": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "enum": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "export": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "extends": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "false": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "final": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "finally": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "float": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "for": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "from": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "get": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "goto": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "if": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "implements": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "import": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "in": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "instanceof": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "int": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "interface": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "let": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "long": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "native": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "new": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "null": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "of": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "package": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "private": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "protected": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "public": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "return": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "satisfies": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "set": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "short": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "static": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "super": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "switch": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "synchronized": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "this": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "throw": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "throws": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "transient": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "true": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "try": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "typeof": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "var": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "void": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "volatile": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "while": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "with": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "yield": {
                          "type": "object",
                          "properties": {
                            "before": {
                              "type": "boolean"
                            },
                            "after": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expectedBefore": "Expected space(s) before \"{{value}}\".",
                "expectedAfter": "Expected space(s) after \"{{value}}\".",
                "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
                "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
              }
            }
          },
          "line-comment-position": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce position of line comments",
                "url": "https://eslint.style/rules/js/line-comment-position"
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "above",
                        "beside"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "position": {
                          "type": "string",
                          "enum": [
                            "above",
                            "beside"
                          ]
                        },
                        "ignorePattern": {
                          "type": "string"
                        },
                        "applyDefaultPatterns": {
                          "type": "boolean"
                        },
                        "applyDefaultIgnorePatterns": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "above": "Expected comment to be above code.",
                "beside": "Expected comment to be beside code."
              }
            }
          },
          "linebreak-style": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreak style",
                "url": "https://eslint.style/rules/js/linebreak-style"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "unix",
                    "windows"
                  ]
                }
              ],
              "messages": {
                "expectedLF": "Expected linebreaks to be 'LF' but found 'CRLF'.",
                "expectedCRLF": "Expected linebreaks to be 'CRLF' but found 'LF'."
              }
            }
          },
          "lines-around-comment": {
            "defaultOptions": [
              {
                "beforeBlockComment": true
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require empty lines around comments",
                "url": "https://eslint.style/rules/ts/lines-around-comment"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "beforeBlockComment": {
                      "type": "boolean",
                      "default": true
                    },
                    "afterBlockComment": {
                      "type": "boolean",
                      "default": false
                    },
                    "beforeLineComment": {
                      "type": "boolean",
                      "default": false
                    },
                    "afterLineComment": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowBlockStart": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowBlockEnd": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowClassStart": {
                      "type": "boolean"
                    },
                    "allowClassEnd": {
                      "type": "boolean"
                    },
                    "allowObjectStart": {
                      "type": "boolean"
                    },
                    "allowObjectEnd": {
                      "type": "boolean"
                    },
                    "allowArrayStart": {
                      "type": "boolean"
                    },
                    "allowArrayEnd": {
                      "type": "boolean"
                    },
                    "allowInterfaceStart": {
                      "type": "boolean"
                    },
                    "allowInterfaceEnd": {
                      "type": "boolean"
                    },
                    "allowTypeStart": {
                      "type": "boolean"
                    },
                    "allowTypeEnd": {
                      "type": "boolean"
                    },
                    "allowEnumStart": {
                      "type": "boolean"
                    },
                    "allowEnumEnd": {
                      "type": "boolean"
                    },
                    "allowModuleStart": {
                      "type": "boolean"
                    },
                    "allowModuleEnd": {
                      "type": "boolean"
                    },
                    "ignorePattern": {
                      "type": "string"
                    },
                    "applyDefaultIgnorePatterns": {
                      "type": "boolean"
                    },
                    "afterHashbangComment": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "after": "Expected line after comment.",
                "before": "Expected line before comment."
              }
            }
          },
          "lines-between-class-members": {
            "defaultOptions": [
              "always",
              {
                "exceptAfterOverload": true,
                "exceptAfterSingleLine": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow an empty line between class members",
                "url": "https://eslint.style/rules/ts/lines-between-class-members"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "enforce": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "blankLine": {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "never"
                                ]
                              },
                              "prev": {
                                "type": "string",
                                "enum": [
                                  "method",
                                  "field",
                                  "*"
                                ]
                              },
                              "next": {
                                "type": "string",
                                "enum": [
                                  "method",
                                  "field",
                                  "*"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "blankLine",
                              "prev",
                              "next"
                            ]
                          },
                          "minItems": 1
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "enforce"
                      ]
                    },
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptAfterSingleLine": {
                      "type": "boolean",
                      "default": false
                    },
                    "exceptAfterOverload": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "never": "Unexpected blank line between class members.",
                "always": "Expected blank line between class members."
              }
            }
          },
          "max-len": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce a maximum line length",
                "url": "https://eslint.style/rules/js/max-len"
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "comments": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "tabWidth": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "ignorePattern": {
                          "type": "string"
                        },
                        "ignoreComments": {
                          "type": "boolean"
                        },
                        "ignoreStrings": {
                          "type": "boolean"
                        },
                        "ignoreUrls": {
                          "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                          "type": "boolean"
                        },
                        "ignoreRegExpLiterals": {
                          "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "integer",
                      "minimum": 0
                    }
                  ]
                },
                "[Circular Reference]",
                "[Circular Reference]"
              ],
              "messages": {
                "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
                "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
              }
            }
          },
          "max-statements-per-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce a maximum number of statements allowed per line",
                "url": "https://eslint.style/rules/js/max-statements-per-line"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "integer",
                      "minimum": 1,
                      "default": 1
                    },
                    "ignoredNodes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "BreakStatement",
                          "ClassDeclaration",
                          "ContinueStatement",
                          "DebuggerStatement",
                          "DoWhileStatement",
                          "ExpressionStatement",
                          "ForInStatement",
                          "ForOfStatement",
                          "ForStatement",
                          "FunctionDeclaration",
                          "IfStatement",
                          "ImportDeclaration",
                          "LabeledStatement",
                          "ReturnStatement",
                          "SwitchStatement",
                          "ThrowStatement",
                          "TryStatement",
                          "VariableDeclaration",
                          "WhileStatement",
                          "WithStatement",
                          "ExportNamedDeclaration",
                          "ExportDefaultDeclaration",
                          "ExportAllDeclaration"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "exceed": "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}."
              }
            }
          },
          "member-delimiter-style": {
            "defaultOptions": [
              {
                "multiline": {
                  "delimiter": "semi",
                  "requireLast": true
                },
                "singleline": {
                  "delimiter": "semi",
                  "requireLast": false
                },
                "multilineDetection": "brackets"
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require a specific member delimiter style for interfaces and type literals",
                "url": "https://eslint.style/rules/ts/member-delimiter-style"
              },
              "fixable": "whitespace",
              "messages": {
                "unexpectedComma": "Unexpected separator (,).",
                "unexpectedSemi": "Unexpected separator (;).",
                "expectedComma": "Expected a comma.",
                "expectedSemi": "Expected a semicolon."
              },
              "schema": [
                {
                  "$defs": {
                    "multiLineOption": {
                      "type": "string",
                      "enum": [
                        "none",
                        "semi",
                        "comma"
                      ]
                    },
                    "singleLineOption": {
                      "type": "string",
                      "enum": [
                        "semi",
                        "comma"
                      ]
                    },
                    "delimiterConfig": {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "object",
                          "properties": {
                            "delimiter": {
                              "$ref": "#/items/0/$defs/multiLineOption"
                            },
                            "requireLast": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "singleline": {
                          "type": "object",
                          "properties": {
                            "delimiter": {
                              "$ref": "#/items/0/$defs/singleLineOption"
                            },
                            "requireLast": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "properties": {
                    "multiline": "[Circular Reference]",
                    "singleline": "[Circular Reference]",
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "interface": {
                          "$ref": "#/items/0/$defs/delimiterConfig"
                        },
                        "typeLiteral": {
                          "$ref": "#/items/0/$defs/delimiterConfig"
                        }
                      },
                      "additionalProperties": false
                    },
                    "multilineDetection": {
                      "type": "string",
                      "enum": [
                        "brackets",
                        "last-member"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "multiline-comment-style": {
            "defaultOptions": [],
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce a particular style for multiline comments",
                "url": "https://eslint.style/rules/js/multiline-comment-style"
              },
              "fixable": "whitespace",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": [
                          "starred-block",
                          "bare-block"
                        ],
                        "type": "string"
                      }
                    ],
                    "additionalItems": false
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "enum": [
                          "separate-lines"
                        ],
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "checkJSDoc": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "additionalItems": false
                  }
                ]
              },
              "messages": {
                "expectedBlock": "Expected a block comment instead of consecutive line comments.",
                "expectedBareBlock": "Expected a block comment without padding stars.",
                "startNewline": "Expected a linebreak after '/*'.",
                "endNewline": "Expected a linebreak before '*/'.",
                "missingStar": "Expected a '*' at the start of this line.",
                "alignment": "Expected this line to be aligned with the start of the comment.",
                "expectedLines": "Expected multiple line comments instead of a block comment."
              }
            }
          },
          "multiline-ternary": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce newlines between operands of ternary expressions",
                "url": "https://eslint.style/rules/js/multiline-ternary"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "always-multiline",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "ignoreJSX": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ],
              "messages": {
                "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
                "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
                "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
                "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression."
              },
              "fixable": "whitespace"
            }
          },
          "new-parens": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
                "url": "https://eslint.style/rules/js/new-parens"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "missing": "Missing '()' invoking a constructor.",
                "unnecessary": "Unnecessary '()' invoking a constructor with no arguments."
              }
            }
          },
          "newline-per-chained-call": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require a newline after each call in a method chain",
                "url": "https://eslint.style/rules/js/newline-per-chained-call"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreChainWithDepth": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 10,
                      "default": 2
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expected": "Expected line break before `{{callee}}`."
              }
            }
          },
          "no-confusing-arrow": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow arrow functions where they could be confused with comparisons",
                "url": "https://eslint.style/rules/js/no-confusing-arrow"
              },
              "fixable": "code",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowParens": {
                      "type": "boolean",
                      "default": true
                    },
                    "onlyOneSimpleParam": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "confusing": "Arrow function used ambiguously with a conditional expression."
              }
            }
          },
          "no-extra-parens": {
            "defaultOptions": [
              "all"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow unnecessary parentheses",
                "url": "https://eslint.style/rules/ts/no-extra-parens"
              },
              "fixable": "code",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "functions"
                        ]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "all"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "conditionalAssign": {
                            "type": "boolean"
                          },
                          "ternaryOperandBinaryExpressions": {
                            "type": "boolean"
                          },
                          "nestedBinaryExpressions": {
                            "type": "boolean"
                          },
                          "returnAssign": {
                            "type": "boolean"
                          },
                          "ignoreJSX": {
                            "type": "string",
                            "enum": [
                              "none",
                              "all",
                              "single-line",
                              "multi-line"
                            ]
                          },
                          "enforceForArrowConditionals": {
                            "type": "boolean"
                          },
                          "enforceForSequenceExpressions": {
                            "type": "boolean"
                          },
                          "enforceForNewInMemberExpressions": {
                            "type": "boolean"
                          },
                          "enforceForFunctionPrototypeMethods": {
                            "type": "boolean"
                          },
                          "allowParensAfterCommentPattern": {
                            "type": "string"
                          },
                          "nestedConditionalExpressions": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "unexpected": "Unnecessary parentheses around expression."
              }
            }
          },
          "no-extra-semi": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow unnecessary semicolons",
                "url": "https://eslint.style/rules/ts/no-extra-semi"
              },
              "fixable": "code",
              "schema": [],
              "messages": {
                "unexpected": "Unnecessary semicolon."
              }
            }
          },
          "no-floating-decimal": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow leading or trailing decimal points in numeric literals",
                "url": "https://eslint.style/rules/js/no-floating-decimal"
              },
              "schema": [],
              "fixable": "code",
              "messages": {
                "leading": "A leading decimal point can be confused with a dot.",
                "trailing": "A trailing decimal point can be confused with a dot."
              }
            }
          },
          "no-mixed-operators": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow mixed binary operators",
                "url": "https://eslint.style/rules/js/no-mixed-operators"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "+",
                            "-",
                            "*",
                            "/",
                            "%",
                            "**",
                            "&",
                            "|",
                            "^",
                            "~",
                            "<<",
                            ">>",
                            ">>>",
                            "==",
                            "!=",
                            "===",
                            "!==",
                            ">",
                            ">=",
                            "<",
                            "<=",
                            "&&",
                            "||",
                            "in",
                            "instanceof",
                            "?:",
                            "??"
                          ]
                        },
                        "minItems": 2,
                        "uniqueItems": true
                      },
                      "uniqueItems": true
                    },
                    "allowSamePrecedence": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedMixedOperator": "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations."
              }
            }
          },
          "no-mixed-spaces-and-tabs": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow mixed spaces and tabs for indentation",
                "url": "https://eslint.style/rules/js/no-mixed-spaces-and-tabs"
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "smart-tabs"
                      ]
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              ],
              "messages": {
                "mixedSpacesAndTabs": "Mixed spaces and tabs."
              }
            }
          },
          "no-multi-spaces": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow multiple spaces",
                "url": "https://eslint.style/rules/js/no-multi-spaces"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "object",
                      "patternProperties": {
                        "^([A-Z][a-z]*)+$": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "ignoreEOLComments": {
                      "type": "boolean",
                      "default": false
                    },
                    "includeTabs": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "multipleSpaces": "Multiple spaces found before '{{displayValue}}'."
              }
            }
          },
          "no-multiple-empty-lines": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow multiple empty lines",
                "url": "https://eslint.style/rules/js/no-multiple-empty-lines"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "maxEOF": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "maxBOF": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "max"
                  ],
                  "additionalProperties": false
                }
              ],
              "messages": {
                "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed."
              }
            }
          },
          "no-tabs": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow all tabs",
                "url": "https://eslint.style/rules/js/no-tabs"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowIndentationTabs": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedTab": "Unexpected tab character."
              }
            }
          },
          "no-trailing-spaces": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow trailing whitespace at the end of lines",
                "url": "https://eslint.style/rules/js/no-trailing-spaces"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "skipBlankLines": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignoreComments": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "trailingSpace": "Trailing spaces not allowed."
              }
            }
          },
          "no-whitespace-before-property": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Disallow whitespace before properties",
                "url": "https://eslint.style/rules/js/no-whitespace-before-property"
              },
              "fixable": "whitespace",
              "schema": [],
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace before property {{propName}}."
              }
            }
          },
          "nonblock-statement-body-position": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the location of single-line statements",
                "url": "https://eslint.style/rules/js/nonblock-statement-body-position"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "beside",
                    "below",
                    "any"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "if": "[Circular Reference]",
                        "else": "[Circular Reference]",
                        "while": "[Circular Reference]",
                        "do": "[Circular Reference]",
                        "for": "[Circular Reference]"
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "expectNoLinebreak": "Expected no linebreak before this statement.",
                "expectLinebreak": "Expected a linebreak before this statement."
              }
            }
          },
          "object-curly-newline": {
            "defaultOptions": [
              {
                "ObjectExpression": {
                  "multiline": false,
                  "minProperties": null,
                  "consistent": true
                },
                "ObjectPattern": "[Circular Reference]",
                "ImportDeclaration": "[Circular Reference]",
                "ExportDeclaration": "[Circular Reference]",
                "TSTypeLiteral": "[Circular Reference]",
                "TSInterfaceBody": "[Circular Reference]"
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent line breaks after opening and before closing braces",
                "url": "https://eslint.style/rules/ts/object-curly-newline"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "multiline": {
                              "type": "boolean"
                            },
                            "minProperties": {
                              "type": "integer",
                              "minimum": 0
                            },
                            "consistent": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false,
                          "minProperties": 1
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "ObjectExpression": "[Circular Reference]",
                        "ObjectPattern": "[Circular Reference]",
                        "ImportDeclaration": "[Circular Reference]",
                        "ExportDeclaration": "[Circular Reference]",
                        "TSTypeLiteral": "[Circular Reference]",
                        "TSInterfaceBody": "[Circular Reference]"
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
              }
            }
          },
          "object-curly-spacing": {
            "defaultOptions": [
              "never"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside braces",
                "url": "https://eslint.style/rules/ts/object-curly-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean"
                    },
                    "objectsInObjects": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
              }
            }
          },
          "object-property-newline": {
            "defaultOptions": [
              {
                "allowAllPropertiesOnSameLine": false,
                "allowMultiplePropertiesPerLine": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce placing object properties on separate lines",
                "url": "https://eslint.style/rules/ts/object-property-newline"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowAllPropertiesOnSameLine": {
                      "type": "boolean",
                      "default": false
                    },
                    "allowMultiplePropertiesPerLine": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                "propertiesOnNewline": "Object properties must go on a new line."
              }
            }
          },
          "one-var-declaration-per-line": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow newlines around variable declarations",
                "url": "https://eslint.style/rules/js/one-var-declaration-per-line"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "initializations"
                  ]
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "expectVarOnNewline": "Expected variable declaration to be on a new line."
              }
            }
          },
          "operator-linebreak": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent linebreak style for operators",
                "url": "https://eslint.style/rules/js/operator-linebreak"
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "after",
                        "before",
                        "none"
                      ]
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "overrides": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string",
                        "enum": [
                          "after",
                          "before",
                          "none",
                          "ignore"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "code",
              "messages": {
                "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
                "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
                "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
                "noLinebreak": "There should be no line break before or after '{{operator}}'."
              }
            }
          },
          "padded-blocks": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow padding within blocks",
                "url": "https://eslint.style/rules/js/padded-blocks"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "start",
                        "end"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "blocks": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        },
                        "switches": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        },
                        "classes": {
                          "type": "string",
                          "enum": "[Circular Reference]"
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "allowSingleLineBlocks": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "missingPadBlock": "Block must be padded by blank lines.",
                "extraPadBlock": "Block must not be padded by blank lines."
              }
            }
          },
          "padding-line-between-statements": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow padding lines between statements",
                "url": "https://eslint.style/rules/ts/padding-line-between-statements"
              },
              "fixable": "whitespace",
              "hasSuggestions": false,
              "schema": {
                "$defs": {
                  "paddingType": {
                    "type": "string",
                    "enum": [
                      "any",
                      "never",
                      "always"
                    ]
                  },
                  "statementType": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "*",
                          "block-like",
                          "exports",
                          "require",
                          "directive",
                          "expression",
                          "iife",
                          "multiline-block-like",
                          "multiline-expression",
                          "multiline-const",
                          "multiline-export",
                          "multiline-let",
                          "multiline-var",
                          "singleline-const",
                          "singleline-export",
                          "singleline-let",
                          "singleline-var",
                          "block",
                          "empty",
                          "function",
                          "ts-method",
                          "break",
                          "case",
                          "class",
                          "const",
                          "continue",
                          "debugger",
                          "default",
                          "do",
                          "export",
                          "for",
                          "if",
                          "import",
                          "let",
                          "return",
                          "switch",
                          "throw",
                          "try",
                          "var",
                          "while",
                          "with",
                          "cjs-export",
                          "cjs-import",
                          "enum",
                          "interface",
                          "type",
                          "function-overload"
                        ]
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "*",
                            "block-like",
                            "exports",
                            "require",
                            "directive",
                            "expression",
                            "iife",
                            "multiline-block-like",
                            "multiline-expression",
                            "multiline-const",
                            "multiline-export",
                            "multiline-let",
                            "multiline-var",
                            "singleline-const",
                            "singleline-export",
                            "singleline-let",
                            "singleline-var",
                            "block",
                            "empty",
                            "function",
                            "ts-method",
                            "break",
                            "case",
                            "class",
                            "const",
                            "continue",
                            "debugger",
                            "default",
                            "do",
                            "export",
                            "for",
                            "if",
                            "import",
                            "let",
                            "return",
                            "switch",
                            "throw",
                            "try",
                            "var",
                            "while",
                            "with",
                            "cjs-export",
                            "cjs-import",
                            "enum",
                            "interface",
                            "type",
                            "function-overload"
                          ]
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "additionalItems": false
                      }
                    ]
                  }
                },
                "type": "array",
                "additionalItems": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "blankLine": {
                      "$ref": "#/$defs/paddingType"
                    },
                    "prev": {
                      "$ref": "#/$defs/statementType"
                    },
                    "next": {
                      "$ref": "#/$defs/statementType"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "blankLine",
                    "prev",
                    "next"
                  ]
                }
              },
              "messages": {
                "unexpectedBlankLine": "Unexpected blank line before this statement.",
                "expectedBlankLine": "Expected blank line before this statement."
              }
            }
          },
          "quote-props": {
            "defaultOptions": [
              "always"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require quotes around object literal, type literal, interfaces and enums property names",
                "url": "https://eslint.style/rules/ts/quote-props"
              },
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed"
                        ]
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 1
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "keywords": {
                            "type": "boolean"
                          },
                          "unnecessary": {
                            "type": "boolean"
                          },
                          "numbers": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "fixable": "code",
              "messages": {
                "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant."
              }
            }
          },
          "quotes": {
            "defaultOptions": [
              "double",
              {
                "allowTemplateLiterals": "never",
                "avoidEscape": false,
                "ignoreStringLiterals": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce the consistent use of either backticks, double, or single quotes",
                "url": "https://eslint.style/rules/ts/quotes"
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}."
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "single",
                    "double",
                    "backtick"
                  ]
                },
                {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "avoid-escape"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "avoidEscape": {
                          "type": "boolean"
                        },
                        "allowTemplateLiterals": {
                          "anyOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "never",
                                "avoidEscape",
                                "always"
                              ]
                            }
                          ]
                        },
                        "ignoreStringLiterals": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "rest-spread-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce spacing between rest and spread operators and their expressions",
                "url": "https://eslint.style/rules/js/rest-spread-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace after {{type}} operator.",
                "expectedWhitespace": "Expected whitespace after {{type}} operator."
              }
            }
          },
          "semi": {
            "defaultOptions": [
              "always",
              {
                "omitLastInOneLineBlock": false,
                "beforeStatementContinuationChars": "any"
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow semicolons instead of ASI",
                "url": "https://eslint.style/rules/ts/semi"
              },
              "fixable": "code",
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "never"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "beforeStatementContinuationChars": {
                            "type": "string",
                            "enum": [
                              "always",
                              "any",
                              "never"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "enum": [
                          "always"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "omitLastInOneLineBlock": {
                            "type": "boolean"
                          },
                          "omitLastInOneLineClassBody": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "minItems": 0,
                    "maxItems": 2
                  }
                ]
              },
              "messages": {
                "missingSemi": "Missing semicolon.",
                "extraSemi": "Extra semicolon."
              }
            }
          },
          "semi-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before and after semicolons",
                "url": "https://eslint.style/rules/ts/semi-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedWhitespaceBefore": "Unexpected whitespace before semicolon.",
                "unexpectedWhitespaceAfter": "Unexpected whitespace after semicolon.",
                "missingWhitespaceBefore": "Missing whitespace before semicolon.",
                "missingWhitespaceAfter": "Missing whitespace after semicolon."
              }
            }
          },
          "semi-style": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce location of semicolons",
                "url": "https://eslint.style/rules/js/semi-style"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "last",
                    "first"
                  ]
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "expectedSemiColon": "Expected this semicolon to be at {{pos}}."
              }
            }
          },
          "space-before-blocks": {
            "defaultOptions": [
              "always"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before blocks",
                "url": "https://eslint.style/rules/ts/space-before-blocks"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "keywords": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "off"
                          ]
                        },
                        "functions": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "off"
                          ]
                        },
                        "classes": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "off"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedSpace": "Unexpected space before opening brace.",
                "missingSpace": "Missing space before opening brace."
              }
            }
          },
          "space-before-function-paren": {
            "defaultOptions": [
              "always"
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before function parenthesis",
                "url": "https://eslint.style/rules/ts/space-before-function-paren"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "anonymous": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "ignore"
                          ]
                        },
                        "named": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "ignore"
                          ]
                        },
                        "asyncArrow": {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "ignore"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "unexpectedSpace": "Unexpected space before function parentheses.",
                "missingSpace": "Missing space before function parentheses."
              }
            }
          },
          "space-in-parens": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing inside parentheses",
                "url": "https://eslint.style/rules/js/space-in-parens"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "{}",
                          "[]",
                          "()",
                          "empty"
                        ]
                      },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "missingOpeningSpace": "There must be a space after this paren.",
                "missingClosingSpace": "There must be a space before this paren.",
                "rejectedOpeningSpace": "There should be no space after this paren.",
                "rejectedClosingSpace": "There should be no space before this paren."
              }
            }
          },
          "space-infix-ops": {
            "defaultOptions": [
              {
                "int32Hint": false,
                "ignoreTypes": false
              }
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require spacing around infix operators",
                "url": "https://eslint.style/rules/ts/space-infix-ops"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "int32Hint": {
                      "type": "boolean",
                      "default": false
                    },
                    "ignoreTypes": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "missingSpace": "Operator '{{operator}}' must be spaced."
              }
            }
          },
          "space-unary-ops": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing before or after unary operators",
                "url": "https://eslint.style/rules/js/space-unary-ops"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "words": {
                      "type": "boolean",
                      "default": true
                    },
                    "nonwords": {
                      "type": "boolean",
                      "default": false
                    },
                    "overrides": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
                "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
                "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'."
              }
            }
          },
          "spaced-comment": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
                "url": "https://eslint.style/rules/js/spaced-comment"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "markers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "line": {
                      "type": "object",
                      "properties": {
                        "exceptions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "markers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "block": {
                      "type": "object",
                      "properties": {
                        "exceptions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "markers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "balanced": {
                          "type": "boolean",
                          "default": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "unexpectedSpaceAfterMarker": "Unexpected space or tab after marker ({{refChar}}) in comment.",
                "expectedExceptionAfter": "Expected exception block, space or tab after '{{refChar}}' in comment.",
                "unexpectedSpaceBefore": "Unexpected space or tab before '*/' in comment.",
                "unexpectedSpaceAfter": "Unexpected space or tab after '{{refChar}}' in comment.",
                "expectedSpaceBefore": "Expected space or tab before '*/' in comment.",
                "expectedSpaceAfter": "Expected space or tab after '{{refChar}}' in comment."
              }
            }
          },
          "switch-colon-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforce spacing around colons of switch statements",
                "url": "https://eslint.style/rules/js/switch-colon-spacing"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "whitespace",
              "messages": {
                "expectedBefore": "Expected space(s) before this colon.",
                "expectedAfter": "Expected space(s) after this colon.",
                "unexpectedBefore": "Unexpected space(s) before this colon.",
                "unexpectedAfter": "Unexpected space(s) after this colon."
              }
            }
          },
          "template-curly-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing around embedded expressions of template strings",
                "url": "https://eslint.style/rules/js/template-curly-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "expectedBefore": "Expected space(s) before '}'.",
                "expectedAfter": "Expected space(s) after '${'.",
                "unexpectedBefore": "Unexpected space(s) before '}'.",
                "unexpectedAfter": "Unexpected space(s) after '${'."
              }
            }
          },
          "template-tag-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing between template tags and their literals",
                "url": "https://eslint.style/rules/js/template-tag-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "messages": {
                "unexpected": "Unexpected space between template tag and template literal.",
                "missing": "Missing space between template tag and template literal."
              }
            }
          },
          "type-annotation-spacing": {
            "defaultOptions": [
              {}
            ],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require consistent spacing around type annotations",
                "url": "https://eslint.style/rules/ts/type-annotation-spacing"
              },
              "fixable": "whitespace",
              "messages": {
                "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
                "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
                "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
                "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
                "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'."
              },
              "schema": [
                {
                  "$defs": {
                    "spacingConfig": {
                      "type": "object",
                      "properties": {
                        "before": {
                          "type": "boolean"
                        },
                        "after": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    },
                    "overrides": {
                      "type": "object",
                      "properties": {
                        "colon": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "arrow": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "variable": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "parameter": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "property": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        },
                        "returnType": {
                          "$ref": "#/items/0/$defs/spacingConfig"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "type-generic-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Enforces consistent spacing inside TypeScript type generics",
                "url": "https://eslint.style/rules/plus/type-generic-spacing"
              },
              "fixable": "whitespace",
              "schema": [],
              "messages": {
                "genericSpacingMismatch": "Generic spaces mismatch"
              }
            }
          },
          "type-named-tuple-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Expect space before the type declaration in the named tuple",
                "url": "https://eslint.style/rules/plus/type-named-tuple-spacing"
              },
              "fixable": "whitespace",
              "schema": [],
              "messages": {
                "expectedSpaceAfter": "Expected a space after the ':'.",
                "unexpectedSpaceBetween": "Unexpected space between '?' and the ':'.",
                "unexpectedSpaceBefore": "Unexpected space before the ':'."
              }
            }
          },
          "wrap-iife": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require parentheses around immediate `function` invocations",
                "url": "https://eslint.style/rules/js/wrap-iife"
              },
              "schema": [
                {
                  "type": "string",
                  "enum": [
                    "outside",
                    "inside",
                    "any"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "functionPrototypeMethods": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "fixable": "code",
              "messages": {
                "wrapInvocation": "Wrap an immediate function invocation in parentheses.",
                "wrapExpression": "Wrap only the function expression in parens.",
                "moveInvocation": "Move the invocation into the parens that contain the function."
              }
            }
          },
          "wrap-regex": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require parenthesis around regex literals",
                "url": "https://eslint.style/rules/js/wrap-regex"
              },
              "schema": [],
              "fixable": "code",
              "messages": {
                "requireParens": "Wrap the regexp literal in parens to disambiguate the slash."
              }
            }
          },
          "yield-star-spacing": {
            "defaultOptions": [],
            "meta": {
              "type": "layout",
              "docs": {
                "description": "Require or disallow spacing around the `*` in `yield*` expressions",
                "url": "https://eslint.style/rules/js/yield-star-spacing"
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "before",
                        "after",
                        "both",
                        "neither"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "before": {
                          "type": "boolean"
                        },
                        "after": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              ],
              "messages": {
                "missingBefore": "Missing space before *.",
                "missingAfter": "Missing space after *.",
                "unexpectedBefore": "Unexpected space before *.",
                "unexpectedAfter": "Unexpected space after *."
              }
            }
          }
        },
        "configs": {
          "disable-legacy": {
            "rules": {
              "array-bracket-newline": 0,
              "array-bracket-spacing": 0,
              "array-element-newline": 0,
              "arrow-parens": 0,
              "arrow-spacing": 0,
              "block-spacing": 0,
              "brace-style": 0,
              "comma-dangle": 0,
              "comma-spacing": 0,
              "comma-style": 0,
              "computed-property-spacing": 0,
              "dot-location": 0,
              "eol-last": 0,
              "func-call-spacing": 0,
              "function-call-argument-newline": 0,
              "function-paren-newline": 0,
              "generator-star-spacing": 0,
              "implicit-arrow-linebreak": 0,
              "indent": 0,
              "jsx-quotes": 0,
              "key-spacing": 0,
              "keyword-spacing": 0,
              "linebreak-style": 0,
              "lines-around-comment": 0,
              "lines-between-class-members": 0,
              "max-len": 0,
              "max-statements-per-line": 0,
              "multiline-ternary": 0,
              "new-parens": 0,
              "newline-per-chained-call": 0,
              "no-confusing-arrow": 0,
              "no-extra-parens": 0,
              "no-extra-semi": 0,
              "no-floating-decimal": 0,
              "no-mixed-operators": 0,
              "no-mixed-spaces-and-tabs": 0,
              "no-multi-spaces": 0,
              "no-multiple-empty-lines": 0,
              "no-tabs": 0,
              "no-trailing-spaces": 0,
              "no-whitespace-before-property": 0,
              "nonblock-statement-body-position": 0,
              "object-curly-newline": 0,
              "object-curly-spacing": 0,
              "object-property-newline": 0,
              "one-var-declaration-per-line": 0,
              "operator-linebreak": 0,
              "padded-blocks": 0,
              "padding-line-between-statements": 0,
              "quote-props": 0,
              "quotes": 0,
              "rest-spread-spacing": 0,
              "semi": 0,
              "semi-spacing": 0,
              "semi-style": 0,
              "space-before-blocks": 0,
              "space-before-function-paren": 0,
              "space-in-parens": 0,
              "space-infix-ops": 0,
              "space-unary-ops": 0,
              "spaced-comment": 0,
              "switch-colon-spacing": 0,
              "template-curly-spacing": 0,
              "template-tag-spacing": 0,
              "wrap-iife": 0,
              "wrap-regex": 0,
              "yield-star-spacing": 0,
              "@typescript-eslint/block-spacing": 0,
              "@typescript-eslint/brace-style": 0,
              "@typescript-eslint/comma-dangle": 0,
              "@typescript-eslint/comma-spacing": 0,
              "@typescript-eslint/func-call-spacing": 0,
              "@typescript-eslint/indent": 0,
              "@typescript-eslint/key-spacing": 0,
              "@typescript-eslint/keyword-spacing": 0,
              "@typescript-eslint/lines-around-comment": 0,
              "@typescript-eslint/lines-between-class-members": 0,
              "@typescript-eslint/member-delimiter-style": 0,
              "@typescript-eslint/no-extra-parens": 0,
              "@typescript-eslint/no-extra-semi": 0,
              "@typescript-eslint/object-curly-spacing": 0,
              "@typescript-eslint/padding-line-between-statements": 0,
              "@typescript-eslint/quotes": 0,
              "@typescript-eslint/semi": 0,
              "@typescript-eslint/space-before-blocks": 0,
              "@typescript-eslint/space-before-function-paren": 0,
              "@typescript-eslint/space-infix-ops": 0,
              "@typescript-eslint/type-annotation-spacing": 0,
              "react/jsx-child-element-spacing": 0,
              "react/jsx-closing-bracket-location": 0,
              "react/jsx-closing-tag-location": 0,
              "react/jsx-curly-brace-presence": 0,
              "react/jsx-curly-newline": 0,
              "react/jsx-curly-spacing": 0,
              "react/jsx-equals-spacing": 0,
              "react/jsx-first-prop-new-line": 0,
              "react/jsx-indent": 0,
              "react/jsx-indent-props": 0,
              "react/jsx-max-props-per-line": 0,
              "react/jsx-newline": 0,
              "react/jsx-one-expression-per-line": 0,
              "react/jsx-props-no-multi-spaces": 0,
              "react/jsx-self-closing-comp": 0,
              "react/jsx-sort-props": 0,
              "react/jsx-tag-spacing": 0,
              "react/jsx-wrap-multilines": 0
            }
          },
          "recommended": {
            "plugins": {
              "@stylistic": "[Circular Reference]"
            },
            "rules": {
              "@stylistic/array-bracket-spacing": [
                "error",
                "never"
              ],
              "@stylistic/arrow-parens": [
                "error",
                "as-needed",
                {
                  "requireForBlockBody": true
                }
              ],
              "@stylistic/arrow-spacing": [
                "error",
                {
                  "after": true,
                  "before": true
                }
              ],
              "@stylistic/block-spacing": [
                "error",
                "always"
              ],
              "@stylistic/brace-style": [
                "error",
                "stroustrup",
                {
                  "allowSingleLine": true
                }
              ],
              "@stylistic/comma-dangle": [
                "error",
                "always-multiline"
              ],
              "@stylistic/comma-spacing": [
                "error",
                {
                  "after": true,
                  "before": false
                }
              ],
              "@stylistic/comma-style": [
                "error",
                "last"
              ],
              "@stylistic/computed-property-spacing": [
                "error",
                "never",
                {
                  "enforceForClassMembers": true
                }
              ],
              "@stylistic/dot-location": [
                "error",
                "property"
              ],
              "@stylistic/eol-last": "error",
              "@stylistic/generator-star-spacing": [
                "error",
                {
                  "after": true,
                  "before": false
                }
              ],
              "@stylistic/indent": [
                "error",
                2,
                {
                  "ArrayExpression": 1,
                  "CallExpression": {
                    "arguments": 1
                  },
                  "flatTernaryExpressions": false,
                  "FunctionDeclaration": {
                    "body": 1,
                    "parameters": 1
                  },
                  "FunctionExpression": {
                    "body": 1,
                    "parameters": 1
                  },
                  "ignoreComments": false,
                  "ignoredNodes": [
                    "TSUnionType",
                    "TSIntersectionType",
                    "TSTypeParameterInstantiation",
                    "FunctionExpression > .params[decorators.length > 0]",
                    "FunctionExpression > .params > :matches(Decorator, :not(:first-child))"
                  ],
                  "ImportDeclaration": 1,
                  "MemberExpression": 1,
                  "ObjectExpression": 1,
                  "offsetTernaryExpressions": true,
                  "outerIIFEBody": 1,
                  "SwitchCase": 1,
                  "tabLength": 2,
                  "VariableDeclarator": 1
                }
              ],
              "@stylistic/indent-binary-ops": [
                "error",
                2
              ],
              "@stylistic/key-spacing": [
                "error",
                {
                  "afterColon": true,
                  "beforeColon": false
                }
              ],
              "@stylistic/keyword-spacing": [
                "error",
                {
                  "after": true,
                  "before": true
                }
              ],
              "@stylistic/lines-between-class-members": [
                "error",
                "always",
                {
                  "exceptAfterSingleLine": true
                }
              ],
              "@stylistic/max-statements-per-line": [
                "error",
                {
                  "max": 1
                }
              ],
              "@stylistic/member-delimiter-style": [
                "error",
                {
                  "multiline": {
                    "delimiter": "none",
                    "requireLast": false
                  },
                  "multilineDetection": "brackets",
                  "overrides": {
                    "interface": {
                      "multiline": {
                        "delimiter": "none",
                        "requireLast": false
                      }
                    }
                  },
                  "singleline": {
                    "delimiter": "comma"
                  }
                }
              ],
              "@stylistic/multiline-ternary": [
                "error",
                "always-multiline"
              ],
              "@stylistic/new-parens": "error",
              "@stylistic/no-extra-parens": [
                "error",
                "functions"
              ],
              "@stylistic/no-floating-decimal": "error",
              "@stylistic/no-mixed-operators": [
                "error",
                {
                  "allowSamePrecedence": true,
                  "groups": [
                    [
                      "==",
                      "!=",
                      "===",
                      "!==",
                      ">",
                      ">=",
                      "<",
                      "<="
                    ],
                    [
                      "&&",
                      "||"
                    ],
                    [
                      "in",
                      "instanceof"
                    ]
                  ]
                }
              ],
              "@stylistic/no-mixed-spaces-and-tabs": "error",
              "@stylistic/no-multi-spaces": "error",
              "@stylistic/no-multiple-empty-lines": [
                "error",
                {
                  "max": 1,
                  "maxBOF": 0,
                  "maxEOF": 0
                }
              ],
              "@stylistic/no-tabs": "error",
              "@stylistic/no-trailing-spaces": "error",
              "@stylistic/no-whitespace-before-property": "error",
              "@stylistic/object-curly-spacing": [
                "error",
                "always"
              ],
              "@stylistic/operator-linebreak": [
                "error",
                "before"
              ],
              "@stylistic/padded-blocks": [
                "error",
                {
                  "blocks": "never",
                  "classes": "never",
                  "switches": "never"
                }
              ],
              "@stylistic/quote-props": [
                "error",
                "consistent-as-needed"
              ],
              "@stylistic/quotes": [
                "error",
                "single",
                {
                  "allowTemplateLiterals": true,
                  "avoidEscape": false
                }
              ],
              "@stylistic/rest-spread-spacing": [
                "error",
                "never"
              ],
              "@stylistic/semi": [
                "error",
                "never"
              ],
              "@stylistic/semi-spacing": [
                "error",
                {
                  "after": true,
                  "before": false
                }
              ],
              "@stylistic/space-before-blocks": [
                "error",
                "always"
              ],
              "@stylistic/space-before-function-paren": [
                "error",
                {
                  "anonymous": "always",
                  "asyncArrow": "always",
                  "named": "never"
                }
              ],
              "@stylistic/space-in-parens": [
                "error",
                "never"
              ],
              "@stylistic/space-infix-ops": "error",
              "@stylistic/space-unary-ops": [
                "error",
                {
                  "nonwords": false,
                  "words": true
                }
              ],
              "@stylistic/spaced-comment": [
                "error",
                "always",
                {
                  "block": {
                    "balanced": true,
                    "exceptions": [
                      "*"
                    ],
                    "markers": [
                      "!"
                    ]
                  },
                  "line": {
                    "exceptions": [
                      "/",
                      "#"
                    ],
                    "markers": [
                      "/"
                    ]
                  }
                }
              ],
              "@stylistic/template-curly-spacing": "error",
              "@stylistic/template-tag-spacing": [
                "error",
                "never"
              ],
              "@stylistic/type-annotation-spacing": [
                "error",
                {}
              ],
              "@stylistic/type-generic-spacing": "error",
              "@stylistic/type-named-tuple-spacing": "error",
              "@stylistic/wrap-iife": [
                "error",
                "any",
                {
                  "functionPrototypeMethods": true
                }
              ],
              "@stylistic/yield-star-spacing": [
                "error",
                {
                  "after": true,
                  "before": false
                }
              ],
              "@stylistic/jsx-closing-bracket-location": "error",
              "@stylistic/jsx-closing-tag-location": "error",
              "@stylistic/jsx-curly-brace-presence": [
                "error",
                {
                  "propElementValues": "always"
                }
              ],
              "@stylistic/jsx-curly-newline": "error",
              "@stylistic/jsx-curly-spacing": [
                "error",
                "never"
              ],
              "@stylistic/jsx-equals-spacing": "error",
              "@stylistic/jsx-first-prop-new-line": "error",
              "@stylistic/jsx-function-call-newline": [
                "error",
                "multiline"
              ],
              "@stylistic/jsx-indent-props": [
                "error",
                2
              ],
              "@stylistic/jsx-max-props-per-line": [
                "error",
                {
                  "maximum": 1,
                  "when": "multiline"
                }
              ],
              "@stylistic/jsx-one-expression-per-line": [
                "error",
                {
                  "allow": "single-child"
                }
              ],
              "@stylistic/jsx-quotes": "error",
              "@stylistic/jsx-tag-spacing": [
                "error",
                {
                  "afterOpening": "never",
                  "beforeClosing": "never",
                  "beforeSelfClosing": "always",
                  "closingSlash": "never"
                }
              ],
              "@stylistic/jsx-wrap-multilines": [
                "error",
                {
                  "arrow": "parens-new-line",
                  "assignment": "parens-new-line",
                  "condition": "parens-new-line",
                  "declaration": "parens-new-line",
                  "logical": "parens-new-line",
                  "prop": "parens-new-line",
                  "propertyValue": "parens-new-line",
                  "return": "parens-new-line"
                }
              ]
            }
          },
          "recommended-flat": "[Circular Reference]",
          "all": {
            "plugins": {
              "@stylistic": "[Circular Reference]"
            },
            "rules": {
              "@stylistic/array-bracket-newline": 2,
              "@stylistic/array-bracket-spacing": 2,
              "@stylistic/array-element-newline": 2,
              "@stylistic/arrow-parens": 2,
              "@stylistic/arrow-spacing": 2,
              "@stylistic/block-spacing": 2,
              "@stylistic/brace-style": 2,
              "@stylistic/comma-dangle": 2,
              "@stylistic/comma-spacing": 2,
              "@stylistic/comma-style": 2,
              "@stylistic/computed-property-spacing": 2,
              "@stylistic/dot-location": 2,
              "@stylistic/eol-last": 2,
              "@stylistic/function-call-argument-newline": 2,
              "@stylistic/function-call-spacing": 2,
              "@stylistic/function-paren-newline": 2,
              "@stylistic/generator-star-spacing": 2,
              "@stylistic/implicit-arrow-linebreak": 2,
              "@stylistic/indent": 2,
              "@stylistic/indent-binary-ops": 2,
              "@stylistic/key-spacing": 2,
              "@stylistic/keyword-spacing": 2,
              "@stylistic/linebreak-style": 2,
              "@stylistic/lines-around-comment": 2,
              "@stylistic/lines-between-class-members": 2,
              "@stylistic/member-delimiter-style": 2,
              "@stylistic/multiline-comment-style": 2,
              "@stylistic/multiline-ternary": 2,
              "@stylistic/new-parens": 2,
              "@stylistic/newline-per-chained-call": 2,
              "@stylistic/no-confusing-arrow": 2,
              "@stylistic/no-extra-parens": 2,
              "@stylistic/no-extra-semi": 2,
              "@stylistic/no-floating-decimal": 2,
              "@stylistic/no-multi-spaces": 2,
              "@stylistic/no-multiple-empty-lines": 2,
              "@stylistic/no-trailing-spaces": 2,
              "@stylistic/no-whitespace-before-property": 2,
              "@stylistic/nonblock-statement-body-position": 2,
              "@stylistic/object-curly-newline": 2,
              "@stylistic/object-curly-spacing": 2,
              "@stylistic/object-property-newline": 2,
              "@stylistic/one-var-declaration-per-line": 2,
              "@stylistic/operator-linebreak": 2,
              "@stylistic/padded-blocks": 2,
              "@stylistic/padding-line-between-statements": 2,
              "@stylistic/quote-props": 2,
              "@stylistic/quotes": 2,
              "@stylistic/rest-spread-spacing": 2,
              "@stylistic/semi": 2,
              "@stylistic/semi-spacing": 2,
              "@stylistic/semi-style": 2,
              "@stylistic/space-before-blocks": 2,
              "@stylistic/space-before-function-paren": 2,
              "@stylistic/space-in-parens": 2,
              "@stylistic/space-infix-ops": 2,
              "@stylistic/space-unary-ops": 2,
              "@stylistic/spaced-comment": 2,
              "@stylistic/switch-colon-spacing": 2,
              "@stylistic/template-curly-spacing": 2,
              "@stylistic/template-tag-spacing": 2,
              "@stylistic/type-annotation-spacing": 2,
              "@stylistic/type-generic-spacing": 2,
              "@stylistic/type-named-tuple-spacing": 2,
              "@stylistic/wrap-iife": 2,
              "@stylistic/wrap-regex": 2,
              "@stylistic/yield-star-spacing": 2
            }
          },
          "all-flat": "[Circular Reference]"
        }
      },
      "promise": {
        "rules": {
          "param-names": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Enforce consistent param names and ordering when creating new promises.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/param-names.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "resolvePattern": {
                      "type": "string"
                    },
                    "rejectPattern": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "resolveParamNames": "Promise constructor parameters must be named to match \"{{ resolvePattern }}\"",
                "rejectParamNames": "Promise constructor parameters must be named to match \"{{ rejectPattern }}\""
              }
            }
          },
          "no-return-wrap": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow wrapping values in `Promise.resolve` or `Promise.reject` when not needed.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-return-wrap.md"
              },
              "messages": {
                "resolve": "Avoid wrapping return values in Promise.resolve",
                "reject": "Expected throw instead of Promise.reject"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowReject": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "always-return": {
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Require returning inside each `then()` to create readable and reusable Promise chains.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/always-return.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "ignoreLastCallback": {
                      "type": "boolean"
                    },
                    "ignoreAssignmentVariable": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[\\w$]+$"
                      },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "thenShouldReturnOrThrow": "Each then() should return a value or throw"
              }
            }
          },
          "catch-or-return": {
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforce the use of `catch()` on un-returned promises.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/catch-or-return.md"
              },
              "messages": {
                "terminationMethod": "Expected {{ terminationMethod }}() or return"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowFinally": {
                      "type": "boolean"
                    },
                    "allowThen": {
                      "type": "boolean"
                    },
                    "allowThenStrict": {
                      "type": "boolean"
                    },
                    "terminationMethod": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "prefer-await-to-callbacks": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Prefer `async`/`await` to the callback pattern.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/prefer-await-to-callbacks.md"
              },
              "messages": {
                "error": "Avoid callbacks. Prefer Async/Await."
              },
              "schema": []
            }
          },
          "prefer-await-to-then": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Prefer `await` to `then()`/`catch()`/`finally()` for reading Promise values.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/prefer-await-to-then.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "strict": {
                      "type": "boolean"
                    }
                  }
                }
              ],
              "messages": {
                "preferAwaitToCallback": "Prefer await to then()/catch()/finally()."
              }
            }
          },
          "prefer-catch": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Prefer `catch` to `then(a, b)`/`then(null, b)` for handling errors.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/prefer-catch.md"
              },
              "fixable": "code",
              "schema": [],
              "messages": {
                "preferCatchToThen": "Prefer `catch` to `then(a, b)`/`then(null, b)`."
              }
            }
          },
          "no-native": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Require creating a `Promise` constructor before using it in an ES5 environment.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-native.md"
              },
              "messages": {
                "name": "\"{{name}}\" is not defined."
              },
              "schema": []
            }
          },
          "no-callback-in-promise": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow calling `cb()` inside of a `then()` (use [util.callbackify][] instead).",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-callback-in-promise.md"
              },
              "messages": {
                "callback": "Avoid calling back inside of a promise."
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "exceptions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "timeoutsErr": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "no-promise-in-callback": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow using promises inside of callbacks.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-promise-in-callback.md"
              },
              "schema": [],
              "messages": {
                "avoidPromiseInCallback": "Avoid using promises inside of callbacks."
              }
            }
          },
          "no-nesting": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow nested `then()` or `catch()` statements.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-nesting.md"
              },
              "schema": [],
              "messages": {
                "avoidNesting": "Avoid nesting promises."
              }
            }
          },
          "avoid-new": {
            "meta": {
              "type": "suggestion",
              "docs": {
                "description": "Disallow creating `new` promises outside of utility libs (use [util.promisify][] instead).",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/avoid-new.md"
              },
              "schema": [],
              "messages": {
                "avoidNew": "Avoid creating new promises."
              }
            }
          },
          "no-new-statics": {
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow calling `new` on a Promise static method.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-new-statics.md"
              },
              "fixable": "code",
              "schema": [],
              "messages": {
                "avoidNewStatic": "Avoid calling 'new' on 'Promise.{{ name }}()'"
              }
            }
          },
          "no-return-in-finally": {
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow return statements in `finally()`.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-return-in-finally.md"
              },
              "schema": [],
              "messages": {
                "avoidReturnInFinally": "No return in finally"
              }
            }
          },
          "valid-params": {
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Enforces the proper number of arguments are passed to Promise functions.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/valid-params.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "exclude": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "requireOneOptionalArgument": "Promise.{{ name }}() requires 0 or 1 arguments, but received {{ numArgs }}",
                "requireOneArgument": "Promise.{{ name }}() requires 1 argument, but received {{ numArgs }}",
                "requireTwoOptionalArguments": "Promise.{{ name }}() requires 1 or 2 arguments, but received {{ numArgs }}"
              }
            }
          },
          "no-multiple-resolved": {
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow creating new promises with paths that resolve multiple times.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-multiple-resolved.md"
              },
              "messages": {
                "alreadyResolved": "Promise should not be resolved multiple times. Promise is already resolved on line {{line}}.",
                "potentiallyAlreadyResolved": "Promise should not be resolved multiple times. Promise is potentially resolved on line {{line}}."
              },
              "schema": []
            }
          },
          "spec-only": {
            "meta": {
              "type": "problem",
              "docs": {
                "description": "Disallow use of non-standard Promise static methods.",
                "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/spec-only.md"
              },
              "schema": [
                {
                  "type": "object",
                  "properties": {
                    "allowedMethods": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "messages": {
                "avoidNonStandard": "Avoid using non-standard 'Promise.{{ name }}'"
              }
            }
          }
        },
        "rulesConfig": {
          "param-names": 1,
          "always-return": 1,
          "no-return-wrap": 1,
          "no-native": 0,
          "catch-or-return": 1
        },
        "configs": {
          "recommended": {
            "plugins": [
              "promise"
            ],
            "rules": {
              "promise/always-return": "error",
              "promise/no-return-wrap": "error",
              "promise/param-names": "error",
              "promise/catch-or-return": "error",
              "promise/no-native": "off",
              "promise/no-nesting": "warn",
              "promise/no-promise-in-callback": "warn",
              "promise/no-callback-in-promise": "warn",
              "promise/avoid-new": "off",
              "promise/no-new-statics": "error",
              "promise/no-return-in-finally": "warn",
              "promise/valid-params": "warn"
            }
          },
          "flat/recommended": {
            "name": "promise/flat/recommended",
            "plugins": {
              "promise": "[Circular Reference]"
            },
            "rules": "[Circular Reference]"
          }
        }
      }
    },
    "rules": {
      "accessor-pairs": "off",
      "array-callback-return": [
        "error",
        {
          "allowImplicit": true
        }
      ],
      "block-scoped-var": "error",
      "complexity": [
        "off",
        20
      ],
      "class-methods-use-this": "off",
      "consistent-return": "error",
      "constructor-super": "error",
      "curly": [
        "error",
        "all"
      ],
      "default-case": [
        "error",
        {
          "commentPattern": "^no default$"
        }
      ],
      "default-case-last": "error",
      "default-param-last": "off",
      "dot-notation": "off",
      "eqeqeq": [
        "error",
        "always",
        {
          "null": "ignore"
        }
      ],
      "grouped-accessor-pairs": "error",
      "guard-for-in": "error",
      "init-declarations": "off",
      "max-classes-per-file": [
        "error",
        1
      ],
      "no-alert": "error",
      "no-caller": "error",
      "no-case-declarations": "error",
      "no-class-assign": "error",
      "no-const-assign": "error",
      "no-constructor-return": "error",
      "no-div-regex": "off",
      "no-dupe-class-members": "off",
      "no-duplicate-imports": "off",
      "no-else-return": [
        "error",
        {
          "allowElseIf": false
        }
      ],
      "no-empty-function": "off",
      "no-empty-pattern": "error",
      "no-eq-null": "off",
      "no-eval": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-extra-label": "error",
      "no-fallthrough": "error",
      "no-global-assign": [
        "error",
        {
          "exceptions": []
        }
      ],
      "no-native-reassign": "off",
      "no-implicit-coercion": [
        "off",
        {
          "boolean": false,
          "number": true,
          "string": true,
          "allow": []
        }
      ],
      "no-implicit-globals": "off",
      "no-implied-eval": "off",
      "no-invalid-this": "off",
      "no-iterator": "error",
      "no-labels": [
        "error",
        {
          "allowLoop": false,
          "allowSwitch": false
        }
      ],
      "no-lone-blocks": "error",
      "no-loop-func": "off",
      "no-magic-numbers": "off",
      "no-multi-str": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-wrappers": "error",
      "no-nonoctal-decimal-escape": "error",
      "no-octal": "error",
      "no-octal-escape": "error",
      "no-param-reassign": [
        "error",
        {
          "props": true,
          "ignorePropertyModificationsFor": [
            "acc",
            "accumulator",
            "event",
            "req",
            "request",
            "res",
            "response",
            "staticContext"
          ]
        }
      ],
      "no-proto": "error",
      "no-redeclare": "off",
      "no-restricted-exports": [
        "error",
        {
          "restrictedNamedExports": [
            "default",
            "then"
          ]
        }
      ],
      "no-restricted-globals": [
        "error",
        {
          "name": "addEventListener",
          "message": "'addEventListener' should be written as 'window.addEventListener' or 'document.addEventListener' instead."
        },
        {
          "name": "blur",
          "message": "'blur' should be written as 'window.blur' or 'document.blur' instead."
        },
        {
          "name": "close",
          "message": "'close' should be written as 'window.close' or 'document.close' instead."
        },
        {
          "name": "closed",
          "message": "'closed' should be written as 'window.closed' or 'document.closed' instead."
        },
        {
          "name": "confirm",
          "message": "'confirm' should be written as 'window.confirm' or 'document.confirm' instead."
        },
        {
          "name": "defaultStatus",
          "message": "'defaultStatus' should be written as 'window.defaultStatus' or 'document.defaultStatus' instead."
        },
        {
          "name": "defaultstatus",
          "message": "'defaultstatus' should be written as 'window.defaultstatus' or 'document.defaultstatus' instead."
        },
        {
          "name": "event",
          "message": "'event' should be written as 'window.event' or 'document.event' instead."
        },
        {
          "name": "external",
          "message": "'external' should be written as 'window.external' or 'document.external' instead."
        },
        {
          "name": "find",
          "message": "'find' should be written as 'window.find' or 'document.find' instead."
        },
        {
          "name": "focus",
          "message": "'focus' should be written as 'window.focus' or 'document.focus' instead."
        },
        {
          "name": "frameElement",
          "message": "'frameElement' should be written as 'window.frameElement' or 'document.frameElement' instead."
        },
        {
          "name": "frames",
          "message": "'frames' should be written as 'window.frames' or 'document.frames' instead."
        },
        {
          "name": "history",
          "message": "'history' should be written as 'window.history' or 'document.history' instead."
        },
        {
          "name": "innerHeight",
          "message": "'innerHeight' should be written as 'window.innerHeight' or 'document.innerHeight' instead."
        },
        {
          "name": "innerWidth",
          "message": "'innerWidth' should be written as 'window.innerWidth' or 'document.innerWidth' instead."
        },
        {
          "name": "length",
          "message": "'length' should be written as 'window.length' or 'document.length' instead."
        },
        {
          "name": "location",
          "message": "'location' should be written as 'window.location' or 'document.location' instead."
        },
        {
          "name": "locationbar",
          "message": "'locationbar' should be written as 'window.locationbar' or 'document.locationbar' instead."
        },
        {
          "name": "menubar",
          "message": "'menubar' should be written as 'window.menubar' or 'document.menubar' instead."
        },
        {
          "name": "moveBy",
          "message": "'moveBy' should be written as 'window.moveBy' or 'document.moveBy' instead."
        },
        {
          "name": "moveTo",
          "message": "'moveTo' should be written as 'window.moveTo' or 'document.moveTo' instead."
        },
        {
          "name": "name",
          "message": "'name' should be written as 'window.name' or 'document.name' instead."
        },
        {
          "name": "onblur",
          "message": "'onblur' should be written as 'window.onblur' or 'document.onblur' instead."
        },
        {
          "name": "onerror",
          "message": "'onerror' should be written as 'window.onerror' or 'document.onerror' instead."
        },
        {
          "name": "onfocus",
          "message": "'onfocus' should be written as 'window.onfocus' or 'document.onfocus' instead."
        },
        {
          "name": "onload",
          "message": "'onload' should be written as 'window.onload' or 'document.onload' instead."
        },
        {
          "name": "onresize",
          "message": "'onresize' should be written as 'window.onresize' or 'document.onresize' instead."
        },
        {
          "name": "onunload",
          "message": "'onunload' should be written as 'window.onunload' or 'document.onunload' instead."
        },
        {
          "name": "open",
          "message": "'open' should be written as 'window.open' or 'document.open' instead."
        },
        {
          "name": "opener",
          "message": "'opener' should be written as 'window.opener' or 'document.opener' instead."
        },
        {
          "name": "opera",
          "message": "'opera' should be written as 'window.opera' or 'document.opera' instead."
        },
        {
          "name": "outerHeight",
          "message": "'outerHeight' should be written as 'window.outerHeight' or 'document.outerHeight' instead."
        },
        {
          "name": "outerWidth",
          "message": "'outerWidth' should be written as 'window.outerWidth' or 'document.outerWidth' instead."
        },
        {
          "name": "pageXOffset",
          "message": "'pageXOffset' should be written as 'window.pageXOffset' or 'document.pageXOffset' instead."
        },
        {
          "name": "pageYOffset",
          "message": "'pageYOffset' should be written as 'window.pageYOffset' or 'document.pageYOffset' instead."
        },
        {
          "name": "parent",
          "message": "'parent' should be written as 'window.parent' or 'document.parent' instead."
        },
        {
          "name": "print",
          "message": "'print' should be written as 'window.print' or 'document.print' instead."
        },
        {
          "name": "removeEventListener",
          "message": "'removeEventListener' should be written as 'window.removeEventListener' or 'document.removeEventListener' instead."
        },
        {
          "name": "resizeBy",
          "message": "'resizeBy' should be written as 'window.resizeBy' or 'document.resizeBy' instead."
        },
        {
          "name": "resizeTo",
          "message": "'resizeTo' should be written as 'window.resizeTo' or 'document.resizeTo' instead."
        },
        {
          "name": "screen",
          "message": "'screen' should be written as 'window.screen' or 'document.screen' instead."
        },
        {
          "name": "screenLeft",
          "message": "'screenLeft' should be written as 'window.screenLeft' or 'document.screenLeft' instead."
        },
        {
          "name": "screenTop",
          "message": "'screenTop' should be written as 'window.screenTop' or 'document.screenTop' instead."
        },
        {
          "name": "screenX",
          "message": "'screenX' should be written as 'window.screenX' or 'document.screenX' instead."
        },
        {
          "name": "screenY",
          "message": "'screenY' should be written as 'window.screenY' or 'document.screenY' instead."
        },
        {
          "name": "scroll",
          "message": "'scroll' should be written as 'window.scroll' or 'document.scroll' instead."
        },
        {
          "name": "scrollbars",
          "message": "'scrollbars' should be written as 'window.scrollbars' or 'document.scrollbars' instead."
        },
        {
          "name": "scrollBy",
          "message": "'scrollBy' should be written as 'window.scrollBy' or 'document.scrollBy' instead."
        },
        {
          "name": "scrollTo",
          "message": "'scrollTo' should be written as 'window.scrollTo' or 'document.scrollTo' instead."
        },
        {
          "name": "scrollX",
          "message": "'scrollX' should be written as 'window.scrollX' or 'document.scrollX' instead."
        },
        {
          "name": "scrollY",
          "message": "'scrollY' should be written as 'window.scrollY' or 'document.scrollY' instead."
        },
        {
          "name": "self",
          "message": "'self' should be written as 'window.self' or 'document.self' instead."
        },
        {
          "name": "status",
          "message": "'status' should be written as 'window.status' or 'document.status' instead."
        },
        {
          "name": "statusbar",
          "message": "'statusbar' should be written as 'window.statusbar' or 'document.statusbar' instead."
        },
        {
          "name": "stop",
          "message": "'stop' should be written as 'window.stop' or 'document.stop' instead."
        },
        {
          "name": "toolbar",
          "message": "'toolbar' should be written as 'window.toolbar' or 'document.toolbar' instead."
        },
        {
          "name": "top",
          "message": "'top' should be written as 'window.top' or 'document.top' instead."
        },
        {
          "name": "isFinite",
          "message": "Use Number.isFinite instead..."
        },
        {
          "name": "isNaN",
          "message": "Use Number.isNaN instead..."
        }
      ],
      "no-restricted-imports": "off",
      "no-restricted-properties": [
        "error",
        {
          "object": "arguments",
          "property": "callee",
          "message": "arguments.callee is deprecated"
        },
        {
          "object": "global",
          "property": "isFinite",
          "message": "Please use Number.isFinite instead"
        },
        {
          "object": "self",
          "property": "isFinite",
          "message": "Please use Number.isFinite instead"
        },
        {
          "object": "window",
          "property": "isFinite",
          "message": "Please use Number.isFinite instead"
        },
        {
          "object": "global",
          "property": "isNaN",
          "message": "Please use Number.isNaN instead"
        },
        {
          "object": "self",
          "property": "isNaN",
          "message": "Please use Number.isNaN instead"
        },
        {
          "object": "window",
          "property": "isNaN",
          "message": "Please use Number.isNaN instead"
        },
        {
          "property": "__defineGetter__",
          "message": "Please use Object.defineProperty instead."
        },
        {
          "property": "__defineSetter__",
          "message": "Please use Object.defineProperty instead."
        },
        {
          "object": "Math",
          "property": "pow",
          "message": "Use the exponentiation operator (**) instead."
        }
      ],
      "no-return-assign": [
        "error",
        "always"
      ],
      "no-return-await": "off",
      "no-script-url": "error",
      "no-self-assign": [
        "error",
        {
          "props": true
        }
      ],
      "no-self-compare": "error",
      "no-sequences": "error",
      "no-this-before-super": "error",
      "no-throw-literal": "off",
      "no-unmodified-loop-condition": "off",
      "no-unused-expressions": "off",
      "no-unused-labels": "error",
      "no-useless-call": "off",
      "no-useless-catch": "error",
      "no-useless-concat": "error",
      "no-useless-computed-key": "error",
      "no-useless-constructor": "off",
      "no-useless-escape": "error",
      "no-useless-return": "error",
      "no-useless-rename": [
        "error",
        {
          "ignoreDestructuring": false,
          "ignoreImport": false,
          "ignoreExport": false
        }
      ],
      "no-var": "error",
      "no-void": [
        "error",
        {
          "allowAsStatement": true
        }
      ],
      "no-warning-comments": [
        "off",
        {
          "terms": [
            "todo",
            "fixme"
          ],
          "location": "start"
        }
      ],
      "no-with": "error",
      "no-catch-shadow": "off",
      "no-delete-var": "error",
      "no-label-var": "error",
      "no-shadow": "off",
      "no-shadow-restricted-names": "error",
      "no-undef": "off",
      "no-undef-init": "error",
      "no-undefined": "off",
      "no-unused-vars": "off",
      "no-use-before-define": "off",
      "object-shorthand": [
        "error",
        "always",
        {
          "ignoreConstructors": false,
          "avoidQuotes": true
        }
      ],
      "prefer-arrow-callback": [
        "error",
        {
          "allowNamedFunctions": false,
          "allowUnboundThis": true
        }
      ],
      "prefer-const": [
        "error",
        {
          "destructuring": "any",
          "ignoreReadBeforeAssign": true
        }
      ],
      "prefer-destructuring": "off",
      "prefer-named-capture-group": "off",
      "prefer-numeric-literals": "error",
      "prefer-object-has-own": "error",
      "prefer-promise-reject-errors": [
        "error",
        {
          "allowEmptyReject": true
        }
      ],
      "prefer-regex-literals": [
        "error",
        {
          "disallowRedundantWrapping": true
        }
      ],
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "radix": "error",
      "require-await": "off",
      "require-unicode-regexp": "off",
      "require-yield": "error",
      "sort-imports": [
        "off",
        {
          "ignoreCase": false,
          "ignoreDeclarationSort": false,
          "ignoreMemberSort": false,
          "memberSyntaxSortOrder": [
            "none",
            "all",
            "multiple",
            "single"
          ]
        }
      ],
      "strict": [
        "error",
        "never"
      ],
      "symbol-description": "error",
      "vars-on-top": "error",
      "yoda": "error",
      "for-direction": "error",
      "getter-return": [
        "error",
        {
          "allowImplicit": true
        }
      ],
      "no-async-promise-executor": "error",
      "no-await-in-loop": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": [
        "error",
        "always"
      ],
      "no-console": "error",
      "no-constant-binary-expression": "error",
      "no-constant-condition": "error",
      "no-control-regex": "error",
      "no-debugger": "error",
      "no-dupe-args": "error",
      "no-dupe-else-if": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-empty": "error",
      "no-empty-character-class": "error",
      "no-ex-assign": "error",
      "no-extra-boolean-cast": "error",
      "no-func-assign": "error",
      "no-import-assign": "error",
      "no-inner-declarations": "error",
      "no-invalid-regexp": "error",
      "no-irregular-whitespace": "error",
      "no-loss-of-precision": "off",
      "no-misleading-character-class": "error",
      "no-obj-calls": "error",
      "no-promise-executor-return": "error",
      "no-prototype-builtins": "error",
      "no-regex-spaces": "error",
      "no-setter-return": "error",
      "no-sparse-arrays": "error",
      "no-template-curly-in-string": "error",
      "no-unexpected-multiline": "off",
      "no-unreachable": "error",
      "no-unreachable-loop": [
        "error",
        {
          "ignore": []
        }
      ],
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unsafe-optional-chaining": [
        "error",
        {
          "disallowArithmeticOperators": true
        }
      ],
      "no-unused-private-class-members": "error",
      "no-useless-backreference": "error",
      "no-negated-in-lhs": "off",
      "require-atomic-updates": "off",
      "use-isnan": "error",
      "valid-typeof": [
        "error",
        {
          "requireStringLiterals": true
        }
      ],
      "no-empty-static-block": "error",
      "no-useless-assignment": "error",
      "no-object-constructor": "error",
      "no-new-native-nonconstructor": "error",
      "prefer-exponentiation-operator": "error",
      "@stylistic/array-bracket-newline": "off",
      "@stylistic/array-element-newline": "off",
      "@stylistic/array-bracket-spacing": "off",
      "@stylistic/arrow-parens": "off",
      "@stylistic/arrow-spacing": "off",
      "@stylistic/block-spacing": "off",
      "@stylistic/brace-style": "off",
      "@stylistic/comma-dangle": "off",
      "@stylistic/comma-spacing": "off",
      "@stylistic/comma-style": "off",
      "@stylistic/computed-property-spacing": "off",
      "@stylistic/dot-location": "off",
      "@stylistic/eol-last": "off",
      "@stylistic/function-call-argument-newline": "off",
      "@stylistic/func-call-spacing": "off",
      "@stylistic/function-paren-newline": "off",
      "@stylistic/generator-star-spacing": "off",
      "@stylistic/implicit-arrow-linebreak": "off",
      "@stylistic/indent": "off",
      "@stylistic/jsx-quotes": "off",
      "@stylistic/key-spacing": "off",
      "@stylistic/keyword-spacing": "off",
      "@stylistic/line-comment-position": [
        "off",
        {
          "position": "above",
          "ignorePattern": "",
          "applyDefaultPatterns": true
        }
      ],
      "@stylistic/linebreak-style": "off",
      "@stylistic/lines-between-class-members": "off",
      "@stylistic/lines-around-comment": "off",
      "@stylistic/lines-around-directive": [
        "error",
        {
          "before": "always",
          "after": "always"
        }
      ],
      "@stylistic/max-len": "off",
      "@stylistic/max-statements-per-line": "off",
      "@stylistic/multiline-comment-style": [
        "off",
        "starred-block"
      ],
      "@stylistic/multiline-ternary": "off",
      "@stylistic/new-parens": "off",
      "@stylistic/newline-after-var": "off",
      "@stylistic/newline-before-return": "off",
      "@stylistic/newline-per-chained-call": "off",
      "@stylistic/no-confusing-arrow": "off",
      "@stylistic/no-extra-parens": "off",
      "@stylistic/no-extra-semi": "off",
      "@stylistic/no-floating-decimal": "off",
      "@stylistic/no-mixed-operators": "off",
      "@stylistic/no-mixed-spaces-and-tabs": "off",
      "@stylistic/no-multi-spaces": "off",
      "@stylistic/no-multiple-empty-lines": "off",
      "@stylistic/no-spaced-func": "error",
      "@stylistic/no-tabs": "off",
      "@stylistic/no-trailing-spaces": "off",
      "@stylistic/no-whitespace-before-property": "off",
      "@stylistic/nonblock-statement-body-position": "off",
      "@stylistic/object-curly-newline": "off",
      "@stylistic/object-curly-spacing": "off",
      "@stylistic/object-property-newline": "off",
      "@stylistic/one-var-declaration-per-line": "off",
      "@stylistic/operator-linebreak": "off",
      "@stylistic/padded-blocks": "off",
      "@stylistic/padding-line-between-statements": "off",
      "@stylistic/quote-props": "off",
      "@stylistic/quotes": "off",
      "@stylistic/rest-spread-spacing": "off",
      "@stylistic/semi": "off",
      "@stylistic/semi-spacing": "off",
      "@stylistic/semi-style": "off",
      "@stylistic/space-before-blocks": "off",
      "@stylistic/space-before-function-paren": "off",
      "@stylistic/space-in-parens": "off",
      "@stylistic/space-infix-ops": "off",
      "@stylistic/space-unary-ops": "off",
      "@stylistic/spaced-comment": [
        "error",
        "always",
        {
          "line": {
            "exceptions": [
              "-",
              "+"
            ],
            "markers": [
              "=",
              "!",
              "/"
            ]
          },
          "block": {
            "exceptions": [
              "-",
              "+"
            ],
            "markers": [
              "=",
              "!",
              ":",
              "::"
            ],
            "balanced": true
          }
        }
      ],
      "@stylistic/switch-colon-spacing": "off",
      "@stylistic/template-curly-spacing": "off",
      "@stylistic/template-tag-spacing": "off",
      "@stylistic/wrap-iife": "off",
      "@stylistic/wrap-regex": "off",
      "@stylistic/yield-star-spacing": "off",
      "@stylistic/curly-newline": "off",
      "@stylistic/indent-binary-ops": "off",
      "@stylistic/jsx-child-element-spacing": "off",
      "@stylistic/jsx-closing-bracket-location": "off",
      "@stylistic/jsx-closing-tag-location": "off",
      "@stylistic/jsx-curly-brace-presence": "off",
      "@stylistic/jsx-curly-newline": "off",
      "@stylistic/jsx-curly-spacing": "off",
      "@stylistic/jsx-equals-spacing": "off",
      "@stylistic/jsx-first-prop-new-line": "off",
      "@stylistic/jsx-function-call-newline": "off",
      "@stylistic/jsx-indent": "off",
      "@stylistic/jsx-indent-props": "off",
      "@stylistic/jsx-max-props-per-line": "off",
      "@stylistic/jsx-newline": "off",
      "@stylistic/jsx-one-expression-per-line": "off",
      "@stylistic/jsx-pascal-case": "off",
      "@stylistic/jsx-props-no-multi-spaces": "off",
      "@stylistic/jsx-self-closing-comp": "off",
      "@stylistic/jsx-sort-props": "off",
      "@stylistic/jsx-tag-spacing": "off",
      "@stylistic/jsx-wrap-multilines": "off",
      "@stylistic/member-delimiter-style": "off",
      "@stylistic/type-annotation-spacing": "off",
      "@stylistic/type-generic-spacing": "off",
      "@stylistic/type-named-tuple-spacing": "off",
      "promise/catch-or-return": "error",
      "promise/no-return-wrap": "error",
      "promise/param-names": "error",
      "promise/always-return": "error",
      "promise/no-native": "off",
      "promise/no-nesting": "error",
      "promise/no-promise-in-callback": "error",
      "promise/no-callback-in-promise": "error",
      "promise/avoid-new": "off",
      "promise/no-new-statics": "error",
      "promise/no-return-in-finally": "error",
      "promise/valid-params": "error",
      "promise/prefer-await-to-then": "off",
      "promise/prefer-await-to-callbacks": "error",
      "promise/no-multiple-resolved": "error",
      "promise/prefer-catch": "error",
      "promise/spec-only": "error",
      "no-restricted-syntax": [
        "error",
        {
          "selector": "TSEnumDeclaration",
          "message": "Typescript enums are problematic because the values can change when new keys are added to an enum. Prefer a type of unioned strings in place of an enum type."
        },
        {
          "selector": "ForInStatement",
          "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
        },
        {
          "selector": "ForOfStatement",
          "message": "Loops should be avoided in favor of array iterations."
        },
        {
          "selector": "LabeledStatement",
          "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
        },
        {
          "selector": "WithStatement",
          "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
        }
      ],
      "@typescript-eslint/adjacent-overload-signatures": "error",
      "@typescript-eslint/array-type": "error",
      "@typescript-eslint/await-thenable": "error",
      "@typescript-eslint/ban-ts-comment": "error",
      "@typescript-eslint/ban-tslint-comment": "error",
      "@typescript-eslint/class-literal-property-style": "error",
      "@typescript-eslint/class-methods-use-this": "off",
      "@typescript-eslint/consistent-generic-constructors": "error",
      "@typescript-eslint/consistent-indexed-object-style": "error",
      "@typescript-eslint/consistent-return": "off",
      "@typescript-eslint/consistent-type-assertions": "error",
      "@typescript-eslint/consistent-type-definitions": [
        "error",
        "type"
      ],
      "@typescript-eslint/consistent-type-exports": "error",
      "@typescript-eslint/consistent-type-imports": [
        "error",
        {
          "prefer": "type-imports",
          "fixStyle": "separate-type-imports"
        }
      ],
      "@typescript-eslint/default-param-last": "error",
      "@typescript-eslint/dot-notation": "error",
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/explicit-member-accessibility": "error",
      "@typescript-eslint/explicit-module-boundary-types": "error",
      "@typescript-eslint/init-declarations": "error",
      "@typescript-eslint/max-params": [
        "off",
        3
      ],
      "@typescript-eslint/member-ordering": "error",
      "@typescript-eslint/method-signature-style": "error",
      "@typescript-eslint/naming-convention": "off",
      "@typescript-eslint/no-array-constructor": "error",
      "@typescript-eslint/no-array-delete": "error",
      "@typescript-eslint/no-base-to-string": "error",
      "@typescript-eslint/no-confusing-non-null-assertion": "error",
      "@typescript-eslint/no-confusing-void-expression": [
        "error",
        {
          "ignoreArrowShorthand": true
        }
      ],
      "@typescript-eslint/no-dupe-class-members": "error",
      "@typescript-eslint/no-duplicate-enum-values": "error",
      "@typescript-eslint/no-duplicate-type-constituents": "error",
      "@typescript-eslint/no-dynamic-delete": "error",
      "@typescript-eslint/no-empty-function": "error",
      "@typescript-eslint/no-empty-interface": "off",
      "@typescript-eslint/no-empty-object-type": "error",
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-extra-non-null-assertion": "error",
      "@typescript-eslint/no-extraneous-class": "error",
      "@typescript-eslint/no-floating-promises": "error",
      "@typescript-eslint/no-for-in-array": "error",
      "@typescript-eslint/no-implied-eval": "error",
      "@typescript-eslint/no-import-type-side-effects": "error",
      "@typescript-eslint/no-inferrable-types": "error",
      "@typescript-eslint/no-invalid-this": "error",
      "@typescript-eslint/no-invalid-void-type": "error",
      "@typescript-eslint/no-loop-func": "error",
      "@typescript-eslint/no-loss-of-precision": "error",
      "@typescript-eslint/no-magic-numbers": [
        "error",
        {
          "ignore": [
            -1,
            0,
            1,
            2,
            3,
            4,
            5,
            100,
            1024,
            1000,
            10000
          ],
          "ignoreArrayIndexes": true,
          "ignoreDefaultValues": true,
          "ignoreTypeIndexes": true,
          "ignoreReadonlyClassProperties": true,
          "ignoreEnums": true,
          "ignoreNumericLiteralTypes": true
        }
      ],
      "@typescript-eslint/no-meaningless-void-operator": "error",
      "@typescript-eslint/no-misused-new": "error",
      "@typescript-eslint/no-misused-promises": "error",
      "@typescript-eslint/no-mixed-enums": "error",
      "@typescript-eslint/no-namespace": "error",
      "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
      "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
      "@typescript-eslint/no-non-null-assertion": "error",
      "@typescript-eslint/no-redeclare": "error",
      "@typescript-eslint/no-redundant-type-constituents": "error",
      "@typescript-eslint/no-require-imports": "error",
      "@typescript-eslint/no-restricted-imports": "error",
      "@typescript-eslint/no-restricted-types": "error",
      "@typescript-eslint/no-shadow": "error",
      "@typescript-eslint/no-this-alias": "error",
      "@typescript-eslint/no-type-alias": "off",
      "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
      "@typescript-eslint/no-unnecessary-condition": "error",
      "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
      "@typescript-eslint/no-unnecessary-qualifier": "error",
      "@typescript-eslint/no-unnecessary-template-expression": "error",
      "@typescript-eslint/no-unnecessary-type-arguments": "error",
      "@typescript-eslint/no-unnecessary-type-assertion": "error",
      "@typescript-eslint/no-unnecessary-type-constraint": "error",
      "@typescript-eslint/no-unnecessary-type-parameters": "error",
      "@typescript-eslint/no-unsafe-argument": "error",
      "@typescript-eslint/no-unsafe-assignment": "error",
      "@typescript-eslint/no-unsafe-call": "error",
      "@typescript-eslint/no-unsafe-declaration-merging": "error",
      "@typescript-eslint/no-unsafe-enum-comparison": "error",
      "@typescript-eslint/no-unsafe-function-type": "error",
      "@typescript-eslint/no-unsafe-member-access": "error",
      "@typescript-eslint/no-unsafe-return": "error",
      "@typescript-eslint/no-unsafe-unary-minus": "error",
      "@typescript-eslint/no-unused-expressions": "error",
      "@typescript-eslint/no-unused-vars": [
        "error",
        {
          "args": "all",
          "argsIgnorePattern": "^_",
          "caughtErrors": "all",
          "caughtErrorsIgnorePattern": "^_",
          "destructuredArrayIgnorePattern": "^_",
          "varsIgnorePattern": "^_",
          "ignoreRestSiblings": true
        }
      ],
      "@typescript-eslint/no-use-before-define": "error",
      "@typescript-eslint/no-useless-constructor": "error",
      "@typescript-eslint/no-useless-empty-export": "error",
      "@typescript-eslint/no-var-requires": "off",
      "@typescript-eslint/no-wrapper-object-types": "error",
      "@typescript-eslint/non-nullable-type-assertion-style": "error",
      "@typescript-eslint/only-throw-error": "error",
      "@typescript-eslint/parameter-properties": "error",
      "@typescript-eslint/prefer-as-const": "error",
      "@typescript-eslint/prefer-destructuring": [
        "error",
        {
          "VariableDeclarator": {
            "array": false,
            "object": true
          },
          "AssignmentExpression": {
            "array": true,
            "object": false
          }
        },
        {
          "enforceForRenamedProperties": false
        }
      ],
      "@typescript-eslint/prefer-enum-initializers": "error",
      "@typescript-eslint/prefer-find": "error",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-function-type": "error",
      "@typescript-eslint/prefer-includes": "error",
      "@typescript-eslint/prefer-literal-enum-member": "error",
      "@typescript-eslint/prefer-namespace-keyword": "error",
      "@typescript-eslint/prefer-nullish-coalescing": "error",
      "@typescript-eslint/prefer-optional-chain": "error",
      "@typescript-eslint/prefer-promise-reject-errors": "error",
      "@typescript-eslint/prefer-readonly": "error",
      "@typescript-eslint/prefer-readonly-parameter-types": "off",
      "@typescript-eslint/prefer-reduce-type-parameter": "error",
      "@typescript-eslint/prefer-regexp-exec": "error",
      "@typescript-eslint/prefer-return-this-type": "error",
      "@typescript-eslint/prefer-string-starts-ends-with": "error",
      "@typescript-eslint/prefer-ts-expect-error": "off",
      "@typescript-eslint/promise-function-async": "error",
      "@typescript-eslint/require-array-sort-compare": "error",
      "@typescript-eslint/require-await": "error",
      "@typescript-eslint/restrict-plus-operands": "error",
      "@typescript-eslint/restrict-template-expressions": "error",
      "@typescript-eslint/return-await": "error",
      "@typescript-eslint/sort-type-constituents": "error",
      "@typescript-eslint/strict-boolean-expressions": [
        "error",
        {
          "allowNullableBoolean": true
        }
      ],
      "@typescript-eslint/switch-exhaustiveness-check": "error",
      "@typescript-eslint/triple-slash-reference": "error",
      "@typescript-eslint/typedef": "error",
      "@typescript-eslint/unbound-method": "error",
      "@typescript-eslint/unified-signatures": "error",
      "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
      "@typescript-eslint/no-deprecated": "error",
      "@typescript-eslint/no-misused-spread": "error",
      "@typescript-eslint/no-unsafe-type-assertion": "error",
      "@typescript-eslint/related-getter-setter-pairs": "error",
      "block-spacing": "off",
      "key-spacing": "off",
      "lines-around-comment": "off",
      "max-params": "off",
      "no-array-constructor": "off",
      "no-extra-semi": "off"
    }
  }
]